// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rpc.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Etcdserverpb {

  /// <summary>Holder for reflection information generated from rpc.proto</summary>
  public static partial class RpcReflection {

    #region Descriptor
    /// <summary>File descriptor for rpc.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RpcReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglycGMucHJvdG8SDGV0Y2RzZXJ2ZXJwYhoKZ29nby5wcm90bxoIa3YucHJv",
            "dG8aCmF1dGgucHJvdG8aEmdhbm5vdGF0aW9ucy5wcm90byJcCg5SZXNwb25z",
            "ZUhlYWRlchISCgpjbHVzdGVyX2lkGAEgASgEEhEKCW1lbWJlcl9pZBgCIAEo",
            "BBIQCghyZXZpc2lvbhgDIAEoAxIRCglyYWZ0X3Rlcm0YBCABKAQi5AMKDFJh",
            "bmdlUmVxdWVzdBILCgNrZXkYASABKAwSEQoJcmFuZ2VfZW5kGAIgASgMEg0K",
            "BWxpbWl0GAMgASgDEhAKCHJldmlzaW9uGAQgASgDEjgKCnNvcnRfb3JkZXIY",
            "BSABKA4yJC5ldGNkc2VydmVycGIuUmFuZ2VSZXF1ZXN0LlNvcnRPcmRlchI6",
            "Cgtzb3J0X3RhcmdldBgGIAEoDjIlLmV0Y2RzZXJ2ZXJwYi5SYW5nZVJlcXVl",
            "c3QuU29ydFRhcmdldBIUCgxzZXJpYWxpemFibGUYByABKAgSEQoJa2V5c19v",
            "bmx5GAggASgIEhIKCmNvdW50X29ubHkYCSABKAgSGAoQbWluX21vZF9yZXZp",
            "c2lvbhgKIAEoAxIYChBtYXhfbW9kX3JldmlzaW9uGAsgASgDEhsKE21pbl9j",
            "cmVhdGVfcmV2aXNpb24YDCABKAMSGwoTbWF4X2NyZWF0ZV9yZXZpc2lvbhgN",
            "IAEoAyIuCglTb3J0T3JkZXISCAoETk9ORRAAEgoKBkFTQ0VORBABEgsKB0RF",
            "U0NFTkQQAiJCCgpTb3J0VGFyZ2V0EgcKA0tFWRAAEgsKB1ZFUlNJT04QARIK",
            "CgZDUkVBVEUQAhIHCgNNT0QQAxIJCgVWQUxVRRAEInkKDVJhbmdlUmVzcG9u",
            "c2USLAoGaGVhZGVyGAEgASgLMhwuZXRjZHNlcnZlcnBiLlJlc3BvbnNlSGVh",
            "ZGVyEh0KA2t2cxgCIAMoCzIQLm12Y2NwYi5LZXlWYWx1ZRIMCgRtb3JlGAMg",
            "ASgIEg0KBWNvdW50GAQgASgDInQKClB1dFJlcXVlc3QSCwoDa2V5GAEgASgM",
            "Eg0KBXZhbHVlGAIgASgMEg0KBWxlYXNlGAMgASgDEg8KB3ByZXZfa3YYBCAB",
            "KAgSFAoMaWdub3JlX3ZhbHVlGAUgASgIEhQKDGlnbm9yZV9sZWFzZRgGIAEo",
            "CCJeCgtQdXRSZXNwb25zZRIsCgZoZWFkZXIYASABKAsyHC5ldGNkc2VydmVy",
            "cGIuUmVzcG9uc2VIZWFkZXISIQoHcHJldl9rdhgCIAEoCzIQLm12Y2NwYi5L",
            "ZXlWYWx1ZSJFChJEZWxldGVSYW5nZVJlcXVlc3QSCwoDa2V5GAEgASgMEhEK",
            "CXJhbmdlX2VuZBgCIAEoDBIPCgdwcmV2X2t2GAMgASgIIngKE0RlbGV0ZVJh",
            "bmdlUmVzcG9uc2USLAoGaGVhZGVyGAEgASgLMhwuZXRjZHNlcnZlcnBiLlJl",
            "c3BvbnNlSGVhZGVyEg8KB2RlbGV0ZWQYAiABKAMSIgoIcHJldl9rdnMYAyAD",
            "KAsyEC5tdmNjcGIuS2V5VmFsdWUi7wEKCVJlcXVlc3RPcBIzCg1yZXF1ZXN0",
            "X3JhbmdlGAEgASgLMhouZXRjZHNlcnZlcnBiLlJhbmdlUmVxdWVzdEgAEi8K",
            "C3JlcXVlc3RfcHV0GAIgASgLMhguZXRjZHNlcnZlcnBiLlB1dFJlcXVlc3RI",
            "ABJAChRyZXF1ZXN0X2RlbGV0ZV9yYW5nZRgDIAEoCzIgLmV0Y2RzZXJ2ZXJw",
            "Yi5EZWxldGVSYW5nZVJlcXVlc3RIABIvCgtyZXF1ZXN0X3R4bhgEIAEoCzIY",
            "LmV0Y2RzZXJ2ZXJwYi5UeG5SZXF1ZXN0SABCCQoHcmVxdWVzdCL5AQoKUmVz",
            "cG9uc2VPcBI1Cg5yZXNwb25zZV9yYW5nZRgBIAEoCzIbLmV0Y2RzZXJ2ZXJw",
            "Yi5SYW5nZVJlc3BvbnNlSAASMQoMcmVzcG9uc2VfcHV0GAIgASgLMhkuZXRj",
            "ZHNlcnZlcnBiLlB1dFJlc3BvbnNlSAASQgoVcmVzcG9uc2VfZGVsZXRlX3Jh",
            "bmdlGAMgASgLMiEuZXRjZHNlcnZlcnBiLkRlbGV0ZVJhbmdlUmVzcG9uc2VI",
            "ABIxCgxyZXNwb25zZV90eG4YBCABKAsyGS5ldGNkc2VydmVycGIuVHhuUmVz",
            "cG9uc2VIAEIKCghyZXNwb25zZSKWAwoHQ29tcGFyZRIzCgZyZXN1bHQYASAB",
            "KA4yIy5ldGNkc2VydmVycGIuQ29tcGFyZS5Db21wYXJlUmVzdWx0EjMKBnRh",
            "cmdldBgCIAEoDjIjLmV0Y2RzZXJ2ZXJwYi5Db21wYXJlLkNvbXBhcmVUYXJn",
            "ZXQSCwoDa2V5GAMgASgMEhEKB3ZlcnNpb24YBCABKANIABIZCg9jcmVhdGVf",
            "cmV2aXNpb24YBSABKANIABIWCgxtb2RfcmV2aXNpb24YBiABKANIABIPCgV2",
            "YWx1ZRgHIAEoDEgAEg8KBWxlYXNlGAggASgDSAASEQoJcmFuZ2VfZW5kGEAg",
            "ASgMIkAKDUNvbXBhcmVSZXN1bHQSCQoFRVFVQUwQABILCgdHUkVBVEVSEAES",
            "CAoETEVTUxACEg0KCU5PVF9FUVVBTBADIkcKDUNvbXBhcmVUYXJnZXQSCwoH",
            "VkVSU0lPThAAEgoKBkNSRUFURRABEgcKA01PRBACEgkKBVZBTFVFEAMSCQoF",
            "TEVBU0UQBEIOCgx0YXJnZXRfdW5pb24iiAEKClR4blJlcXVlc3QSJgoHY29t",
            "cGFyZRgBIAMoCzIVLmV0Y2RzZXJ2ZXJwYi5Db21wYXJlEigKB3N1Y2Nlc3MY",
            "AiADKAsyFy5ldGNkc2VydmVycGIuUmVxdWVzdE9wEigKB2ZhaWx1cmUYAyAD",
            "KAsyFy5ldGNkc2VydmVycGIuUmVxdWVzdE9wInsKC1R4blJlc3BvbnNlEiwK",
            "BmhlYWRlchgBIAEoCzIcLmV0Y2RzZXJ2ZXJwYi5SZXNwb25zZUhlYWRlchIR",
            "CglzdWNjZWVkZWQYAiABKAgSKwoJcmVzcG9uc2VzGAMgAygLMhguZXRjZHNl",
            "cnZlcnBiLlJlc3BvbnNlT3AiNwoRQ29tcGFjdGlvblJlcXVlc3QSEAoIcmV2",
            "aXNpb24YASABKAMSEAoIcGh5c2ljYWwYAiABKAgiQgoSQ29tcGFjdGlvblJl",
            "c3BvbnNlEiwKBmhlYWRlchgBIAEoCzIcLmV0Y2RzZXJ2ZXJwYi5SZXNwb25z",
            "ZUhlYWRlciINCgtIYXNoUmVxdWVzdCIhCg1IYXNoS1ZSZXF1ZXN0EhAKCHJl",
            "dmlzaW9uGAEgASgDImYKDkhhc2hLVlJlc3BvbnNlEiwKBmhlYWRlchgBIAEo",
            "CzIcLmV0Y2RzZXJ2ZXJwYi5SZXNwb25zZUhlYWRlchIMCgRoYXNoGAIgASgN",
            "EhgKEGNvbXBhY3RfcmV2aXNpb24YAyABKAMiSgoMSGFzaFJlc3BvbnNlEiwK",
            "BmhlYWRlchgBIAEoCzIcLmV0Y2RzZXJ2ZXJwYi5SZXNwb25zZUhlYWRlchIM",
            "CgRoYXNoGAIgASgNIhEKD1NuYXBzaG90UmVxdWVzdCJnChBTbmFwc2hvdFJl",
            "c3BvbnNlEiwKBmhlYWRlchgBIAEoCzIcLmV0Y2RzZXJ2ZXJwYi5SZXNwb25z",
            "ZUhlYWRlchIXCg9yZW1haW5pbmdfYnl0ZXMYAiABKAQSDAoEYmxvYhgDIAEo",
            "DCLXAQoMV2F0Y2hSZXF1ZXN0EjoKDmNyZWF0ZV9yZXF1ZXN0GAEgASgLMiAu",
            "ZXRjZHNlcnZlcnBiLldhdGNoQ3JlYXRlUmVxdWVzdEgAEjoKDmNhbmNlbF9y",
            "ZXF1ZXN0GAIgASgLMiAuZXRjZHNlcnZlcnBiLldhdGNoQ2FuY2VsUmVxdWVz",
            "dEgAEj4KEHByb2dyZXNzX3JlcXVlc3QYAyABKAsyIi5ldGNkc2VydmVycGIu",
            "V2F0Y2hQcm9ncmVzc1JlcXVlc3RIAEIPCg1yZXF1ZXN0X3VuaW9uIv8BChJX",
            "YXRjaENyZWF0ZVJlcXVlc3QSCwoDa2V5GAEgASgMEhEKCXJhbmdlX2VuZBgC",
            "IAEoDBIWCg5zdGFydF9yZXZpc2lvbhgDIAEoAxIXCg9wcm9ncmVzc19ub3Rp",
            "ZnkYBCABKAgSPAoHZmlsdGVycxgFIAMoDjIrLmV0Y2RzZXJ2ZXJwYi5XYXRj",
            "aENyZWF0ZVJlcXVlc3QuRmlsdGVyVHlwZRIPCgdwcmV2X2t2GAYgASgIEhAK",
            "CHdhdGNoX2lkGAcgASgDEhAKCGZyYWdtZW50GAggASgIIiUKCkZpbHRlclR5",
            "cGUSCQoFTk9QVVQQABIMCghOT0RFTEVURRABIiYKEldhdGNoQ2FuY2VsUmVx",
            "dWVzdBIQCgh3YXRjaF9pZBgBIAEoAyIWChRXYXRjaFByb2dyZXNzUmVxdWVz",
            "dCLUAQoNV2F0Y2hSZXNwb25zZRIsCgZoZWFkZXIYASABKAsyHC5ldGNkc2Vy",
            "dmVycGIuUmVzcG9uc2VIZWFkZXISEAoId2F0Y2hfaWQYAiABKAMSDwoHY3Jl",
            "YXRlZBgDIAEoCBIQCghjYW5jZWxlZBgEIAEoCBIYChBjb21wYWN0X3Jldmlz",
            "aW9uGAUgASgDEhUKDWNhbmNlbF9yZWFzb24YBiABKAkSEAoIZnJhZ21lbnQY",
            "ByABKAgSHQoGZXZlbnRzGAsgAygLMg0ubXZjY3BiLkV2ZW50IiwKEUxlYXNl",
            "R3JhbnRSZXF1ZXN0EgsKA1RUTBgBIAEoAxIKCgJJRBgCIAEoAyJqChJMZWFz",
            "ZUdyYW50UmVzcG9uc2USLAoGaGVhZGVyGAEgASgLMhwuZXRjZHNlcnZlcnBi",
            "LlJlc3BvbnNlSGVhZGVyEgoKAklEGAIgASgDEgsKA1RUTBgDIAEoAxINCgVl",
            "cnJvchgEIAEoCSIgChJMZWFzZVJldm9rZVJlcXVlc3QSCgoCSUQYASABKAMi",
            "QwoTTGVhc2VSZXZva2VSZXNwb25zZRIsCgZoZWFkZXIYASABKAsyHC5ldGNk",
            "c2VydmVycGIuUmVzcG9uc2VIZWFkZXIiNAoPTGVhc2VDaGVja3BvaW50EgoK",
            "AklEGAEgASgDEhUKDXJlbWFpbmluZ19UVEwYAiABKAMiTAoWTGVhc2VDaGVj",
            "a3BvaW50UmVxdWVzdBIyCgtjaGVja3BvaW50cxgBIAMoCzIdLmV0Y2RzZXJ2",
            "ZXJwYi5MZWFzZUNoZWNrcG9pbnQiRwoXTGVhc2VDaGVja3BvaW50UmVzcG9u",
            "c2USLAoGaGVhZGVyGAEgASgLMhwuZXRjZHNlcnZlcnBiLlJlc3BvbnNlSGVh",
            "ZGVyIiMKFUxlYXNlS2VlcEFsaXZlUmVxdWVzdBIKCgJJRBgBIAEoAyJfChZM",
            "ZWFzZUtlZXBBbGl2ZVJlc3BvbnNlEiwKBmhlYWRlchgBIAEoCzIcLmV0Y2Rz",
            "ZXJ2ZXJwYi5SZXNwb25zZUhlYWRlchIKCgJJRBgCIAEoAxILCgNUVEwYAyAB",
            "KAMiMgoWTGVhc2VUaW1lVG9MaXZlUmVxdWVzdBIKCgJJRBgBIAEoAxIMCgRr",
            "ZXlzGAIgASgIIoIBChdMZWFzZVRpbWVUb0xpdmVSZXNwb25zZRIsCgZoZWFk",
            "ZXIYASABKAsyHC5ldGNkc2VydmVycGIuUmVzcG9uc2VIZWFkZXISCgoCSUQY",
            "AiABKAMSCwoDVFRMGAMgASgDEhIKCmdyYW50ZWRUVEwYBCABKAMSDAoEa2V5",
            "cxgFIAMoDCIUChJMZWFzZUxlYXNlc1JlcXVlc3QiGQoLTGVhc2VTdGF0dXMS",
            "CgoCSUQYASABKAMibgoTTGVhc2VMZWFzZXNSZXNwb25zZRIsCgZoZWFkZXIY",
            "ASABKAsyHC5ldGNkc2VydmVycGIuUmVzcG9uc2VIZWFkZXISKQoGbGVhc2Vz",
            "GAIgAygLMhkuZXRjZHNlcnZlcnBiLkxlYXNlU3RhdHVzIlsKBk1lbWJlchIK",
            "CgJJRBgBIAEoBBIMCgRuYW1lGAIgASgJEhAKCHBlZXJVUkxzGAMgAygJEhIK",
            "CmNsaWVudFVSTHMYBCADKAkSEQoJaXNMZWFybmVyGAUgASgIIjcKEE1lbWJl",
            "ckFkZFJlcXVlc3QSEAoIcGVlclVSTHMYASADKAkSEQoJaXNMZWFybmVyGAIg",
            "ASgIIo4BChFNZW1iZXJBZGRSZXNwb25zZRIsCgZoZWFkZXIYASABKAsyHC5l",
            "dGNkc2VydmVycGIuUmVzcG9uc2VIZWFkZXISJAoGbWVtYmVyGAIgASgLMhQu",
            "ZXRjZHNlcnZlcnBiLk1lbWJlchIlCgdtZW1iZXJzGAMgAygLMhQuZXRjZHNl",
            "cnZlcnBiLk1lbWJlciIhChNNZW1iZXJSZW1vdmVSZXF1ZXN0EgoKAklEGAEg",
            "ASgEImsKFE1lbWJlclJlbW92ZVJlc3BvbnNlEiwKBmhlYWRlchgBIAEoCzIc",
            "LmV0Y2RzZXJ2ZXJwYi5SZXNwb25zZUhlYWRlchIlCgdtZW1iZXJzGAIgAygL",
            "MhQuZXRjZHNlcnZlcnBiLk1lbWJlciIzChNNZW1iZXJVcGRhdGVSZXF1ZXN0",
            "EgoKAklEGAEgASgEEhAKCHBlZXJVUkxzGAIgAygJImsKFE1lbWJlclVwZGF0",
            "ZVJlc3BvbnNlEiwKBmhlYWRlchgBIAEoCzIcLmV0Y2RzZXJ2ZXJwYi5SZXNw",
            "b25zZUhlYWRlchIlCgdtZW1iZXJzGAIgAygLMhQuZXRjZHNlcnZlcnBiLk1l",
            "bWJlciITChFNZW1iZXJMaXN0UmVxdWVzdCJpChJNZW1iZXJMaXN0UmVzcG9u",
            "c2USLAoGaGVhZGVyGAEgASgLMhwuZXRjZHNlcnZlcnBiLlJlc3BvbnNlSGVh",
            "ZGVyEiUKB21lbWJlcnMYAiADKAsyFC5ldGNkc2VydmVycGIuTWVtYmVyIiIK",
            "FE1lbWJlclByb21vdGVSZXF1ZXN0EgoKAklEGAEgASgEImwKFU1lbWJlclBy",
            "b21vdGVSZXNwb25zZRIsCgZoZWFkZXIYASABKAsyHC5ldGNkc2VydmVycGIu",
            "UmVzcG9uc2VIZWFkZXISJQoHbWVtYmVycxgCIAMoCzIULmV0Y2RzZXJ2ZXJw",
            "Yi5NZW1iZXIiEwoRRGVmcmFnbWVudFJlcXVlc3QiQgoSRGVmcmFnbWVudFJl",
            "c3BvbnNlEiwKBmhlYWRlchgBIAEoCzIcLmV0Y2RzZXJ2ZXJwYi5SZXNwb25z",
            "ZUhlYWRlciIlChFNb3ZlTGVhZGVyUmVxdWVzdBIQCgh0YXJnZXRJRBgBIAEo",
            "BCJCChJNb3ZlTGVhZGVyUmVzcG9uc2USLAoGaGVhZGVyGAEgASgLMhwuZXRj",
            "ZHNlcnZlcnBiLlJlc3BvbnNlSGVhZGVyIrYBCgxBbGFybVJlcXVlc3QSNgoG",
            "YWN0aW9uGAEgASgOMiYuZXRjZHNlcnZlcnBiLkFsYXJtUmVxdWVzdC5BbGFy",
            "bUFjdGlvbhIQCghtZW1iZXJJRBgCIAEoBBImCgVhbGFybRgDIAEoDjIXLmV0",
            "Y2RzZXJ2ZXJwYi5BbGFybVR5cGUiNAoLQWxhcm1BY3Rpb24SBwoDR0VUEAAS",
            "DAoIQUNUSVZBVEUQARIOCgpERUFDVElWQVRFEAIiRwoLQWxhcm1NZW1iZXIS",
            "EAoIbWVtYmVySUQYASABKAQSJgoFYWxhcm0YAiABKA4yFy5ldGNkc2VydmVy",
            "cGIuQWxhcm1UeXBlImgKDUFsYXJtUmVzcG9uc2USLAoGaGVhZGVyGAEgASgL",
            "MhwuZXRjZHNlcnZlcnBiLlJlc3BvbnNlSGVhZGVyEikKBmFsYXJtcxgCIAMo",
            "CzIZLmV0Y2RzZXJ2ZXJwYi5BbGFybU1lbWJlciIPCg1TdGF0dXNSZXF1ZXN0",
            "IuYBCg5TdGF0dXNSZXNwb25zZRIsCgZoZWFkZXIYASABKAsyHC5ldGNkc2Vy",
            "dmVycGIuUmVzcG9uc2VIZWFkZXISDwoHdmVyc2lvbhgCIAEoCRIOCgZkYlNp",
            "emUYAyABKAMSDgoGbGVhZGVyGAQgASgEEhEKCXJhZnRJbmRleBgFIAEoBBIQ",
            "CghyYWZ0VGVybRgGIAEoBBIYChByYWZ0QXBwbGllZEluZGV4GAcgASgEEg4K",
            "BmVycm9ycxgIIAMoCRITCgtkYlNpemVJblVzZRgJIAEoAxIRCglpc0xlYXJu",
            "ZXIYCiABKAgiEwoRQXV0aEVuYWJsZVJlcXVlc3QiFAoSQXV0aERpc2FibGVS",
            "ZXF1ZXN0IjUKE0F1dGhlbnRpY2F0ZVJlcXVlc3QSDAoEbmFtZRgBIAEoCRIQ",
            "CghwYXNzd29yZBgCIAEoCSJdChJBdXRoVXNlckFkZFJlcXVlc3QSDAoEbmFt",
            "ZRgBIAEoCRIQCghwYXNzd29yZBgCIAEoCRInCgdvcHRpb25zGAMgASgLMhYu",
            "YXV0aHBiLlVzZXJBZGRPcHRpb25zIiIKEkF1dGhVc2VyR2V0UmVxdWVzdBIM",
            "CgRuYW1lGAEgASgJIiUKFUF1dGhVc2VyRGVsZXRlUmVxdWVzdBIMCgRuYW1l",
            "GAEgASgJIj8KHUF1dGhVc2VyQ2hhbmdlUGFzc3dvcmRSZXF1ZXN0EgwKBG5h",
            "bWUYASABKAkSEAoIcGFzc3dvcmQYAiABKAkiNgoYQXV0aFVzZXJHcmFudFJv",
            "bGVSZXF1ZXN0EgwKBHVzZXIYASABKAkSDAoEcm9sZRgCIAEoCSI3ChlBdXRo",
            "VXNlclJldm9rZVJvbGVSZXF1ZXN0EgwKBG5hbWUYASABKAkSDAoEcm9sZRgC",
            "IAEoCSIiChJBdXRoUm9sZUFkZFJlcXVlc3QSDAoEbmFtZRgBIAEoCSIiChJB",
            "dXRoUm9sZUdldFJlcXVlc3QSDAoEcm9sZRgBIAEoCSIVChNBdXRoVXNlckxp",
            "c3RSZXF1ZXN0IhUKE0F1dGhSb2xlTGlzdFJlcXVlc3QiJQoVQXV0aFJvbGVE",
            "ZWxldGVSZXF1ZXN0EgwKBHJvbGUYASABKAkiUAoeQXV0aFJvbGVHcmFudFBl",
            "cm1pc3Npb25SZXF1ZXN0EgwKBG5hbWUYASABKAkSIAoEcGVybRgCIAEoCzIS",
            "LmF1dGhwYi5QZXJtaXNzaW9uIk8KH0F1dGhSb2xlUmV2b2tlUGVybWlzc2lv",
            "blJlcXVlc3QSDAoEcm9sZRgBIAEoCRILCgNrZXkYAiABKAwSEQoJcmFuZ2Vf",
            "ZW5kGAMgASgMIkIKEkF1dGhFbmFibGVSZXNwb25zZRIsCgZoZWFkZXIYASAB",
            "KAsyHC5ldGNkc2VydmVycGIuUmVzcG9uc2VIZWFkZXIiQwoTQXV0aERpc2Fi",
            "bGVSZXNwb25zZRIsCgZoZWFkZXIYASABKAsyHC5ldGNkc2VydmVycGIuUmVz",
            "cG9uc2VIZWFkZXIiUwoUQXV0aGVudGljYXRlUmVzcG9uc2USLAoGaGVhZGVy",
            "GAEgASgLMhwuZXRjZHNlcnZlcnBiLlJlc3BvbnNlSGVhZGVyEg0KBXRva2Vu",
            "GAIgASgJIkMKE0F1dGhVc2VyQWRkUmVzcG9uc2USLAoGaGVhZGVyGAEgASgL",
            "MhwuZXRjZHNlcnZlcnBiLlJlc3BvbnNlSGVhZGVyIlIKE0F1dGhVc2VyR2V0",
            "UmVzcG9uc2USLAoGaGVhZGVyGAEgASgLMhwuZXRjZHNlcnZlcnBiLlJlc3Bv",
            "bnNlSGVhZGVyEg0KBXJvbGVzGAIgAygJIkYKFkF1dGhVc2VyRGVsZXRlUmVz",
            "cG9uc2USLAoGaGVhZGVyGAEgASgLMhwuZXRjZHNlcnZlcnBiLlJlc3BvbnNl",
            "SGVhZGVyIk4KHkF1dGhVc2VyQ2hhbmdlUGFzc3dvcmRSZXNwb25zZRIsCgZo",
            "ZWFkZXIYASABKAsyHC5ldGNkc2VydmVycGIuUmVzcG9uc2VIZWFkZXIiSQoZ",
            "QXV0aFVzZXJHcmFudFJvbGVSZXNwb25zZRIsCgZoZWFkZXIYASABKAsyHC5l",
            "dGNkc2VydmVycGIuUmVzcG9uc2VIZWFkZXIiSgoaQXV0aFVzZXJSZXZva2VS",
            "b2xlUmVzcG9uc2USLAoGaGVhZGVyGAEgASgLMhwuZXRjZHNlcnZlcnBiLlJl",
            "c3BvbnNlSGVhZGVyIkMKE0F1dGhSb2xlQWRkUmVzcG9uc2USLAoGaGVhZGVy",
            "GAEgASgLMhwuZXRjZHNlcnZlcnBiLlJlc3BvbnNlSGVhZGVyImUKE0F1dGhS",
            "b2xlR2V0UmVzcG9uc2USLAoGaGVhZGVyGAEgASgLMhwuZXRjZHNlcnZlcnBi",
            "LlJlc3BvbnNlSGVhZGVyEiAKBHBlcm0YAiADKAsyEi5hdXRocGIuUGVybWlz",
            "c2lvbiJTChRBdXRoUm9sZUxpc3RSZXNwb25zZRIsCgZoZWFkZXIYASABKAsy",
            "HC5ldGNkc2VydmVycGIuUmVzcG9uc2VIZWFkZXISDQoFcm9sZXMYAiADKAki",
            "UwoUQXV0aFVzZXJMaXN0UmVzcG9uc2USLAoGaGVhZGVyGAEgASgLMhwuZXRj",
            "ZHNlcnZlcnBiLlJlc3BvbnNlSGVhZGVyEg0KBXVzZXJzGAIgAygJIkYKFkF1",
            "dGhSb2xlRGVsZXRlUmVzcG9uc2USLAoGaGVhZGVyGAEgASgLMhwuZXRjZHNl",
            "cnZlcnBiLlJlc3BvbnNlSGVhZGVyIk8KH0F1dGhSb2xlR3JhbnRQZXJtaXNz",
            "aW9uUmVzcG9uc2USLAoGaGVhZGVyGAEgASgLMhwuZXRjZHNlcnZlcnBiLlJl",
            "c3BvbnNlSGVhZGVyIlAKIEF1dGhSb2xlUmV2b2tlUGVybWlzc2lvblJlc3Bv",
            "bnNlEiwKBmhlYWRlchgBIAEoCzIcLmV0Y2RzZXJ2ZXJwYi5SZXNwb25zZUhl",
            "YWRlciovCglBbGFybVR5cGUSCAoETk9ORRAAEgsKB05PU1BBQ0UQARILCgdD",
            "T1JSVVBUEAIy5AMKAktWElkKBVJhbmdlEhouZXRjZHNlcnZlcnBiLlJhbmdl",
            "UmVxdWVzdBobLmV0Y2RzZXJ2ZXJwYi5SYW5nZVJlc3BvbnNlIheC0+STAhEi",
            "DC92My9rdi9yYW5nZToBKhJRCgNQdXQSGC5ldGNkc2VydmVycGIuUHV0UmVx",
            "dWVzdBoZLmV0Y2RzZXJ2ZXJwYi5QdXRSZXNwb25zZSIVgtPkkwIPIgovdjMv",
            "a3YvcHV0OgEqEnEKC0RlbGV0ZVJhbmdlEiAuZXRjZHNlcnZlcnBiLkRlbGV0",
            "ZVJhbmdlUmVxdWVzdBohLmV0Y2RzZXJ2ZXJwYi5EZWxldGVSYW5nZVJlc3Bv",
            "bnNlIh2C0+STAhciEi92My9rdi9kZWxldGVyYW5nZToBKhJRCgNUeG4SGC5l",
            "dGNkc2VydmVycGIuVHhuUmVxdWVzdBoZLmV0Y2RzZXJ2ZXJwYi5UeG5SZXNw",
            "b25zZSIVgtPkkwIPIgovdjMva3YvdHhuOgEqEmoKB0NvbXBhY3QSHy5ldGNk",
            "c2VydmVycGIuQ29tcGFjdGlvblJlcXVlc3QaIC5ldGNkc2VydmVycGIuQ29t",
            "cGFjdGlvblJlc3BvbnNlIhyC0+STAhYiES92My9rdi9jb21wYWN0aW9uOgEq",
            "MmMKBVdhdGNoEloKBVdhdGNoEhouZXRjZHNlcnZlcnBiLldhdGNoUmVxdWVz",
            "dBobLmV0Y2RzZXJ2ZXJwYi5XYXRjaFJlc3BvbnNlIhSC0+STAg4iCS92My93",
            "YXRjaDoBKigBMAEyrQUKBUxlYXNlEmsKCkxlYXNlR3JhbnQSHy5ldGNkc2Vy",
            "dmVycGIuTGVhc2VHcmFudFJlcXVlc3QaIC5ldGNkc2VydmVycGIuTGVhc2VH",
            "cmFudFJlc3BvbnNlIhqC0+STAhQiDy92My9sZWFzZS9ncmFudDoBKhKJAQoL",
            "TGVhc2VSZXZva2USIC5ldGNkc2VydmVycGIuTGVhc2VSZXZva2VSZXF1ZXN0",
            "GiEuZXRjZHNlcnZlcnBiLkxlYXNlUmV2b2tlUmVzcG9uc2UiNYLT5JMCLyIQ",
            "L3YzL2xlYXNlL3Jldm9rZToBKloYIhMvdjMva3YvbGVhc2UvcmV2b2tlOgEq",
            "En8KDkxlYXNlS2VlcEFsaXZlEiMuZXRjZHNlcnZlcnBiLkxlYXNlS2VlcEFs",
            "aXZlUmVxdWVzdBokLmV0Y2RzZXJ2ZXJwYi5MZWFzZUtlZXBBbGl2ZVJlc3Bv",
            "bnNlIh6C0+STAhgiEy92My9sZWFzZS9rZWVwYWxpdmU6ASooATABEp0BCg9M",
            "ZWFzZVRpbWVUb0xpdmUSJC5ldGNkc2VydmVycGIuTGVhc2VUaW1lVG9MaXZl",
            "UmVxdWVzdBolLmV0Y2RzZXJ2ZXJwYi5MZWFzZVRpbWVUb0xpdmVSZXNwb25z",
            "ZSI9gtPkkwI3IhQvdjMvbGVhc2UvdGltZXRvbGl2ZToBKlocIhcvdjMva3Yv",
            "bGVhc2UvdGltZXRvbGl2ZToBKhKJAQoLTGVhc2VMZWFzZXMSIC5ldGNkc2Vy",
            "dmVycGIuTGVhc2VMZWFzZXNSZXF1ZXN0GiEuZXRjZHNlcnZlcnBiLkxlYXNl",
            "TGVhc2VzUmVzcG9uc2UiNYLT5JMCLyIQL3YzL2xlYXNlL2xlYXNlczoBKloY",
            "IhMvdjMva3YvbGVhc2UvbGVhc2VzOgEqMuoECgdDbHVzdGVyEm8KCU1lbWJl",
            "ckFkZBIeLmV0Y2RzZXJ2ZXJwYi5NZW1iZXJBZGRSZXF1ZXN0Gh8uZXRjZHNl",
            "cnZlcnBiLk1lbWJlckFkZFJlc3BvbnNlIiGC0+STAhsiFi92My9jbHVzdGVy",
            "L21lbWJlci9hZGQ6ASoSewoMTWVtYmVyUmVtb3ZlEiEuZXRjZHNlcnZlcnBi",
            "Lk1lbWJlclJlbW92ZVJlcXVlc3QaIi5ldGNkc2VydmVycGIuTWVtYmVyUmVt",
            "b3ZlUmVzcG9uc2UiJILT5JMCHiIZL3YzL2NsdXN0ZXIvbWVtYmVyL3JlbW92",
            "ZToBKhJ7CgxNZW1iZXJVcGRhdGUSIS5ldGNkc2VydmVycGIuTWVtYmVyVXBk",
            "YXRlUmVxdWVzdBoiLmV0Y2RzZXJ2ZXJwYi5NZW1iZXJVcGRhdGVSZXNwb25z",
            "ZSIkgtPkkwIeIhkvdjMvY2x1c3Rlci9tZW1iZXIvdXBkYXRlOgEqEnMKCk1l",
            "bWJlckxpc3QSHy5ldGNkc2VydmVycGIuTWVtYmVyTGlzdFJlcXVlc3QaIC5l",
            "dGNkc2VydmVycGIuTWVtYmVyTGlzdFJlc3BvbnNlIiKC0+STAhwiFy92My9j",
            "bHVzdGVyL21lbWJlci9saXN0OgEqEn8KDU1lbWJlclByb21vdGUSIi5ldGNk",
            "c2VydmVycGIuTWVtYmVyUHJvbW90ZVJlcXVlc3QaIy5ldGNkc2VydmVycGIu",
            "TWVtYmVyUHJvbW90ZVJlc3BvbnNlIiWC0+STAh8iGi92My9jbHVzdGVyL21l",
            "bWJlci9wcm9tb3RlOgEqMooGCgtNYWludGVuYW5jZRJiCgVBbGFybRIaLmV0",
            "Y2RzZXJ2ZXJwYi5BbGFybVJlcXVlc3QaGy5ldGNkc2VydmVycGIuQWxhcm1S",
            "ZXNwb25zZSIggtPkkwIaIhUvdjMvbWFpbnRlbmFuY2UvYWxhcm06ASoSZgoG",
            "U3RhdHVzEhsuZXRjZHNlcnZlcnBiLlN0YXR1c1JlcXVlc3QaHC5ldGNkc2Vy",
            "dmVycGIuU3RhdHVzUmVzcG9uc2UiIYLT5JMCGyIWL3YzL21haW50ZW5hbmNl",
            "L3N0YXR1czoBKhJ2CgpEZWZyYWdtZW50Eh8uZXRjZHNlcnZlcnBiLkRlZnJh",
            "Z21lbnRSZXF1ZXN0GiAuZXRjZHNlcnZlcnBiLkRlZnJhZ21lbnRSZXNwb25z",
            "ZSIlgtPkkwIfIhovdjMvbWFpbnRlbmFuY2UvZGVmcmFnbWVudDoBKhJeCgRI",
            "YXNoEhkuZXRjZHNlcnZlcnBiLkhhc2hSZXF1ZXN0GhouZXRjZHNlcnZlcnBi",
            "Lkhhc2hSZXNwb25zZSIfgtPkkwIZIhQvdjMvbWFpbnRlbmFuY2UvaGFzaDoB",
            "KhJkCgZIYXNoS1YSGy5ldGNkc2VydmVycGIuSGFzaEtWUmVxdWVzdBocLmV0",
            "Y2RzZXJ2ZXJwYi5IYXNoS1ZSZXNwb25zZSIfgtPkkwIZIhQvdjMvbWFpbnRl",
            "bmFuY2UvaGFzaDoBKhJwCghTbmFwc2hvdBIdLmV0Y2RzZXJ2ZXJwYi5TbmFw",
            "c2hvdFJlcXVlc3QaHi5ldGNkc2VydmVycGIuU25hcHNob3RSZXNwb25zZSIj",
            "gtPkkwIdIhgvdjMvbWFpbnRlbmFuY2Uvc25hcHNob3Q6ASowARJ/CgpNb3Zl",
            "TGVhZGVyEh8uZXRjZHNlcnZlcnBiLk1vdmVMZWFkZXJSZXF1ZXN0GiAuZXRj",
            "ZHNlcnZlcnBiLk1vdmVMZWFkZXJSZXNwb25zZSIugtPkkwIoIiMvdjMvbWFp",
            "bnRlbmFuY2UvdHJhbnNmZXItbGVhZGVyc2hpcDoBKjK6DwoEQXV0aBJrCgpB",
            "dXRoRW5hYmxlEh8uZXRjZHNlcnZlcnBiLkF1dGhFbmFibGVSZXF1ZXN0GiAu",
            "ZXRjZHNlcnZlcnBiLkF1dGhFbmFibGVSZXNwb25zZSIagtPkkwIUIg8vdjMv",
            "YXV0aC9lbmFibGU6ASoSbwoLQXV0aERpc2FibGUSIC5ldGNkc2VydmVycGIu",
            "QXV0aERpc2FibGVSZXF1ZXN0GiEuZXRjZHNlcnZlcnBiLkF1dGhEaXNhYmxl",
            "UmVzcG9uc2UiG4LT5JMCFSIQL3YzL2F1dGgvZGlzYWJsZToBKhJ3CgxBdXRo",
            "ZW50aWNhdGUSIS5ldGNkc2VydmVycGIuQXV0aGVudGljYXRlUmVxdWVzdBoi",
            "LmV0Y2RzZXJ2ZXJwYi5BdXRoZW50aWNhdGVSZXNwb25zZSIggtPkkwIaIhUv",
            "djMvYXV0aC9hdXRoZW50aWNhdGU6ASoSbAoHVXNlckFkZBIgLmV0Y2RzZXJ2",
            "ZXJwYi5BdXRoVXNlckFkZFJlcXVlc3QaIS5ldGNkc2VydmVycGIuQXV0aFVz",
            "ZXJBZGRSZXNwb25zZSIcgtPkkwIWIhEvdjMvYXV0aC91c2VyL2FkZDoBKhJs",
            "CgdVc2VyR2V0EiAuZXRjZHNlcnZlcnBiLkF1dGhVc2VyR2V0UmVxdWVzdBoh",
            "LmV0Y2RzZXJ2ZXJwYi5BdXRoVXNlckdldFJlc3BvbnNlIhyC0+STAhYiES92",
            "My9hdXRoL3VzZXIvZ2V0OgEqEnAKCFVzZXJMaXN0EiEuZXRjZHNlcnZlcnBi",
            "LkF1dGhVc2VyTGlzdFJlcXVlc3QaIi5ldGNkc2VydmVycGIuQXV0aFVzZXJM",
            "aXN0UmVzcG9uc2UiHYLT5JMCFyISL3YzL2F1dGgvdXNlci9saXN0OgEqEngK",
            "ClVzZXJEZWxldGUSIy5ldGNkc2VydmVycGIuQXV0aFVzZXJEZWxldGVSZXF1",
            "ZXN0GiQuZXRjZHNlcnZlcnBiLkF1dGhVc2VyRGVsZXRlUmVzcG9uc2UiH4LT",
            "5JMCGSIUL3YzL2F1dGgvdXNlci9kZWxldGU6ASoSkgEKElVzZXJDaGFuZ2VQ",
            "YXNzd29yZBIrLmV0Y2RzZXJ2ZXJwYi5BdXRoVXNlckNoYW5nZVBhc3N3b3Jk",
            "UmVxdWVzdBosLmV0Y2RzZXJ2ZXJwYi5BdXRoVXNlckNoYW5nZVBhc3N3b3Jk",
            "UmVzcG9uc2UiIYLT5JMCGyIWL3YzL2F1dGgvdXNlci9jaGFuZ2VwdzoBKhKA",
            "AQoNVXNlckdyYW50Um9sZRImLmV0Y2RzZXJ2ZXJwYi5BdXRoVXNlckdyYW50",
            "Um9sZVJlcXVlc3QaJy5ldGNkc2VydmVycGIuQXV0aFVzZXJHcmFudFJvbGVS",
            "ZXNwb25zZSIegtPkkwIYIhMvdjMvYXV0aC91c2VyL2dyYW50OgEqEoQBCg5V",
            "c2VyUmV2b2tlUm9sZRInLmV0Y2RzZXJ2ZXJwYi5BdXRoVXNlclJldm9rZVJv",
            "bGVSZXF1ZXN0GiguZXRjZHNlcnZlcnBiLkF1dGhVc2VyUmV2b2tlUm9sZVJl",
            "c3BvbnNlIh+C0+STAhkiFC92My9hdXRoL3VzZXIvcmV2b2tlOgEqEmwKB1Jv",
            "bGVBZGQSIC5ldGNkc2VydmVycGIuQXV0aFJvbGVBZGRSZXF1ZXN0GiEuZXRj",
            "ZHNlcnZlcnBiLkF1dGhSb2xlQWRkUmVzcG9uc2UiHILT5JMCFiIRL3YzL2F1",
            "dGgvcm9sZS9hZGQ6ASoSbAoHUm9sZUdldBIgLmV0Y2RzZXJ2ZXJwYi5BdXRo",
            "Um9sZUdldFJlcXVlc3QaIS5ldGNkc2VydmVycGIuQXV0aFJvbGVHZXRSZXNw",
            "b25zZSIcgtPkkwIWIhEvdjMvYXV0aC9yb2xlL2dldDoBKhJwCghSb2xlTGlz",
            "dBIhLmV0Y2RzZXJ2ZXJwYi5BdXRoUm9sZUxpc3RSZXF1ZXN0GiIuZXRjZHNl",
            "cnZlcnBiLkF1dGhSb2xlTGlzdFJlc3BvbnNlIh2C0+STAhciEi92My9hdXRo",
            "L3JvbGUvbGlzdDoBKhJ4CgpSb2xlRGVsZXRlEiMuZXRjZHNlcnZlcnBiLkF1",
            "dGhSb2xlRGVsZXRlUmVxdWVzdBokLmV0Y2RzZXJ2ZXJwYi5BdXRoUm9sZURl",
            "bGV0ZVJlc3BvbnNlIh+C0+STAhkiFC92My9hdXRoL3JvbGUvZGVsZXRlOgEq",
            "EpIBChNSb2xlR3JhbnRQZXJtaXNzaW9uEiwuZXRjZHNlcnZlcnBiLkF1dGhS",
            "b2xlR3JhbnRQZXJtaXNzaW9uUmVxdWVzdBotLmV0Y2RzZXJ2ZXJwYi5BdXRo",
            "Um9sZUdyYW50UGVybWlzc2lvblJlc3BvbnNlIh6C0+STAhgiEy92My9hdXRo",
            "L3JvbGUvZ3JhbnQ6ASoSlgEKFFJvbGVSZXZva2VQZXJtaXNzaW9uEi0uZXRj",
            "ZHNlcnZlcnBiLkF1dGhSb2xlUmV2b2tlUGVybWlzc2lvblJlcXVlc3QaLi5l",
            "dGNkc2VydmVycGIuQXV0aFJvbGVSZXZva2VQZXJtaXNzaW9uUmVzcG9uc2Ui",
            "H4LT5JMCGSIUL3YzL2F1dGgvcm9sZS9yZXZva2U6ASpCCMjiHgHQ4h4BYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Gogoproto.GogoReflection.Descriptor, global::Mvccpb.KvReflection.Descriptor, global::Authpb.AuthReflection.Descriptor, global::Google.Api.GannotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Etcdserverpb.AlarmType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.ResponseHeader), global::Etcdserverpb.ResponseHeader.Parser, new[]{ "ClusterId", "MemberId", "Revision", "RaftTerm" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.RangeRequest), global::Etcdserverpb.RangeRequest.Parser, new[]{ "Key", "RangeEnd", "Limit", "Revision", "SortOrder", "SortTarget", "Serializable", "KeysOnly", "CountOnly", "MinModRevision", "MaxModRevision", "MinCreateRevision", "MaxCreateRevision" }, null, new[]{ typeof(global::Etcdserverpb.RangeRequest.Types.SortOrder), typeof(global::Etcdserverpb.RangeRequest.Types.SortTarget) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.RangeResponse), global::Etcdserverpb.RangeResponse.Parser, new[]{ "Header", "Kvs", "More", "Count" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.PutRequest), global::Etcdserverpb.PutRequest.Parser, new[]{ "Key", "Value", "Lease", "PrevKv", "IgnoreValue", "IgnoreLease" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.PutResponse), global::Etcdserverpb.PutResponse.Parser, new[]{ "Header", "PrevKv" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.DeleteRangeRequest), global::Etcdserverpb.DeleteRangeRequest.Parser, new[]{ "Key", "RangeEnd", "PrevKv" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.DeleteRangeResponse), global::Etcdserverpb.DeleteRangeResponse.Parser, new[]{ "Header", "Deleted", "PrevKvs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.RequestOp), global::Etcdserverpb.RequestOp.Parser, new[]{ "RequestRange", "RequestPut", "RequestDeleteRange", "RequestTxn" }, new[]{ "Request" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.ResponseOp), global::Etcdserverpb.ResponseOp.Parser, new[]{ "ResponseRange", "ResponsePut", "ResponseDeleteRange", "ResponseTxn" }, new[]{ "Response" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.Compare), global::Etcdserverpb.Compare.Parser, new[]{ "Result", "Target", "Key", "Version", "CreateRevision", "ModRevision", "Value", "Lease", "RangeEnd" }, new[]{ "TargetUnion" }, new[]{ typeof(global::Etcdserverpb.Compare.Types.CompareResult), typeof(global::Etcdserverpb.Compare.Types.CompareTarget) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.TxnRequest), global::Etcdserverpb.TxnRequest.Parser, new[]{ "Compare", "Success", "Failure" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.TxnResponse), global::Etcdserverpb.TxnResponse.Parser, new[]{ "Header", "Succeeded", "Responses" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.CompactionRequest), global::Etcdserverpb.CompactionRequest.Parser, new[]{ "Revision", "Physical" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.CompactionResponse), global::Etcdserverpb.CompactionResponse.Parser, new[]{ "Header" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.HashRequest), global::Etcdserverpb.HashRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.HashKVRequest), global::Etcdserverpb.HashKVRequest.Parser, new[]{ "Revision" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.HashKVResponse), global::Etcdserverpb.HashKVResponse.Parser, new[]{ "Header", "Hash", "CompactRevision" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.HashResponse), global::Etcdserverpb.HashResponse.Parser, new[]{ "Header", "Hash" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.SnapshotRequest), global::Etcdserverpb.SnapshotRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.SnapshotResponse), global::Etcdserverpb.SnapshotResponse.Parser, new[]{ "Header", "RemainingBytes", "Blob" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.WatchRequest), global::Etcdserverpb.WatchRequest.Parser, new[]{ "CreateRequest", "CancelRequest", "ProgressRequest" }, new[]{ "RequestUnion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.WatchCreateRequest), global::Etcdserverpb.WatchCreateRequest.Parser, new[]{ "Key", "RangeEnd", "StartRevision", "ProgressNotify", "Filters", "PrevKv", "WatchId", "Fragment" }, null, new[]{ typeof(global::Etcdserverpb.WatchCreateRequest.Types.FilterType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.WatchCancelRequest), global::Etcdserverpb.WatchCancelRequest.Parser, new[]{ "WatchId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.WatchProgressRequest), global::Etcdserverpb.WatchProgressRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.WatchResponse), global::Etcdserverpb.WatchResponse.Parser, new[]{ "Header", "WatchId", "Created", "Canceled", "CompactRevision", "CancelReason", "Fragment", "Events" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.LeaseGrantRequest), global::Etcdserverpb.LeaseGrantRequest.Parser, new[]{ "TTL", "ID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.LeaseGrantResponse), global::Etcdserverpb.LeaseGrantResponse.Parser, new[]{ "Header", "ID", "TTL", "Error" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.LeaseRevokeRequest), global::Etcdserverpb.LeaseRevokeRequest.Parser, new[]{ "ID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.LeaseRevokeResponse), global::Etcdserverpb.LeaseRevokeResponse.Parser, new[]{ "Header" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.LeaseCheckpoint), global::Etcdserverpb.LeaseCheckpoint.Parser, new[]{ "ID", "RemainingTTL" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.LeaseCheckpointRequest), global::Etcdserverpb.LeaseCheckpointRequest.Parser, new[]{ "Checkpoints" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.LeaseCheckpointResponse), global::Etcdserverpb.LeaseCheckpointResponse.Parser, new[]{ "Header" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.LeaseKeepAliveRequest), global::Etcdserverpb.LeaseKeepAliveRequest.Parser, new[]{ "ID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.LeaseKeepAliveResponse), global::Etcdserverpb.LeaseKeepAliveResponse.Parser, new[]{ "Header", "ID", "TTL" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.LeaseTimeToLiveRequest), global::Etcdserverpb.LeaseTimeToLiveRequest.Parser, new[]{ "ID", "Keys" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.LeaseTimeToLiveResponse), global::Etcdserverpb.LeaseTimeToLiveResponse.Parser, new[]{ "Header", "ID", "TTL", "GrantedTTL", "Keys" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.LeaseLeasesRequest), global::Etcdserverpb.LeaseLeasesRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.LeaseStatus), global::Etcdserverpb.LeaseStatus.Parser, new[]{ "ID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.LeaseLeasesResponse), global::Etcdserverpb.LeaseLeasesResponse.Parser, new[]{ "Header", "Leases" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.Member), global::Etcdserverpb.Member.Parser, new[]{ "ID", "Name", "PeerURLs", "ClientURLs", "IsLearner" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.MemberAddRequest), global::Etcdserverpb.MemberAddRequest.Parser, new[]{ "PeerURLs", "IsLearner" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.MemberAddResponse), global::Etcdserverpb.MemberAddResponse.Parser, new[]{ "Header", "Member", "Members" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.MemberRemoveRequest), global::Etcdserverpb.MemberRemoveRequest.Parser, new[]{ "ID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.MemberRemoveResponse), global::Etcdserverpb.MemberRemoveResponse.Parser, new[]{ "Header", "Members" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.MemberUpdateRequest), global::Etcdserverpb.MemberUpdateRequest.Parser, new[]{ "ID", "PeerURLs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.MemberUpdateResponse), global::Etcdserverpb.MemberUpdateResponse.Parser, new[]{ "Header", "Members" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.MemberListRequest), global::Etcdserverpb.MemberListRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.MemberListResponse), global::Etcdserverpb.MemberListResponse.Parser, new[]{ "Header", "Members" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.MemberPromoteRequest), global::Etcdserverpb.MemberPromoteRequest.Parser, new[]{ "ID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.MemberPromoteResponse), global::Etcdserverpb.MemberPromoteResponse.Parser, new[]{ "Header", "Members" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.DefragmentRequest), global::Etcdserverpb.DefragmentRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.DefragmentResponse), global::Etcdserverpb.DefragmentResponse.Parser, new[]{ "Header" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.MoveLeaderRequest), global::Etcdserverpb.MoveLeaderRequest.Parser, new[]{ "TargetID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.MoveLeaderResponse), global::Etcdserverpb.MoveLeaderResponse.Parser, new[]{ "Header" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.AlarmRequest), global::Etcdserverpb.AlarmRequest.Parser, new[]{ "Action", "MemberID", "Alarm" }, null, new[]{ typeof(global::Etcdserverpb.AlarmRequest.Types.AlarmAction) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.AlarmMember), global::Etcdserverpb.AlarmMember.Parser, new[]{ "MemberID", "Alarm" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.AlarmResponse), global::Etcdserverpb.AlarmResponse.Parser, new[]{ "Header", "Alarms" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.StatusRequest), global::Etcdserverpb.StatusRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.StatusResponse), global::Etcdserverpb.StatusResponse.Parser, new[]{ "Header", "Version", "DbSize", "Leader", "RaftIndex", "RaftTerm", "RaftAppliedIndex", "Errors", "DbSizeInUse", "IsLearner" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.AuthEnableRequest), global::Etcdserverpb.AuthEnableRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.AuthDisableRequest), global::Etcdserverpb.AuthDisableRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.AuthenticateRequest), global::Etcdserverpb.AuthenticateRequest.Parser, new[]{ "Name", "Password" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.AuthUserAddRequest), global::Etcdserverpb.AuthUserAddRequest.Parser, new[]{ "Name", "Password", "Options" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.AuthUserGetRequest), global::Etcdserverpb.AuthUserGetRequest.Parser, new[]{ "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.AuthUserDeleteRequest), global::Etcdserverpb.AuthUserDeleteRequest.Parser, new[]{ "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.AuthUserChangePasswordRequest), global::Etcdserverpb.AuthUserChangePasswordRequest.Parser, new[]{ "Name", "Password" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.AuthUserGrantRoleRequest), global::Etcdserverpb.AuthUserGrantRoleRequest.Parser, new[]{ "User", "Role" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.AuthUserRevokeRoleRequest), global::Etcdserverpb.AuthUserRevokeRoleRequest.Parser, new[]{ "Name", "Role" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.AuthRoleAddRequest), global::Etcdserverpb.AuthRoleAddRequest.Parser, new[]{ "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.AuthRoleGetRequest), global::Etcdserverpb.AuthRoleGetRequest.Parser, new[]{ "Role" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.AuthUserListRequest), global::Etcdserverpb.AuthUserListRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.AuthRoleListRequest), global::Etcdserverpb.AuthRoleListRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.AuthRoleDeleteRequest), global::Etcdserverpb.AuthRoleDeleteRequest.Parser, new[]{ "Role" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.AuthRoleGrantPermissionRequest), global::Etcdserverpb.AuthRoleGrantPermissionRequest.Parser, new[]{ "Name", "Perm" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.AuthRoleRevokePermissionRequest), global::Etcdserverpb.AuthRoleRevokePermissionRequest.Parser, new[]{ "Role", "Key", "RangeEnd" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.AuthEnableResponse), global::Etcdserverpb.AuthEnableResponse.Parser, new[]{ "Header" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.AuthDisableResponse), global::Etcdserverpb.AuthDisableResponse.Parser, new[]{ "Header" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.AuthenticateResponse), global::Etcdserverpb.AuthenticateResponse.Parser, new[]{ "Header", "Token" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.AuthUserAddResponse), global::Etcdserverpb.AuthUserAddResponse.Parser, new[]{ "Header" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.AuthUserGetResponse), global::Etcdserverpb.AuthUserGetResponse.Parser, new[]{ "Header", "Roles" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.AuthUserDeleteResponse), global::Etcdserverpb.AuthUserDeleteResponse.Parser, new[]{ "Header" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.AuthUserChangePasswordResponse), global::Etcdserverpb.AuthUserChangePasswordResponse.Parser, new[]{ "Header" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.AuthUserGrantRoleResponse), global::Etcdserverpb.AuthUserGrantRoleResponse.Parser, new[]{ "Header" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.AuthUserRevokeRoleResponse), global::Etcdserverpb.AuthUserRevokeRoleResponse.Parser, new[]{ "Header" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.AuthRoleAddResponse), global::Etcdserverpb.AuthRoleAddResponse.Parser, new[]{ "Header" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.AuthRoleGetResponse), global::Etcdserverpb.AuthRoleGetResponse.Parser, new[]{ "Header", "Perm" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.AuthRoleListResponse), global::Etcdserverpb.AuthRoleListResponse.Parser, new[]{ "Header", "Roles" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.AuthUserListResponse), global::Etcdserverpb.AuthUserListResponse.Parser, new[]{ "Header", "Users" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.AuthRoleDeleteResponse), global::Etcdserverpb.AuthRoleDeleteResponse.Parser, new[]{ "Header" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.AuthRoleGrantPermissionResponse), global::Etcdserverpb.AuthRoleGrantPermissionResponse.Parser, new[]{ "Header" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.AuthRoleRevokePermissionResponse), global::Etcdserverpb.AuthRoleRevokePermissionResponse.Parser, new[]{ "Header" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum AlarmType {
    /// <summary>
    /// default, used to query if any alarm is active
    /// </summary>
    [pbr::OriginalName("NONE")] None = 0,
    /// <summary>
    /// space quota is exhausted
    /// </summary>
    [pbr::OriginalName("NOSPACE")] Nospace = 1,
    /// <summary>
    /// kv store corruption detected
    /// </summary>
    [pbr::OriginalName("CORRUPT")] Corrupt = 2,
  }

  #endregion

  #region Messages
  public sealed partial class ResponseHeader : pb::IMessage<ResponseHeader> {
    private static readonly pb::MessageParser<ResponseHeader> _parser = new pb::MessageParser<ResponseHeader>(() => new ResponseHeader());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponseHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseHeader(ResponseHeader other) : this() {
      clusterId_ = other.clusterId_;
      memberId_ = other.memberId_;
      revision_ = other.revision_;
      raftTerm_ = other.raftTerm_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseHeader Clone() {
      return new ResponseHeader(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private ulong clusterId_;
    /// <summary>
    /// cluster_id is the ID of the cluster which sent the response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = value;
      }
    }

    /// <summary>Field number for the "member_id" field.</summary>
    public const int MemberIdFieldNumber = 2;
    private ulong memberId_;
    /// <summary>
    /// member_id is the ID of the member which sent the response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MemberId {
      get { return memberId_; }
      set {
        memberId_ = value;
      }
    }

    /// <summary>Field number for the "revision" field.</summary>
    public const int RevisionFieldNumber = 3;
    private long revision_;
    /// <summary>
    /// revision is the key-value store revision when the request was applied.
    /// For watch progress responses, the header.revision indicates progress. All future events
    /// recieved in this stream are guaranteed to have a higher revision number than the
    /// header.revision number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Revision {
      get { return revision_; }
      set {
        revision_ = value;
      }
    }

    /// <summary>Field number for the "raft_term" field.</summary>
    public const int RaftTermFieldNumber = 4;
    private ulong raftTerm_;
    /// <summary>
    /// raft_term is the raft term when the request was applied.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RaftTerm {
      get { return raftTerm_; }
      set {
        raftTerm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponseHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponseHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (MemberId != other.MemberId) return false;
      if (Revision != other.Revision) return false;
      if (RaftTerm != other.RaftTerm) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId != 0UL) hash ^= ClusterId.GetHashCode();
      if (MemberId != 0UL) hash ^= MemberId.GetHashCode();
      if (Revision != 0L) hash ^= Revision.GetHashCode();
      if (RaftTerm != 0UL) hash ^= RaftTerm.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ClusterId);
      }
      if (MemberId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(MemberId);
      }
      if (Revision != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Revision);
      }
      if (RaftTerm != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RaftTerm);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ClusterId);
      }
      if (MemberId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MemberId);
      }
      if (Revision != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Revision);
      }
      if (RaftTerm != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RaftTerm);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponseHeader other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId != 0UL) {
        ClusterId = other.ClusterId;
      }
      if (other.MemberId != 0UL) {
        MemberId = other.MemberId;
      }
      if (other.Revision != 0L) {
        Revision = other.Revision;
      }
      if (other.RaftTerm != 0UL) {
        RaftTerm = other.RaftTerm;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ClusterId = input.ReadUInt64();
            break;
          }
          case 16: {
            MemberId = input.ReadUInt64();
            break;
          }
          case 24: {
            Revision = input.ReadInt64();
            break;
          }
          case 32: {
            RaftTerm = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RangeRequest : pb::IMessage<RangeRequest> {
    private static readonly pb::MessageParser<RangeRequest> _parser = new pb::MessageParser<RangeRequest>(() => new RangeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RangeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeRequest(RangeRequest other) : this() {
      key_ = other.key_;
      rangeEnd_ = other.rangeEnd_;
      limit_ = other.limit_;
      revision_ = other.revision_;
      sortOrder_ = other.sortOrder_;
      sortTarget_ = other.sortTarget_;
      serializable_ = other.serializable_;
      keysOnly_ = other.keysOnly_;
      countOnly_ = other.countOnly_;
      minModRevision_ = other.minModRevision_;
      maxModRevision_ = other.maxModRevision_;
      minCreateRevision_ = other.minCreateRevision_;
      maxCreateRevision_ = other.maxCreateRevision_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeRequest Clone() {
      return new RangeRequest(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private pb::ByteString key_ = pb::ByteString.Empty;
    /// <summary>
    /// key is the first key for the range. If range_end is not given, the request only looks up key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "range_end" field.</summary>
    public const int RangeEndFieldNumber = 2;
    private pb::ByteString rangeEnd_ = pb::ByteString.Empty;
    /// <summary>
    /// range_end is the upper bound on the requested range [key, range_end).
    /// If range_end is '\0', the range is all keys >= key.
    /// If range_end is key plus one (e.g., "aa"+1 == "ab", "a\xff"+1 == "b"),
    /// then the range request gets all keys prefixed with key.
    /// If both key and range_end are '\0', then the range request returns all keys.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RangeEnd {
      get { return rangeEnd_; }
      set {
        rangeEnd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 3;
    private long limit_;
    /// <summary>
    /// limit is a limit on the number of keys returned for the request. When limit is set to 0,
    /// it is treated as no limit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "revision" field.</summary>
    public const int RevisionFieldNumber = 4;
    private long revision_;
    /// <summary>
    /// revision is the point-in-time of the key-value store to use for the range.
    /// If revision is less or equal to zero, the range is over the newest key-value store.
    /// If the revision has been compacted, ErrCompacted is returned as a response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Revision {
      get { return revision_; }
      set {
        revision_ = value;
      }
    }

    /// <summary>Field number for the "sort_order" field.</summary>
    public const int SortOrderFieldNumber = 5;
    private global::Etcdserverpb.RangeRequest.Types.SortOrder sortOrder_ = global::Etcdserverpb.RangeRequest.Types.SortOrder.None;
    /// <summary>
    /// sort_order is the order for returned sorted results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.RangeRequest.Types.SortOrder SortOrder {
      get { return sortOrder_; }
      set {
        sortOrder_ = value;
      }
    }

    /// <summary>Field number for the "sort_target" field.</summary>
    public const int SortTargetFieldNumber = 6;
    private global::Etcdserverpb.RangeRequest.Types.SortTarget sortTarget_ = global::Etcdserverpb.RangeRequest.Types.SortTarget.Key;
    /// <summary>
    /// sort_target is the key-value field to use for sorting.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.RangeRequest.Types.SortTarget SortTarget {
      get { return sortTarget_; }
      set {
        sortTarget_ = value;
      }
    }

    /// <summary>Field number for the "serializable" field.</summary>
    public const int SerializableFieldNumber = 7;
    private bool serializable_;
    /// <summary>
    /// serializable sets the range request to use serializable member-local reads.
    /// Range requests are linearizable by default; linearizable requests have higher
    /// latency and lower throughput than serializable requests but reflect the current
    /// consensus of the cluster. For better performance, in exchange for possible stale reads,
    /// a serializable range request is served locally without needing to reach consensus
    /// with other nodes in the cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Serializable {
      get { return serializable_; }
      set {
        serializable_ = value;
      }
    }

    /// <summary>Field number for the "keys_only" field.</summary>
    public const int KeysOnlyFieldNumber = 8;
    private bool keysOnly_;
    /// <summary>
    /// keys_only when set returns only the keys and not the values.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool KeysOnly {
      get { return keysOnly_; }
      set {
        keysOnly_ = value;
      }
    }

    /// <summary>Field number for the "count_only" field.</summary>
    public const int CountOnlyFieldNumber = 9;
    private bool countOnly_;
    /// <summary>
    /// count_only when set returns only the count of the keys in the range.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CountOnly {
      get { return countOnly_; }
      set {
        countOnly_ = value;
      }
    }

    /// <summary>Field number for the "min_mod_revision" field.</summary>
    public const int MinModRevisionFieldNumber = 10;
    private long minModRevision_;
    /// <summary>
    /// min_mod_revision is the lower bound for returned key mod revisions; all keys with
    /// lesser mod revisions will be filtered away.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinModRevision {
      get { return minModRevision_; }
      set {
        minModRevision_ = value;
      }
    }

    /// <summary>Field number for the "max_mod_revision" field.</summary>
    public const int MaxModRevisionFieldNumber = 11;
    private long maxModRevision_;
    /// <summary>
    /// max_mod_revision is the upper bound for returned key mod revisions; all keys with
    /// greater mod revisions will be filtered away.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxModRevision {
      get { return maxModRevision_; }
      set {
        maxModRevision_ = value;
      }
    }

    /// <summary>Field number for the "min_create_revision" field.</summary>
    public const int MinCreateRevisionFieldNumber = 12;
    private long minCreateRevision_;
    /// <summary>
    /// min_create_revision is the lower bound for returned key create revisions; all keys with
    /// lesser create revisions will be filtered away.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinCreateRevision {
      get { return minCreateRevision_; }
      set {
        minCreateRevision_ = value;
      }
    }

    /// <summary>Field number for the "max_create_revision" field.</summary>
    public const int MaxCreateRevisionFieldNumber = 13;
    private long maxCreateRevision_;
    /// <summary>
    /// max_create_revision is the upper bound for returned key create revisions; all keys with
    /// greater create revisions will be filtered away.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxCreateRevision {
      get { return maxCreateRevision_; }
      set {
        maxCreateRevision_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RangeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RangeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (RangeEnd != other.RangeEnd) return false;
      if (Limit != other.Limit) return false;
      if (Revision != other.Revision) return false;
      if (SortOrder != other.SortOrder) return false;
      if (SortTarget != other.SortTarget) return false;
      if (Serializable != other.Serializable) return false;
      if (KeysOnly != other.KeysOnly) return false;
      if (CountOnly != other.CountOnly) return false;
      if (MinModRevision != other.MinModRevision) return false;
      if (MaxModRevision != other.MaxModRevision) return false;
      if (MinCreateRevision != other.MinCreateRevision) return false;
      if (MaxCreateRevision != other.MaxCreateRevision) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (RangeEnd.Length != 0) hash ^= RangeEnd.GetHashCode();
      if (Limit != 0L) hash ^= Limit.GetHashCode();
      if (Revision != 0L) hash ^= Revision.GetHashCode();
      if (SortOrder != global::Etcdserverpb.RangeRequest.Types.SortOrder.None) hash ^= SortOrder.GetHashCode();
      if (SortTarget != global::Etcdserverpb.RangeRequest.Types.SortTarget.Key) hash ^= SortTarget.GetHashCode();
      if (Serializable != false) hash ^= Serializable.GetHashCode();
      if (KeysOnly != false) hash ^= KeysOnly.GetHashCode();
      if (CountOnly != false) hash ^= CountOnly.GetHashCode();
      if (MinModRevision != 0L) hash ^= MinModRevision.GetHashCode();
      if (MaxModRevision != 0L) hash ^= MaxModRevision.GetHashCode();
      if (MinCreateRevision != 0L) hash ^= MinCreateRevision.GetHashCode();
      if (MaxCreateRevision != 0L) hash ^= MaxCreateRevision.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Key);
      }
      if (RangeEnd.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RangeEnd);
      }
      if (Limit != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Limit);
      }
      if (Revision != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Revision);
      }
      if (SortOrder != global::Etcdserverpb.RangeRequest.Types.SortOrder.None) {
        output.WriteRawTag(40);
        output.WriteEnum((int) SortOrder);
      }
      if (SortTarget != global::Etcdserverpb.RangeRequest.Types.SortTarget.Key) {
        output.WriteRawTag(48);
        output.WriteEnum((int) SortTarget);
      }
      if (Serializable != false) {
        output.WriteRawTag(56);
        output.WriteBool(Serializable);
      }
      if (KeysOnly != false) {
        output.WriteRawTag(64);
        output.WriteBool(KeysOnly);
      }
      if (CountOnly != false) {
        output.WriteRawTag(72);
        output.WriteBool(CountOnly);
      }
      if (MinModRevision != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(MinModRevision);
      }
      if (MaxModRevision != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(MaxModRevision);
      }
      if (MinCreateRevision != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(MinCreateRevision);
      }
      if (MaxCreateRevision != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(MaxCreateRevision);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Key);
      }
      if (RangeEnd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RangeEnd);
      }
      if (Limit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Limit);
      }
      if (Revision != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Revision);
      }
      if (SortOrder != global::Etcdserverpb.RangeRequest.Types.SortOrder.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SortOrder);
      }
      if (SortTarget != global::Etcdserverpb.RangeRequest.Types.SortTarget.Key) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SortTarget);
      }
      if (Serializable != false) {
        size += 1 + 1;
      }
      if (KeysOnly != false) {
        size += 1 + 1;
      }
      if (CountOnly != false) {
        size += 1 + 1;
      }
      if (MinModRevision != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinModRevision);
      }
      if (MaxModRevision != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxModRevision);
      }
      if (MinCreateRevision != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinCreateRevision);
      }
      if (MaxCreateRevision != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxCreateRevision);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RangeRequest other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.RangeEnd.Length != 0) {
        RangeEnd = other.RangeEnd;
      }
      if (other.Limit != 0L) {
        Limit = other.Limit;
      }
      if (other.Revision != 0L) {
        Revision = other.Revision;
      }
      if (other.SortOrder != global::Etcdserverpb.RangeRequest.Types.SortOrder.None) {
        SortOrder = other.SortOrder;
      }
      if (other.SortTarget != global::Etcdserverpb.RangeRequest.Types.SortTarget.Key) {
        SortTarget = other.SortTarget;
      }
      if (other.Serializable != false) {
        Serializable = other.Serializable;
      }
      if (other.KeysOnly != false) {
        KeysOnly = other.KeysOnly;
      }
      if (other.CountOnly != false) {
        CountOnly = other.CountOnly;
      }
      if (other.MinModRevision != 0L) {
        MinModRevision = other.MinModRevision;
      }
      if (other.MaxModRevision != 0L) {
        MaxModRevision = other.MaxModRevision;
      }
      if (other.MinCreateRevision != 0L) {
        MinCreateRevision = other.MinCreateRevision;
      }
      if (other.MaxCreateRevision != 0L) {
        MaxCreateRevision = other.MaxCreateRevision;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadBytes();
            break;
          }
          case 18: {
            RangeEnd = input.ReadBytes();
            break;
          }
          case 24: {
            Limit = input.ReadInt64();
            break;
          }
          case 32: {
            Revision = input.ReadInt64();
            break;
          }
          case 40: {
            SortOrder = (global::Etcdserverpb.RangeRequest.Types.SortOrder) input.ReadEnum();
            break;
          }
          case 48: {
            SortTarget = (global::Etcdserverpb.RangeRequest.Types.SortTarget) input.ReadEnum();
            break;
          }
          case 56: {
            Serializable = input.ReadBool();
            break;
          }
          case 64: {
            KeysOnly = input.ReadBool();
            break;
          }
          case 72: {
            CountOnly = input.ReadBool();
            break;
          }
          case 80: {
            MinModRevision = input.ReadInt64();
            break;
          }
          case 88: {
            MaxModRevision = input.ReadInt64();
            break;
          }
          case 96: {
            MinCreateRevision = input.ReadInt64();
            break;
          }
          case 104: {
            MaxCreateRevision = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RangeRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum SortOrder {
        /// <summary>
        /// default, no sorting
        /// </summary>
        [pbr::OriginalName("NONE")] None = 0,
        /// <summary>
        /// lowest target value first
        /// </summary>
        [pbr::OriginalName("ASCEND")] Ascend = 1,
        /// <summary>
        /// highest target value first
        /// </summary>
        [pbr::OriginalName("DESCEND")] Descend = 2,
      }

      public enum SortTarget {
        [pbr::OriginalName("KEY")] Key = 0,
        [pbr::OriginalName("VERSION")] Version = 1,
        [pbr::OriginalName("CREATE")] Create = 2,
        [pbr::OriginalName("MOD")] Mod = 3,
        [pbr::OriginalName("VALUE")] Value = 4,
      }

    }
    #endregion

  }

  public sealed partial class RangeResponse : pb::IMessage<RangeResponse> {
    private static readonly pb::MessageParser<RangeResponse> _parser = new pb::MessageParser<RangeResponse>(() => new RangeResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RangeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeResponse(RangeResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      kvs_ = other.kvs_.Clone();
      more_ = other.more_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeResponse Clone() {
      return new RangeResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "kvs" field.</summary>
    public const int KvsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Mvccpb.KeyValue> _repeated_kvs_codec
        = pb::FieldCodec.ForMessage(18, global::Mvccpb.KeyValue.Parser);
    private readonly pbc::RepeatedField<global::Mvccpb.KeyValue> kvs_ = new pbc::RepeatedField<global::Mvccpb.KeyValue>();
    /// <summary>
    /// kvs is the list of key-value pairs matched by the range request.
    /// kvs is empty when count is requested.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Mvccpb.KeyValue> Kvs {
      get { return kvs_; }
    }

    /// <summary>Field number for the "more" field.</summary>
    public const int MoreFieldNumber = 3;
    private bool more_;
    /// <summary>
    /// more indicates if there are more keys to return in the requested range.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool More {
      get { return more_; }
      set {
        more_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 4;
    private long count_;
    /// <summary>
    /// count is set to the number of keys within the range when requested.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RangeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RangeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!kvs_.Equals(other.kvs_)) return false;
      if (More != other.More) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= kvs_.GetHashCode();
      if (More != false) hash ^= More.GetHashCode();
      if (Count != 0L) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      kvs_.WriteTo(output, _repeated_kvs_codec);
      if (More != false) {
        output.WriteRawTag(24);
        output.WriteBool(More);
      }
      if (Count != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += kvs_.CalculateSize(_repeated_kvs_codec);
      if (More != false) {
        size += 1 + 1;
      }
      if (Count != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RangeResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      kvs_.Add(other.kvs_);
      if (other.More != false) {
        More = other.More;
      }
      if (other.Count != 0L) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            kvs_.AddEntriesFrom(input, _repeated_kvs_codec);
            break;
          }
          case 24: {
            More = input.ReadBool();
            break;
          }
          case 32: {
            Count = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PutRequest : pb::IMessage<PutRequest> {
    private static readonly pb::MessageParser<PutRequest> _parser = new pb::MessageParser<PutRequest>(() => new PutRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PutRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutRequest(PutRequest other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      lease_ = other.lease_;
      prevKv_ = other.prevKv_;
      ignoreValue_ = other.ignoreValue_;
      ignoreLease_ = other.ignoreLease_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutRequest Clone() {
      return new PutRequest(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private pb::ByteString key_ = pb::ByteString.Empty;
    /// <summary>
    /// key is the key, in bytes, to put into the key-value store.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private pb::ByteString value_ = pb::ByteString.Empty;
    /// <summary>
    /// value is the value, in bytes, to associate with the key in the key-value store.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lease" field.</summary>
    public const int LeaseFieldNumber = 3;
    private long lease_;
    /// <summary>
    /// lease is the lease ID to associate with the key in the key-value store. A lease
    /// value of 0 indicates no lease.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Lease {
      get { return lease_; }
      set {
        lease_ = value;
      }
    }

    /// <summary>Field number for the "prev_kv" field.</summary>
    public const int PrevKvFieldNumber = 4;
    private bool prevKv_;
    /// <summary>
    /// If prev_kv is set, etcd gets the previous key-value pair before changing it.
    /// The previous key-value pair will be returned in the put response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PrevKv {
      get { return prevKv_; }
      set {
        prevKv_ = value;
      }
    }

    /// <summary>Field number for the "ignore_value" field.</summary>
    public const int IgnoreValueFieldNumber = 5;
    private bool ignoreValue_;
    /// <summary>
    /// If ignore_value is set, etcd updates the key using its current value.
    /// Returns an error if the key does not exist.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IgnoreValue {
      get { return ignoreValue_; }
      set {
        ignoreValue_ = value;
      }
    }

    /// <summary>Field number for the "ignore_lease" field.</summary>
    public const int IgnoreLeaseFieldNumber = 6;
    private bool ignoreLease_;
    /// <summary>
    /// If ignore_lease is set, etcd updates the key using its current lease.
    /// Returns an error if the key does not exist.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IgnoreLease {
      get { return ignoreLease_; }
      set {
        ignoreLease_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PutRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PutRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      if (Lease != other.Lease) return false;
      if (PrevKv != other.PrevKv) return false;
      if (IgnoreValue != other.IgnoreValue) return false;
      if (IgnoreLease != other.IgnoreLease) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (Lease != 0L) hash ^= Lease.GetHashCode();
      if (PrevKv != false) hash ^= PrevKv.GetHashCode();
      if (IgnoreValue != false) hash ^= IgnoreValue.GetHashCode();
      if (IgnoreLease != false) hash ^= IgnoreLease.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Value);
      }
      if (Lease != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Lease);
      }
      if (PrevKv != false) {
        output.WriteRawTag(32);
        output.WriteBool(PrevKv);
      }
      if (IgnoreValue != false) {
        output.WriteRawTag(40);
        output.WriteBool(IgnoreValue);
      }
      if (IgnoreLease != false) {
        output.WriteRawTag(48);
        output.WriteBool(IgnoreLease);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
      }
      if (Lease != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Lease);
      }
      if (PrevKv != false) {
        size += 1 + 1;
      }
      if (IgnoreValue != false) {
        size += 1 + 1;
      }
      if (IgnoreLease != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PutRequest other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.Lease != 0L) {
        Lease = other.Lease;
      }
      if (other.PrevKv != false) {
        PrevKv = other.PrevKv;
      }
      if (other.IgnoreValue != false) {
        IgnoreValue = other.IgnoreValue;
      }
      if (other.IgnoreLease != false) {
        IgnoreLease = other.IgnoreLease;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadBytes();
            break;
          }
          case 18: {
            Value = input.ReadBytes();
            break;
          }
          case 24: {
            Lease = input.ReadInt64();
            break;
          }
          case 32: {
            PrevKv = input.ReadBool();
            break;
          }
          case 40: {
            IgnoreValue = input.ReadBool();
            break;
          }
          case 48: {
            IgnoreLease = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PutResponse : pb::IMessage<PutResponse> {
    private static readonly pb::MessageParser<PutResponse> _parser = new pb::MessageParser<PutResponse>(() => new PutResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PutResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutResponse(PutResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      prevKv_ = other.prevKv_ != null ? other.prevKv_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutResponse Clone() {
      return new PutResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "prev_kv" field.</summary>
    public const int PrevKvFieldNumber = 2;
    private global::Mvccpb.KeyValue prevKv_;
    /// <summary>
    /// if prev_kv is set in the request, the previous key-value pair will be returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Mvccpb.KeyValue PrevKv {
      get { return prevKv_; }
      set {
        prevKv_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PutResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PutResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(PrevKv, other.PrevKv)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (prevKv_ != null) hash ^= PrevKv.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (prevKv_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PrevKv);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (prevKv_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrevKv);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PutResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.prevKv_ != null) {
        if (prevKv_ == null) {
          PrevKv = new global::Mvccpb.KeyValue();
        }
        PrevKv.MergeFrom(other.PrevKv);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (prevKv_ == null) {
              PrevKv = new global::Mvccpb.KeyValue();
            }
            input.ReadMessage(PrevKv);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteRangeRequest : pb::IMessage<DeleteRangeRequest> {
    private static readonly pb::MessageParser<DeleteRangeRequest> _parser = new pb::MessageParser<DeleteRangeRequest>(() => new DeleteRangeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteRangeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRangeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRangeRequest(DeleteRangeRequest other) : this() {
      key_ = other.key_;
      rangeEnd_ = other.rangeEnd_;
      prevKv_ = other.prevKv_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRangeRequest Clone() {
      return new DeleteRangeRequest(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private pb::ByteString key_ = pb::ByteString.Empty;
    /// <summary>
    /// key is the first key to delete in the range.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "range_end" field.</summary>
    public const int RangeEndFieldNumber = 2;
    private pb::ByteString rangeEnd_ = pb::ByteString.Empty;
    /// <summary>
    /// range_end is the key following the last key to delete for the range [key, range_end).
    /// If range_end is not given, the range is defined to contain only the key argument.
    /// If range_end is one bit larger than the given key, then the range is all the keys
    /// with the prefix (the given key).
    /// If range_end is '\0', the range is all keys greater than or equal to the key argument.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RangeEnd {
      get { return rangeEnd_; }
      set {
        rangeEnd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "prev_kv" field.</summary>
    public const int PrevKvFieldNumber = 3;
    private bool prevKv_;
    /// <summary>
    /// If prev_kv is set, etcd gets the previous key-value pairs before deleting it.
    /// The previous key-value pairs will be returned in the delete response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PrevKv {
      get { return prevKv_; }
      set {
        prevKv_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteRangeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteRangeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (RangeEnd != other.RangeEnd) return false;
      if (PrevKv != other.PrevKv) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (RangeEnd.Length != 0) hash ^= RangeEnd.GetHashCode();
      if (PrevKv != false) hash ^= PrevKv.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Key);
      }
      if (RangeEnd.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RangeEnd);
      }
      if (PrevKv != false) {
        output.WriteRawTag(24);
        output.WriteBool(PrevKv);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Key);
      }
      if (RangeEnd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RangeEnd);
      }
      if (PrevKv != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteRangeRequest other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.RangeEnd.Length != 0) {
        RangeEnd = other.RangeEnd;
      }
      if (other.PrevKv != false) {
        PrevKv = other.PrevKv;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadBytes();
            break;
          }
          case 18: {
            RangeEnd = input.ReadBytes();
            break;
          }
          case 24: {
            PrevKv = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteRangeResponse : pb::IMessage<DeleteRangeResponse> {
    private static readonly pb::MessageParser<DeleteRangeResponse> _parser = new pb::MessageParser<DeleteRangeResponse>(() => new DeleteRangeResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteRangeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRangeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRangeResponse(DeleteRangeResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      deleted_ = other.deleted_;
      prevKvs_ = other.prevKvs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRangeResponse Clone() {
      return new DeleteRangeResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "deleted" field.</summary>
    public const int DeletedFieldNumber = 2;
    private long deleted_;
    /// <summary>
    /// deleted is the number of keys deleted by the delete range request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Deleted {
      get { return deleted_; }
      set {
        deleted_ = value;
      }
    }

    /// <summary>Field number for the "prev_kvs" field.</summary>
    public const int PrevKvsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Mvccpb.KeyValue> _repeated_prevKvs_codec
        = pb::FieldCodec.ForMessage(26, global::Mvccpb.KeyValue.Parser);
    private readonly pbc::RepeatedField<global::Mvccpb.KeyValue> prevKvs_ = new pbc::RepeatedField<global::Mvccpb.KeyValue>();
    /// <summary>
    /// if prev_kv is set in the request, the previous key-value pairs will be returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Mvccpb.KeyValue> PrevKvs {
      get { return prevKvs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteRangeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteRangeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Deleted != other.Deleted) return false;
      if(!prevKvs_.Equals(other.prevKvs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Deleted != 0L) hash ^= Deleted.GetHashCode();
      hash ^= prevKvs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Deleted != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Deleted);
      }
      prevKvs_.WriteTo(output, _repeated_prevKvs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Deleted != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Deleted);
      }
      size += prevKvs_.CalculateSize(_repeated_prevKvs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteRangeResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Deleted != 0L) {
        Deleted = other.Deleted;
      }
      prevKvs_.Add(other.prevKvs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            Deleted = input.ReadInt64();
            break;
          }
          case 26: {
            prevKvs_.AddEntriesFrom(input, _repeated_prevKvs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RequestOp : pb::IMessage<RequestOp> {
    private static readonly pb::MessageParser<RequestOp> _parser = new pb::MessageParser<RequestOp>(() => new RequestOp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestOp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestOp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestOp(RequestOp other) : this() {
      switch (other.RequestCase) {
        case RequestOneofCase.RequestRange:
          RequestRange = other.RequestRange.Clone();
          break;
        case RequestOneofCase.RequestPut:
          RequestPut = other.RequestPut.Clone();
          break;
        case RequestOneofCase.RequestDeleteRange:
          RequestDeleteRange = other.RequestDeleteRange.Clone();
          break;
        case RequestOneofCase.RequestTxn:
          RequestTxn = other.RequestTxn.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestOp Clone() {
      return new RequestOp(this);
    }

    /// <summary>Field number for the "request_range" field.</summary>
    public const int RequestRangeFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.RangeRequest RequestRange {
      get { return requestCase_ == RequestOneofCase.RequestRange ? (global::Etcdserverpb.RangeRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.RequestRange;
      }
    }

    /// <summary>Field number for the "request_put" field.</summary>
    public const int RequestPutFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.PutRequest RequestPut {
      get { return requestCase_ == RequestOneofCase.RequestPut ? (global::Etcdserverpb.PutRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.RequestPut;
      }
    }

    /// <summary>Field number for the "request_delete_range" field.</summary>
    public const int RequestDeleteRangeFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.DeleteRangeRequest RequestDeleteRange {
      get { return requestCase_ == RequestOneofCase.RequestDeleteRange ? (global::Etcdserverpb.DeleteRangeRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.RequestDeleteRange;
      }
    }

    /// <summary>Field number for the "request_txn" field.</summary>
    public const int RequestTxnFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.TxnRequest RequestTxn {
      get { return requestCase_ == RequestOneofCase.RequestTxn ? (global::Etcdserverpb.TxnRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.RequestTxn;
      }
    }

    private object request_;
    /// <summary>Enum of possible cases for the "request" oneof.</summary>
    public enum RequestOneofCase {
      None = 0,
      RequestRange = 1,
      RequestPut = 2,
      RequestDeleteRange = 3,
      RequestTxn = 4,
    }
    private RequestOneofCase requestCase_ = RequestOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestOneofCase RequestCase {
      get { return requestCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequest() {
      requestCase_ = RequestOneofCase.None;
      request_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestOp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestOp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RequestRange, other.RequestRange)) return false;
      if (!object.Equals(RequestPut, other.RequestPut)) return false;
      if (!object.Equals(RequestDeleteRange, other.RequestDeleteRange)) return false;
      if (!object.Equals(RequestTxn, other.RequestTxn)) return false;
      if (RequestCase != other.RequestCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (requestCase_ == RequestOneofCase.RequestRange) hash ^= RequestRange.GetHashCode();
      if (requestCase_ == RequestOneofCase.RequestPut) hash ^= RequestPut.GetHashCode();
      if (requestCase_ == RequestOneofCase.RequestDeleteRange) hash ^= RequestDeleteRange.GetHashCode();
      if (requestCase_ == RequestOneofCase.RequestTxn) hash ^= RequestTxn.GetHashCode();
      hash ^= (int) requestCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (requestCase_ == RequestOneofCase.RequestRange) {
        output.WriteRawTag(10);
        output.WriteMessage(RequestRange);
      }
      if (requestCase_ == RequestOneofCase.RequestPut) {
        output.WriteRawTag(18);
        output.WriteMessage(RequestPut);
      }
      if (requestCase_ == RequestOneofCase.RequestDeleteRange) {
        output.WriteRawTag(26);
        output.WriteMessage(RequestDeleteRange);
      }
      if (requestCase_ == RequestOneofCase.RequestTxn) {
        output.WriteRawTag(34);
        output.WriteMessage(RequestTxn);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (requestCase_ == RequestOneofCase.RequestRange) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestRange);
      }
      if (requestCase_ == RequestOneofCase.RequestPut) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestPut);
      }
      if (requestCase_ == RequestOneofCase.RequestDeleteRange) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestDeleteRange);
      }
      if (requestCase_ == RequestOneofCase.RequestTxn) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestTxn);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestOp other) {
      if (other == null) {
        return;
      }
      switch (other.RequestCase) {
        case RequestOneofCase.RequestRange:
          if (RequestRange == null) {
            RequestRange = new global::Etcdserverpb.RangeRequest();
          }
          RequestRange.MergeFrom(other.RequestRange);
          break;
        case RequestOneofCase.RequestPut:
          if (RequestPut == null) {
            RequestPut = new global::Etcdserverpb.PutRequest();
          }
          RequestPut.MergeFrom(other.RequestPut);
          break;
        case RequestOneofCase.RequestDeleteRange:
          if (RequestDeleteRange == null) {
            RequestDeleteRange = new global::Etcdserverpb.DeleteRangeRequest();
          }
          RequestDeleteRange.MergeFrom(other.RequestDeleteRange);
          break;
        case RequestOneofCase.RequestTxn:
          if (RequestTxn == null) {
            RequestTxn = new global::Etcdserverpb.TxnRequest();
          }
          RequestTxn.MergeFrom(other.RequestTxn);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Etcdserverpb.RangeRequest subBuilder = new global::Etcdserverpb.RangeRequest();
            if (requestCase_ == RequestOneofCase.RequestRange) {
              subBuilder.MergeFrom(RequestRange);
            }
            input.ReadMessage(subBuilder);
            RequestRange = subBuilder;
            break;
          }
          case 18: {
            global::Etcdserverpb.PutRequest subBuilder = new global::Etcdserverpb.PutRequest();
            if (requestCase_ == RequestOneofCase.RequestPut) {
              subBuilder.MergeFrom(RequestPut);
            }
            input.ReadMessage(subBuilder);
            RequestPut = subBuilder;
            break;
          }
          case 26: {
            global::Etcdserverpb.DeleteRangeRequest subBuilder = new global::Etcdserverpb.DeleteRangeRequest();
            if (requestCase_ == RequestOneofCase.RequestDeleteRange) {
              subBuilder.MergeFrom(RequestDeleteRange);
            }
            input.ReadMessage(subBuilder);
            RequestDeleteRange = subBuilder;
            break;
          }
          case 34: {
            global::Etcdserverpb.TxnRequest subBuilder = new global::Etcdserverpb.TxnRequest();
            if (requestCase_ == RequestOneofCase.RequestTxn) {
              subBuilder.MergeFrom(RequestTxn);
            }
            input.ReadMessage(subBuilder);
            RequestTxn = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResponseOp : pb::IMessage<ResponseOp> {
    private static readonly pb::MessageParser<ResponseOp> _parser = new pb::MessageParser<ResponseOp>(() => new ResponseOp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponseOp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseOp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseOp(ResponseOp other) : this() {
      switch (other.ResponseCase) {
        case ResponseOneofCase.ResponseRange:
          ResponseRange = other.ResponseRange.Clone();
          break;
        case ResponseOneofCase.ResponsePut:
          ResponsePut = other.ResponsePut.Clone();
          break;
        case ResponseOneofCase.ResponseDeleteRange:
          ResponseDeleteRange = other.ResponseDeleteRange.Clone();
          break;
        case ResponseOneofCase.ResponseTxn:
          ResponseTxn = other.ResponseTxn.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseOp Clone() {
      return new ResponseOp(this);
    }

    /// <summary>Field number for the "response_range" field.</summary>
    public const int ResponseRangeFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.RangeResponse ResponseRange {
      get { return responseCase_ == ResponseOneofCase.ResponseRange ? (global::Etcdserverpb.RangeResponse) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.ResponseRange;
      }
    }

    /// <summary>Field number for the "response_put" field.</summary>
    public const int ResponsePutFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.PutResponse ResponsePut {
      get { return responseCase_ == ResponseOneofCase.ResponsePut ? (global::Etcdserverpb.PutResponse) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.ResponsePut;
      }
    }

    /// <summary>Field number for the "response_delete_range" field.</summary>
    public const int ResponseDeleteRangeFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.DeleteRangeResponse ResponseDeleteRange {
      get { return responseCase_ == ResponseOneofCase.ResponseDeleteRange ? (global::Etcdserverpb.DeleteRangeResponse) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.ResponseDeleteRange;
      }
    }

    /// <summary>Field number for the "response_txn" field.</summary>
    public const int ResponseTxnFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.TxnResponse ResponseTxn {
      get { return responseCase_ == ResponseOneofCase.ResponseTxn ? (global::Etcdserverpb.TxnResponse) response_ : null; }
      set {
        response_ = value;
        responseCase_ = value == null ? ResponseOneofCase.None : ResponseOneofCase.ResponseTxn;
      }
    }

    private object response_;
    /// <summary>Enum of possible cases for the "response" oneof.</summary>
    public enum ResponseOneofCase {
      None = 0,
      ResponseRange = 1,
      ResponsePut = 2,
      ResponseDeleteRange = 3,
      ResponseTxn = 4,
    }
    private ResponseOneofCase responseCase_ = ResponseOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseOneofCase ResponseCase {
      get { return responseCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      responseCase_ = ResponseOneofCase.None;
      response_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponseOp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponseOp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ResponseRange, other.ResponseRange)) return false;
      if (!object.Equals(ResponsePut, other.ResponsePut)) return false;
      if (!object.Equals(ResponseDeleteRange, other.ResponseDeleteRange)) return false;
      if (!object.Equals(ResponseTxn, other.ResponseTxn)) return false;
      if (ResponseCase != other.ResponseCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (responseCase_ == ResponseOneofCase.ResponseRange) hash ^= ResponseRange.GetHashCode();
      if (responseCase_ == ResponseOneofCase.ResponsePut) hash ^= ResponsePut.GetHashCode();
      if (responseCase_ == ResponseOneofCase.ResponseDeleteRange) hash ^= ResponseDeleteRange.GetHashCode();
      if (responseCase_ == ResponseOneofCase.ResponseTxn) hash ^= ResponseTxn.GetHashCode();
      hash ^= (int) responseCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (responseCase_ == ResponseOneofCase.ResponseRange) {
        output.WriteRawTag(10);
        output.WriteMessage(ResponseRange);
      }
      if (responseCase_ == ResponseOneofCase.ResponsePut) {
        output.WriteRawTag(18);
        output.WriteMessage(ResponsePut);
      }
      if (responseCase_ == ResponseOneofCase.ResponseDeleteRange) {
        output.WriteRawTag(26);
        output.WriteMessage(ResponseDeleteRange);
      }
      if (responseCase_ == ResponseOneofCase.ResponseTxn) {
        output.WriteRawTag(34);
        output.WriteMessage(ResponseTxn);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (responseCase_ == ResponseOneofCase.ResponseRange) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseRange);
      }
      if (responseCase_ == ResponseOneofCase.ResponsePut) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponsePut);
      }
      if (responseCase_ == ResponseOneofCase.ResponseDeleteRange) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseDeleteRange);
      }
      if (responseCase_ == ResponseOneofCase.ResponseTxn) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseTxn);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponseOp other) {
      if (other == null) {
        return;
      }
      switch (other.ResponseCase) {
        case ResponseOneofCase.ResponseRange:
          if (ResponseRange == null) {
            ResponseRange = new global::Etcdserverpb.RangeResponse();
          }
          ResponseRange.MergeFrom(other.ResponseRange);
          break;
        case ResponseOneofCase.ResponsePut:
          if (ResponsePut == null) {
            ResponsePut = new global::Etcdserverpb.PutResponse();
          }
          ResponsePut.MergeFrom(other.ResponsePut);
          break;
        case ResponseOneofCase.ResponseDeleteRange:
          if (ResponseDeleteRange == null) {
            ResponseDeleteRange = new global::Etcdserverpb.DeleteRangeResponse();
          }
          ResponseDeleteRange.MergeFrom(other.ResponseDeleteRange);
          break;
        case ResponseOneofCase.ResponseTxn:
          if (ResponseTxn == null) {
            ResponseTxn = new global::Etcdserverpb.TxnResponse();
          }
          ResponseTxn.MergeFrom(other.ResponseTxn);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Etcdserverpb.RangeResponse subBuilder = new global::Etcdserverpb.RangeResponse();
            if (responseCase_ == ResponseOneofCase.ResponseRange) {
              subBuilder.MergeFrom(ResponseRange);
            }
            input.ReadMessage(subBuilder);
            ResponseRange = subBuilder;
            break;
          }
          case 18: {
            global::Etcdserverpb.PutResponse subBuilder = new global::Etcdserverpb.PutResponse();
            if (responseCase_ == ResponseOneofCase.ResponsePut) {
              subBuilder.MergeFrom(ResponsePut);
            }
            input.ReadMessage(subBuilder);
            ResponsePut = subBuilder;
            break;
          }
          case 26: {
            global::Etcdserverpb.DeleteRangeResponse subBuilder = new global::Etcdserverpb.DeleteRangeResponse();
            if (responseCase_ == ResponseOneofCase.ResponseDeleteRange) {
              subBuilder.MergeFrom(ResponseDeleteRange);
            }
            input.ReadMessage(subBuilder);
            ResponseDeleteRange = subBuilder;
            break;
          }
          case 34: {
            global::Etcdserverpb.TxnResponse subBuilder = new global::Etcdserverpb.TxnResponse();
            if (responseCase_ == ResponseOneofCase.ResponseTxn) {
              subBuilder.MergeFrom(ResponseTxn);
            }
            input.ReadMessage(subBuilder);
            ResponseTxn = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class Compare : pb::IMessage<Compare> {
    private static readonly pb::MessageParser<Compare> _parser = new pb::MessageParser<Compare>(() => new Compare());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Compare> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Compare() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Compare(Compare other) : this() {
      result_ = other.result_;
      target_ = other.target_;
      key_ = other.key_;
      rangeEnd_ = other.rangeEnd_;
      switch (other.TargetUnionCase) {
        case TargetUnionOneofCase.Version:
          Version = other.Version;
          break;
        case TargetUnionOneofCase.CreateRevision:
          CreateRevision = other.CreateRevision;
          break;
        case TargetUnionOneofCase.ModRevision:
          ModRevision = other.ModRevision;
          break;
        case TargetUnionOneofCase.Value:
          Value = other.Value;
          break;
        case TargetUnionOneofCase.Lease:
          Lease = other.Lease;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Compare Clone() {
      return new Compare(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::Etcdserverpb.Compare.Types.CompareResult result_ = global::Etcdserverpb.Compare.Types.CompareResult.Equal;
    /// <summary>
    /// result is logical comparison operation for this comparison.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.Compare.Types.CompareResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 2;
    private global::Etcdserverpb.Compare.Types.CompareTarget target_ = global::Etcdserverpb.Compare.Types.CompareTarget.Version;
    /// <summary>
    /// target is the key-value field to inspect for the comparison.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.Compare.Types.CompareTarget Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 3;
    private pb::ByteString key_ = pb::ByteString.Empty;
    /// <summary>
    /// key is the subject key for the comparison operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 4;
    /// <summary>
    /// version is the version of the given key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Version {
      get { return targetUnionCase_ == TargetUnionOneofCase.Version ? (long) targetUnion_ : 0L; }
      set {
        targetUnion_ = value;
        targetUnionCase_ = TargetUnionOneofCase.Version;
      }
    }

    /// <summary>Field number for the "create_revision" field.</summary>
    public const int CreateRevisionFieldNumber = 5;
    /// <summary>
    /// create_revision is the creation revision of the given key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreateRevision {
      get { return targetUnionCase_ == TargetUnionOneofCase.CreateRevision ? (long) targetUnion_ : 0L; }
      set {
        targetUnion_ = value;
        targetUnionCase_ = TargetUnionOneofCase.CreateRevision;
      }
    }

    /// <summary>Field number for the "mod_revision" field.</summary>
    public const int ModRevisionFieldNumber = 6;
    /// <summary>
    /// mod_revision is the last modified revision of the given key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ModRevision {
      get { return targetUnionCase_ == TargetUnionOneofCase.ModRevision ? (long) targetUnion_ : 0L; }
      set {
        targetUnion_ = value;
        targetUnionCase_ = TargetUnionOneofCase.ModRevision;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 7;
    /// <summary>
    /// value is the value of the given key, in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Value {
      get { return targetUnionCase_ == TargetUnionOneofCase.Value ? (pb::ByteString) targetUnion_ : pb::ByteString.Empty; }
      set {
        targetUnion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        targetUnionCase_ = TargetUnionOneofCase.Value;
      }
    }

    /// <summary>Field number for the "lease" field.</summary>
    public const int LeaseFieldNumber = 8;
    /// <summary>
    /// lease is the lease id of the given key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Lease {
      get { return targetUnionCase_ == TargetUnionOneofCase.Lease ? (long) targetUnion_ : 0L; }
      set {
        targetUnion_ = value;
        targetUnionCase_ = TargetUnionOneofCase.Lease;
      }
    }

    /// <summary>Field number for the "range_end" field.</summary>
    public const int RangeEndFieldNumber = 64;
    private pb::ByteString rangeEnd_ = pb::ByteString.Empty;
    /// <summary>
    /// range_end compares the given target to all keys in the range [key, range_end).
    /// See RangeRequest for more details on key ranges.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RangeEnd {
      get { return rangeEnd_; }
      set {
        rangeEnd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object targetUnion_;
    /// <summary>Enum of possible cases for the "target_union" oneof.</summary>
    public enum TargetUnionOneofCase {
      None = 0,
      Version = 4,
      CreateRevision = 5,
      ModRevision = 6,
      Value = 7,
      Lease = 8,
    }
    private TargetUnionOneofCase targetUnionCase_ = TargetUnionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetUnionOneofCase TargetUnionCase {
      get { return targetUnionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetUnion() {
      targetUnionCase_ = TargetUnionOneofCase.None;
      targetUnion_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Compare);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Compare other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (Target != other.Target) return false;
      if (Key != other.Key) return false;
      if (Version != other.Version) return false;
      if (CreateRevision != other.CreateRevision) return false;
      if (ModRevision != other.ModRevision) return false;
      if (Value != other.Value) return false;
      if (Lease != other.Lease) return false;
      if (RangeEnd != other.RangeEnd) return false;
      if (TargetUnionCase != other.TargetUnionCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != global::Etcdserverpb.Compare.Types.CompareResult.Equal) hash ^= Result.GetHashCode();
      if (Target != global::Etcdserverpb.Compare.Types.CompareTarget.Version) hash ^= Target.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (targetUnionCase_ == TargetUnionOneofCase.Version) hash ^= Version.GetHashCode();
      if (targetUnionCase_ == TargetUnionOneofCase.CreateRevision) hash ^= CreateRevision.GetHashCode();
      if (targetUnionCase_ == TargetUnionOneofCase.ModRevision) hash ^= ModRevision.GetHashCode();
      if (targetUnionCase_ == TargetUnionOneofCase.Value) hash ^= Value.GetHashCode();
      if (targetUnionCase_ == TargetUnionOneofCase.Lease) hash ^= Lease.GetHashCode();
      if (RangeEnd.Length != 0) hash ^= RangeEnd.GetHashCode();
      hash ^= (int) targetUnionCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != global::Etcdserverpb.Compare.Types.CompareResult.Equal) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (Target != global::Etcdserverpb.Compare.Types.CompareTarget.Version) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Target);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Key);
      }
      if (targetUnionCase_ == TargetUnionOneofCase.Version) {
        output.WriteRawTag(32);
        output.WriteInt64(Version);
      }
      if (targetUnionCase_ == TargetUnionOneofCase.CreateRevision) {
        output.WriteRawTag(40);
        output.WriteInt64(CreateRevision);
      }
      if (targetUnionCase_ == TargetUnionOneofCase.ModRevision) {
        output.WriteRawTag(48);
        output.WriteInt64(ModRevision);
      }
      if (targetUnionCase_ == TargetUnionOneofCase.Value) {
        output.WriteRawTag(58);
        output.WriteBytes(Value);
      }
      if (targetUnionCase_ == TargetUnionOneofCase.Lease) {
        output.WriteRawTag(64);
        output.WriteInt64(Lease);
      }
      if (RangeEnd.Length != 0) {
        output.WriteRawTag(130, 4);
        output.WriteBytes(RangeEnd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != global::Etcdserverpb.Compare.Types.CompareResult.Equal) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (Target != global::Etcdserverpb.Compare.Types.CompareTarget.Version) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Target);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Key);
      }
      if (targetUnionCase_ == TargetUnionOneofCase.Version) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Version);
      }
      if (targetUnionCase_ == TargetUnionOneofCase.CreateRevision) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateRevision);
      }
      if (targetUnionCase_ == TargetUnionOneofCase.ModRevision) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ModRevision);
      }
      if (targetUnionCase_ == TargetUnionOneofCase.Value) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
      }
      if (targetUnionCase_ == TargetUnionOneofCase.Lease) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Lease);
      }
      if (RangeEnd.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(RangeEnd);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Compare other) {
      if (other == null) {
        return;
      }
      if (other.Result != global::Etcdserverpb.Compare.Types.CompareResult.Equal) {
        Result = other.Result;
      }
      if (other.Target != global::Etcdserverpb.Compare.Types.CompareTarget.Version) {
        Target = other.Target;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.RangeEnd.Length != 0) {
        RangeEnd = other.RangeEnd;
      }
      switch (other.TargetUnionCase) {
        case TargetUnionOneofCase.Version:
          Version = other.Version;
          break;
        case TargetUnionOneofCase.CreateRevision:
          CreateRevision = other.CreateRevision;
          break;
        case TargetUnionOneofCase.ModRevision:
          ModRevision = other.ModRevision;
          break;
        case TargetUnionOneofCase.Value:
          Value = other.Value;
          break;
        case TargetUnionOneofCase.Lease:
          Lease = other.Lease;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = (global::Etcdserverpb.Compare.Types.CompareResult) input.ReadEnum();
            break;
          }
          case 16: {
            Target = (global::Etcdserverpb.Compare.Types.CompareTarget) input.ReadEnum();
            break;
          }
          case 26: {
            Key = input.ReadBytes();
            break;
          }
          case 32: {
            Version = input.ReadInt64();
            break;
          }
          case 40: {
            CreateRevision = input.ReadInt64();
            break;
          }
          case 48: {
            ModRevision = input.ReadInt64();
            break;
          }
          case 58: {
            Value = input.ReadBytes();
            break;
          }
          case 64: {
            Lease = input.ReadInt64();
            break;
          }
          case 514: {
            RangeEnd = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Compare message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CompareResult {
        [pbr::OriginalName("EQUAL")] Equal = 0,
        [pbr::OriginalName("GREATER")] Greater = 1,
        [pbr::OriginalName("LESS")] Less = 2,
        [pbr::OriginalName("NOT_EQUAL")] NotEqual = 3,
      }

      public enum CompareTarget {
        [pbr::OriginalName("VERSION")] Version = 0,
        [pbr::OriginalName("CREATE")] Create = 1,
        [pbr::OriginalName("MOD")] Mod = 2,
        [pbr::OriginalName("VALUE")] Value = 3,
        [pbr::OriginalName("LEASE")] Lease = 4,
      }

    }
    #endregion

  }

  /// <summary>
  /// From google paxosdb paper:
  /// Our implementation hinges around a powerful primitive which we call MultiOp. All other database
  /// operations except for iteration are implemented as a single call to MultiOp. A MultiOp is applied atomically
  /// and consists of three components:
  /// 1. A list of tests called guard. Each test in guard checks a single entry in the database. It may check
  /// for the absence or presence of a value, or compare with a given value. Two different tests in the guard
  /// may apply to the same or different entries in the database. All tests in the guard are applied and
  /// MultiOp returns the results. If all tests are true, MultiOp executes t op (see item 2 below), otherwise
  /// it executes f op (see item 3 below).
  /// 2. A list of database operations called t op. Each operation in the list is either an insert, delete, or
  /// lookup operation, and applies to a single database entry. Two different operations in the list may apply
  /// to the same or different entries in the database. These operations are executed
  /// if guard evaluates to
  /// true.
  /// 3. A list of database operations called f op. Like t op, but executed if guard evaluates to false.
  /// </summary>
  public sealed partial class TxnRequest : pb::IMessage<TxnRequest> {
    private static readonly pb::MessageParser<TxnRequest> _parser = new pb::MessageParser<TxnRequest>(() => new TxnRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TxnRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TxnRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TxnRequest(TxnRequest other) : this() {
      compare_ = other.compare_.Clone();
      success_ = other.success_.Clone();
      failure_ = other.failure_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TxnRequest Clone() {
      return new TxnRequest(this);
    }

    /// <summary>Field number for the "compare" field.</summary>
    public const int CompareFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Etcdserverpb.Compare> _repeated_compare_codec
        = pb::FieldCodec.ForMessage(10, global::Etcdserverpb.Compare.Parser);
    private readonly pbc::RepeatedField<global::Etcdserverpb.Compare> compare_ = new pbc::RepeatedField<global::Etcdserverpb.Compare>();
    /// <summary>
    /// compare is a list of predicates representing a conjunction of terms.
    /// If the comparisons succeed, then the success requests will be processed in order,
    /// and the response will contain their respective responses in order.
    /// If the comparisons fail, then the failure requests will be processed in order,
    /// and the response will contain their respective responses in order.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Etcdserverpb.Compare> Compare {
      get { return compare_; }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Etcdserverpb.RequestOp> _repeated_success_codec
        = pb::FieldCodec.ForMessage(18, global::Etcdserverpb.RequestOp.Parser);
    private readonly pbc::RepeatedField<global::Etcdserverpb.RequestOp> success_ = new pbc::RepeatedField<global::Etcdserverpb.RequestOp>();
    /// <summary>
    /// success is a list of requests which will be applied when compare evaluates to true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Etcdserverpb.RequestOp> Success {
      get { return success_; }
    }

    /// <summary>Field number for the "failure" field.</summary>
    public const int FailureFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Etcdserverpb.RequestOp> _repeated_failure_codec
        = pb::FieldCodec.ForMessage(26, global::Etcdserverpb.RequestOp.Parser);
    private readonly pbc::RepeatedField<global::Etcdserverpb.RequestOp> failure_ = new pbc::RepeatedField<global::Etcdserverpb.RequestOp>();
    /// <summary>
    /// failure is a list of requests which will be applied when compare evaluates to false.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Etcdserverpb.RequestOp> Failure {
      get { return failure_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TxnRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TxnRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!compare_.Equals(other.compare_)) return false;
      if(!success_.Equals(other.success_)) return false;
      if(!failure_.Equals(other.failure_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= compare_.GetHashCode();
      hash ^= success_.GetHashCode();
      hash ^= failure_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      compare_.WriteTo(output, _repeated_compare_codec);
      success_.WriteTo(output, _repeated_success_codec);
      failure_.WriteTo(output, _repeated_failure_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += compare_.CalculateSize(_repeated_compare_codec);
      size += success_.CalculateSize(_repeated_success_codec);
      size += failure_.CalculateSize(_repeated_failure_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TxnRequest other) {
      if (other == null) {
        return;
      }
      compare_.Add(other.compare_);
      success_.Add(other.success_);
      failure_.Add(other.failure_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            compare_.AddEntriesFrom(input, _repeated_compare_codec);
            break;
          }
          case 18: {
            success_.AddEntriesFrom(input, _repeated_success_codec);
            break;
          }
          case 26: {
            failure_.AddEntriesFrom(input, _repeated_failure_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TxnResponse : pb::IMessage<TxnResponse> {
    private static readonly pb::MessageParser<TxnResponse> _parser = new pb::MessageParser<TxnResponse>(() => new TxnResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TxnResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TxnResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TxnResponse(TxnResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      succeeded_ = other.succeeded_;
      responses_ = other.responses_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TxnResponse Clone() {
      return new TxnResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "succeeded" field.</summary>
    public const int SucceededFieldNumber = 2;
    private bool succeeded_;
    /// <summary>
    /// succeeded is set to true if the compare evaluated to true or false otherwise.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Succeeded {
      get { return succeeded_; }
      set {
        succeeded_ = value;
      }
    }

    /// <summary>Field number for the "responses" field.</summary>
    public const int ResponsesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Etcdserverpb.ResponseOp> _repeated_responses_codec
        = pb::FieldCodec.ForMessage(26, global::Etcdserverpb.ResponseOp.Parser);
    private readonly pbc::RepeatedField<global::Etcdserverpb.ResponseOp> responses_ = new pbc::RepeatedField<global::Etcdserverpb.ResponseOp>();
    /// <summary>
    /// responses is a list of responses corresponding to the results from applying
    /// success if succeeded is true or failure if succeeded is false.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Etcdserverpb.ResponseOp> Responses {
      get { return responses_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TxnResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TxnResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Succeeded != other.Succeeded) return false;
      if(!responses_.Equals(other.responses_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Succeeded != false) hash ^= Succeeded.GetHashCode();
      hash ^= responses_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Succeeded != false) {
        output.WriteRawTag(16);
        output.WriteBool(Succeeded);
      }
      responses_.WriteTo(output, _repeated_responses_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Succeeded != false) {
        size += 1 + 1;
      }
      size += responses_.CalculateSize(_repeated_responses_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TxnResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Succeeded != false) {
        Succeeded = other.Succeeded;
      }
      responses_.Add(other.responses_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            Succeeded = input.ReadBool();
            break;
          }
          case 26: {
            responses_.AddEntriesFrom(input, _repeated_responses_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CompactionRequest compacts the key-value store up to a given revision. All superseded keys
  /// with a revision less than the compaction revision will be removed.
  /// </summary>
  public sealed partial class CompactionRequest : pb::IMessage<CompactionRequest> {
    private static readonly pb::MessageParser<CompactionRequest> _parser = new pb::MessageParser<CompactionRequest>(() => new CompactionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CompactionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompactionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompactionRequest(CompactionRequest other) : this() {
      revision_ = other.revision_;
      physical_ = other.physical_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompactionRequest Clone() {
      return new CompactionRequest(this);
    }

    /// <summary>Field number for the "revision" field.</summary>
    public const int RevisionFieldNumber = 1;
    private long revision_;
    /// <summary>
    /// revision is the key-value store revision for the compaction operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Revision {
      get { return revision_; }
      set {
        revision_ = value;
      }
    }

    /// <summary>Field number for the "physical" field.</summary>
    public const int PhysicalFieldNumber = 2;
    private bool physical_;
    /// <summary>
    /// physical is set so the RPC will wait until the compaction is physically
    /// applied to the local database such that compacted entries are totally
    /// removed from the backend database.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Physical {
      get { return physical_; }
      set {
        physical_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CompactionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CompactionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Revision != other.Revision) return false;
      if (Physical != other.Physical) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Revision != 0L) hash ^= Revision.GetHashCode();
      if (Physical != false) hash ^= Physical.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Revision != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Revision);
      }
      if (Physical != false) {
        output.WriteRawTag(16);
        output.WriteBool(Physical);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Revision != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Revision);
      }
      if (Physical != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CompactionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Revision != 0L) {
        Revision = other.Revision;
      }
      if (other.Physical != false) {
        Physical = other.Physical;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Revision = input.ReadInt64();
            break;
          }
          case 16: {
            Physical = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CompactionResponse : pb::IMessage<CompactionResponse> {
    private static readonly pb::MessageParser<CompactionResponse> _parser = new pb::MessageParser<CompactionResponse>(() => new CompactionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CompactionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompactionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompactionResponse(CompactionResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompactionResponse Clone() {
      return new CompactionResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CompactionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CompactionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CompactionResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HashRequest : pb::IMessage<HashRequest> {
    private static readonly pb::MessageParser<HashRequest> _parser = new pb::MessageParser<HashRequest>(() => new HashRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HashRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HashRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HashRequest(HashRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HashRequest Clone() {
      return new HashRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HashRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HashRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HashRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class HashKVRequest : pb::IMessage<HashKVRequest> {
    private static readonly pb::MessageParser<HashKVRequest> _parser = new pb::MessageParser<HashKVRequest>(() => new HashKVRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HashKVRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HashKVRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HashKVRequest(HashKVRequest other) : this() {
      revision_ = other.revision_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HashKVRequest Clone() {
      return new HashKVRequest(this);
    }

    /// <summary>Field number for the "revision" field.</summary>
    public const int RevisionFieldNumber = 1;
    private long revision_;
    /// <summary>
    /// revision is the key-value store revision for the hash operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Revision {
      get { return revision_; }
      set {
        revision_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HashKVRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HashKVRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Revision != other.Revision) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Revision != 0L) hash ^= Revision.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Revision != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Revision);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Revision != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Revision);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HashKVRequest other) {
      if (other == null) {
        return;
      }
      if (other.Revision != 0L) {
        Revision = other.Revision;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Revision = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HashKVResponse : pb::IMessage<HashKVResponse> {
    private static readonly pb::MessageParser<HashKVResponse> _parser = new pb::MessageParser<HashKVResponse>(() => new HashKVResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HashKVResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HashKVResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HashKVResponse(HashKVResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      hash_ = other.hash_;
      compactRevision_ = other.compactRevision_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HashKVResponse Clone() {
      return new HashKVResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 2;
    private uint hash_;
    /// <summary>
    /// hash is the hash value computed from the responding member's MVCC keys up to a given revision.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Hash {
      get { return hash_; }
      set {
        hash_ = value;
      }
    }

    /// <summary>Field number for the "compact_revision" field.</summary>
    public const int CompactRevisionFieldNumber = 3;
    private long compactRevision_;
    /// <summary>
    /// compact_revision is the compacted revision of key-value store when hash begins.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CompactRevision {
      get { return compactRevision_; }
      set {
        compactRevision_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HashKVResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HashKVResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Hash != other.Hash) return false;
      if (CompactRevision != other.CompactRevision) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Hash != 0) hash ^= Hash.GetHashCode();
      if (CompactRevision != 0L) hash ^= CompactRevision.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Hash != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Hash);
      }
      if (CompactRevision != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CompactRevision);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Hash != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hash);
      }
      if (CompactRevision != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CompactRevision);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HashKVResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Hash != 0) {
        Hash = other.Hash;
      }
      if (other.CompactRevision != 0L) {
        CompactRevision = other.CompactRevision;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            Hash = input.ReadUInt32();
            break;
          }
          case 24: {
            CompactRevision = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HashResponse : pb::IMessage<HashResponse> {
    private static readonly pb::MessageParser<HashResponse> _parser = new pb::MessageParser<HashResponse>(() => new HashResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HashResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HashResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HashResponse(HashResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      hash_ = other.hash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HashResponse Clone() {
      return new HashResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 2;
    private uint hash_;
    /// <summary>
    /// hash is the hash value computed from the responding member's KV's backend.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Hash {
      get { return hash_; }
      set {
        hash_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HashResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HashResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Hash != other.Hash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Hash != 0) hash ^= Hash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Hash != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Hash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Hash != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HashResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Hash != 0) {
        Hash = other.Hash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            Hash = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SnapshotRequest : pb::IMessage<SnapshotRequest> {
    private static readonly pb::MessageParser<SnapshotRequest> _parser = new pb::MessageParser<SnapshotRequest>(() => new SnapshotRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SnapshotRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapshotRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapshotRequest(SnapshotRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapshotRequest Clone() {
      return new SnapshotRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SnapshotRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SnapshotRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SnapshotRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class SnapshotResponse : pb::IMessage<SnapshotResponse> {
    private static readonly pb::MessageParser<SnapshotResponse> _parser = new pb::MessageParser<SnapshotResponse>(() => new SnapshotResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SnapshotResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapshotResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapshotResponse(SnapshotResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      remainingBytes_ = other.remainingBytes_;
      blob_ = other.blob_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapshotResponse Clone() {
      return new SnapshotResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    /// <summary>
    /// header has the current key-value store information. The first header in the snapshot
    /// stream indicates the point in time of the snapshot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "remaining_bytes" field.</summary>
    public const int RemainingBytesFieldNumber = 2;
    private ulong remainingBytes_;
    /// <summary>
    /// remaining_bytes is the number of blob bytes to be sent after this message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RemainingBytes {
      get { return remainingBytes_; }
      set {
        remainingBytes_ = value;
      }
    }

    /// <summary>Field number for the "blob" field.</summary>
    public const int BlobFieldNumber = 3;
    private pb::ByteString blob_ = pb::ByteString.Empty;
    /// <summary>
    /// blob contains the next chunk of the snapshot in the snapshot stream.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Blob {
      get { return blob_; }
      set {
        blob_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SnapshotResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SnapshotResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (RemainingBytes != other.RemainingBytes) return false;
      if (Blob != other.Blob) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (RemainingBytes != 0UL) hash ^= RemainingBytes.GetHashCode();
      if (Blob.Length != 0) hash ^= Blob.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (RemainingBytes != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RemainingBytes);
      }
      if (Blob.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Blob);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (RemainingBytes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RemainingBytes);
      }
      if (Blob.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Blob);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SnapshotResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.RemainingBytes != 0UL) {
        RemainingBytes = other.RemainingBytes;
      }
      if (other.Blob.Length != 0) {
        Blob = other.Blob;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            RemainingBytes = input.ReadUInt64();
            break;
          }
          case 26: {
            Blob = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WatchRequest : pb::IMessage<WatchRequest> {
    private static readonly pb::MessageParser<WatchRequest> _parser = new pb::MessageParser<WatchRequest>(() => new WatchRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WatchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchRequest(WatchRequest other) : this() {
      switch (other.RequestUnionCase) {
        case RequestUnionOneofCase.CreateRequest:
          CreateRequest = other.CreateRequest.Clone();
          break;
        case RequestUnionOneofCase.CancelRequest:
          CancelRequest = other.CancelRequest.Clone();
          break;
        case RequestUnionOneofCase.ProgressRequest:
          ProgressRequest = other.ProgressRequest.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchRequest Clone() {
      return new WatchRequest(this);
    }

    /// <summary>Field number for the "create_request" field.</summary>
    public const int CreateRequestFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.WatchCreateRequest CreateRequest {
      get { return requestUnionCase_ == RequestUnionOneofCase.CreateRequest ? (global::Etcdserverpb.WatchCreateRequest) requestUnion_ : null; }
      set {
        requestUnion_ = value;
        requestUnionCase_ = value == null ? RequestUnionOneofCase.None : RequestUnionOneofCase.CreateRequest;
      }
    }

    /// <summary>Field number for the "cancel_request" field.</summary>
    public const int CancelRequestFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.WatchCancelRequest CancelRequest {
      get { return requestUnionCase_ == RequestUnionOneofCase.CancelRequest ? (global::Etcdserverpb.WatchCancelRequest) requestUnion_ : null; }
      set {
        requestUnion_ = value;
        requestUnionCase_ = value == null ? RequestUnionOneofCase.None : RequestUnionOneofCase.CancelRequest;
      }
    }

    /// <summary>Field number for the "progress_request" field.</summary>
    public const int ProgressRequestFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.WatchProgressRequest ProgressRequest {
      get { return requestUnionCase_ == RequestUnionOneofCase.ProgressRequest ? (global::Etcdserverpb.WatchProgressRequest) requestUnion_ : null; }
      set {
        requestUnion_ = value;
        requestUnionCase_ = value == null ? RequestUnionOneofCase.None : RequestUnionOneofCase.ProgressRequest;
      }
    }

    private object requestUnion_;
    /// <summary>Enum of possible cases for the "request_union" oneof.</summary>
    public enum RequestUnionOneofCase {
      None = 0,
      CreateRequest = 1,
      CancelRequest = 2,
      ProgressRequest = 3,
    }
    private RequestUnionOneofCase requestUnionCase_ = RequestUnionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestUnionOneofCase RequestUnionCase {
      get { return requestUnionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequestUnion() {
      requestUnionCase_ = RequestUnionOneofCase.None;
      requestUnion_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WatchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WatchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CreateRequest, other.CreateRequest)) return false;
      if (!object.Equals(CancelRequest, other.CancelRequest)) return false;
      if (!object.Equals(ProgressRequest, other.ProgressRequest)) return false;
      if (RequestUnionCase != other.RequestUnionCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (requestUnionCase_ == RequestUnionOneofCase.CreateRequest) hash ^= CreateRequest.GetHashCode();
      if (requestUnionCase_ == RequestUnionOneofCase.CancelRequest) hash ^= CancelRequest.GetHashCode();
      if (requestUnionCase_ == RequestUnionOneofCase.ProgressRequest) hash ^= ProgressRequest.GetHashCode();
      hash ^= (int) requestUnionCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (requestUnionCase_ == RequestUnionOneofCase.CreateRequest) {
        output.WriteRawTag(10);
        output.WriteMessage(CreateRequest);
      }
      if (requestUnionCase_ == RequestUnionOneofCase.CancelRequest) {
        output.WriteRawTag(18);
        output.WriteMessage(CancelRequest);
      }
      if (requestUnionCase_ == RequestUnionOneofCase.ProgressRequest) {
        output.WriteRawTag(26);
        output.WriteMessage(ProgressRequest);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (requestUnionCase_ == RequestUnionOneofCase.CreateRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateRequest);
      }
      if (requestUnionCase_ == RequestUnionOneofCase.CancelRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CancelRequest);
      }
      if (requestUnionCase_ == RequestUnionOneofCase.ProgressRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProgressRequest);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WatchRequest other) {
      if (other == null) {
        return;
      }
      switch (other.RequestUnionCase) {
        case RequestUnionOneofCase.CreateRequest:
          if (CreateRequest == null) {
            CreateRequest = new global::Etcdserverpb.WatchCreateRequest();
          }
          CreateRequest.MergeFrom(other.CreateRequest);
          break;
        case RequestUnionOneofCase.CancelRequest:
          if (CancelRequest == null) {
            CancelRequest = new global::Etcdserverpb.WatchCancelRequest();
          }
          CancelRequest.MergeFrom(other.CancelRequest);
          break;
        case RequestUnionOneofCase.ProgressRequest:
          if (ProgressRequest == null) {
            ProgressRequest = new global::Etcdserverpb.WatchProgressRequest();
          }
          ProgressRequest.MergeFrom(other.ProgressRequest);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Etcdserverpb.WatchCreateRequest subBuilder = new global::Etcdserverpb.WatchCreateRequest();
            if (requestUnionCase_ == RequestUnionOneofCase.CreateRequest) {
              subBuilder.MergeFrom(CreateRequest);
            }
            input.ReadMessage(subBuilder);
            CreateRequest = subBuilder;
            break;
          }
          case 18: {
            global::Etcdserverpb.WatchCancelRequest subBuilder = new global::Etcdserverpb.WatchCancelRequest();
            if (requestUnionCase_ == RequestUnionOneofCase.CancelRequest) {
              subBuilder.MergeFrom(CancelRequest);
            }
            input.ReadMessage(subBuilder);
            CancelRequest = subBuilder;
            break;
          }
          case 26: {
            global::Etcdserverpb.WatchProgressRequest subBuilder = new global::Etcdserverpb.WatchProgressRequest();
            if (requestUnionCase_ == RequestUnionOneofCase.ProgressRequest) {
              subBuilder.MergeFrom(ProgressRequest);
            }
            input.ReadMessage(subBuilder);
            ProgressRequest = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class WatchCreateRequest : pb::IMessage<WatchCreateRequest> {
    private static readonly pb::MessageParser<WatchCreateRequest> _parser = new pb::MessageParser<WatchCreateRequest>(() => new WatchCreateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WatchCreateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchCreateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchCreateRequest(WatchCreateRequest other) : this() {
      key_ = other.key_;
      rangeEnd_ = other.rangeEnd_;
      startRevision_ = other.startRevision_;
      progressNotify_ = other.progressNotify_;
      filters_ = other.filters_.Clone();
      prevKv_ = other.prevKv_;
      watchId_ = other.watchId_;
      fragment_ = other.fragment_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchCreateRequest Clone() {
      return new WatchCreateRequest(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private pb::ByteString key_ = pb::ByteString.Empty;
    /// <summary>
    /// key is the key to register for watching.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "range_end" field.</summary>
    public const int RangeEndFieldNumber = 2;
    private pb::ByteString rangeEnd_ = pb::ByteString.Empty;
    /// <summary>
    /// range_end is the end of the range [key, range_end) to watch. If range_end is not given,
    /// only the key argument is watched. If range_end is equal to '\0', all keys greater than
    /// or equal to the key argument are watched.
    /// If the range_end is one bit larger than the given key,
    /// then all keys with the prefix (the given key) will be watched.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RangeEnd {
      get { return rangeEnd_; }
      set {
        rangeEnd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start_revision" field.</summary>
    public const int StartRevisionFieldNumber = 3;
    private long startRevision_;
    /// <summary>
    /// start_revision is an optional revision to watch from (inclusive). No start_revision is "now".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartRevision {
      get { return startRevision_; }
      set {
        startRevision_ = value;
      }
    }

    /// <summary>Field number for the "progress_notify" field.</summary>
    public const int ProgressNotifyFieldNumber = 4;
    private bool progressNotify_;
    /// <summary>
    /// progress_notify is set so that the etcd server will periodically send a WatchResponse with
    /// no events to the new watcher if there are no recent events. It is useful when clients
    /// wish to recover a disconnected watcher starting from a recent known revision.
    /// The etcd server may decide how often it will send notifications based on current load.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ProgressNotify {
      get { return progressNotify_; }
      set {
        progressNotify_ = value;
      }
    }

    /// <summary>Field number for the "filters" field.</summary>
    public const int FiltersFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Etcdserverpb.WatchCreateRequest.Types.FilterType> _repeated_filters_codec
        = pb::FieldCodec.ForEnum(42, x => (int) x, x => (global::Etcdserverpb.WatchCreateRequest.Types.FilterType) x);
    private readonly pbc::RepeatedField<global::Etcdserverpb.WatchCreateRequest.Types.FilterType> filters_ = new pbc::RepeatedField<global::Etcdserverpb.WatchCreateRequest.Types.FilterType>();
    /// <summary>
    /// filters filter the events at server side before it sends back to the watcher.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Etcdserverpb.WatchCreateRequest.Types.FilterType> Filters {
      get { return filters_; }
    }

    /// <summary>Field number for the "prev_kv" field.</summary>
    public const int PrevKvFieldNumber = 6;
    private bool prevKv_;
    /// <summary>
    /// If prev_kv is set, created watcher gets the previous KV before the event happens.
    /// If the previous KV is already compacted, nothing will be returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PrevKv {
      get { return prevKv_; }
      set {
        prevKv_ = value;
      }
    }

    /// <summary>Field number for the "watch_id" field.</summary>
    public const int WatchIdFieldNumber = 7;
    private long watchId_;
    /// <summary>
    /// If watch_id is provided and non-zero, it will be assigned to this watcher.
    /// Since creating a watcher in etcd is not a synchronous operation,
    /// this can be used ensure that ordering is correct when creating multiple
    /// watchers on the same stream. Creating a watcher with an ID already in
    /// use on the stream will cause an error to be returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WatchId {
      get { return watchId_; }
      set {
        watchId_ = value;
      }
    }

    /// <summary>Field number for the "fragment" field.</summary>
    public const int FragmentFieldNumber = 8;
    private bool fragment_;
    /// <summary>
    /// fragment enables splitting large revisions into multiple watch responses.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Fragment {
      get { return fragment_; }
      set {
        fragment_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WatchCreateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WatchCreateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (RangeEnd != other.RangeEnd) return false;
      if (StartRevision != other.StartRevision) return false;
      if (ProgressNotify != other.ProgressNotify) return false;
      if(!filters_.Equals(other.filters_)) return false;
      if (PrevKv != other.PrevKv) return false;
      if (WatchId != other.WatchId) return false;
      if (Fragment != other.Fragment) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (RangeEnd.Length != 0) hash ^= RangeEnd.GetHashCode();
      if (StartRevision != 0L) hash ^= StartRevision.GetHashCode();
      if (ProgressNotify != false) hash ^= ProgressNotify.GetHashCode();
      hash ^= filters_.GetHashCode();
      if (PrevKv != false) hash ^= PrevKv.GetHashCode();
      if (WatchId != 0L) hash ^= WatchId.GetHashCode();
      if (Fragment != false) hash ^= Fragment.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Key);
      }
      if (RangeEnd.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RangeEnd);
      }
      if (StartRevision != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(StartRevision);
      }
      if (ProgressNotify != false) {
        output.WriteRawTag(32);
        output.WriteBool(ProgressNotify);
      }
      filters_.WriteTo(output, _repeated_filters_codec);
      if (PrevKv != false) {
        output.WriteRawTag(48);
        output.WriteBool(PrevKv);
      }
      if (WatchId != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(WatchId);
      }
      if (Fragment != false) {
        output.WriteRawTag(64);
        output.WriteBool(Fragment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Key);
      }
      if (RangeEnd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RangeEnd);
      }
      if (StartRevision != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartRevision);
      }
      if (ProgressNotify != false) {
        size += 1 + 1;
      }
      size += filters_.CalculateSize(_repeated_filters_codec);
      if (PrevKv != false) {
        size += 1 + 1;
      }
      if (WatchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WatchId);
      }
      if (Fragment != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WatchCreateRequest other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.RangeEnd.Length != 0) {
        RangeEnd = other.RangeEnd;
      }
      if (other.StartRevision != 0L) {
        StartRevision = other.StartRevision;
      }
      if (other.ProgressNotify != false) {
        ProgressNotify = other.ProgressNotify;
      }
      filters_.Add(other.filters_);
      if (other.PrevKv != false) {
        PrevKv = other.PrevKv;
      }
      if (other.WatchId != 0L) {
        WatchId = other.WatchId;
      }
      if (other.Fragment != false) {
        Fragment = other.Fragment;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadBytes();
            break;
          }
          case 18: {
            RangeEnd = input.ReadBytes();
            break;
          }
          case 24: {
            StartRevision = input.ReadInt64();
            break;
          }
          case 32: {
            ProgressNotify = input.ReadBool();
            break;
          }
          case 42:
          case 40: {
            filters_.AddEntriesFrom(input, _repeated_filters_codec);
            break;
          }
          case 48: {
            PrevKv = input.ReadBool();
            break;
          }
          case 56: {
            WatchId = input.ReadInt64();
            break;
          }
          case 64: {
            Fragment = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the WatchCreateRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum FilterType {
        /// <summary>
        /// filter out put event.
        /// </summary>
        [pbr::OriginalName("NOPUT")] Noput = 0,
        /// <summary>
        /// filter out delete event.
        /// </summary>
        [pbr::OriginalName("NODELETE")] Nodelete = 1,
      }

    }
    #endregion

  }

  public sealed partial class WatchCancelRequest : pb::IMessage<WatchCancelRequest> {
    private static readonly pb::MessageParser<WatchCancelRequest> _parser = new pb::MessageParser<WatchCancelRequest>(() => new WatchCancelRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WatchCancelRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchCancelRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchCancelRequest(WatchCancelRequest other) : this() {
      watchId_ = other.watchId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchCancelRequest Clone() {
      return new WatchCancelRequest(this);
    }

    /// <summary>Field number for the "watch_id" field.</summary>
    public const int WatchIdFieldNumber = 1;
    private long watchId_;
    /// <summary>
    /// watch_id is the watcher id to cancel so that no more events are transmitted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WatchId {
      get { return watchId_; }
      set {
        watchId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WatchCancelRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WatchCancelRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WatchId != other.WatchId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WatchId != 0L) hash ^= WatchId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WatchId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(WatchId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WatchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WatchId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WatchCancelRequest other) {
      if (other == null) {
        return;
      }
      if (other.WatchId != 0L) {
        WatchId = other.WatchId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WatchId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Requests the a watch stream progress status be sent in the watch response stream as soon as
  /// possible.
  /// </summary>
  public sealed partial class WatchProgressRequest : pb::IMessage<WatchProgressRequest> {
    private static readonly pb::MessageParser<WatchProgressRequest> _parser = new pb::MessageParser<WatchProgressRequest>(() => new WatchProgressRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WatchProgressRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchProgressRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchProgressRequest(WatchProgressRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchProgressRequest Clone() {
      return new WatchProgressRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WatchProgressRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WatchProgressRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WatchProgressRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class WatchResponse : pb::IMessage<WatchResponse> {
    private static readonly pb::MessageParser<WatchResponse> _parser = new pb::MessageParser<WatchResponse>(() => new WatchResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WatchResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchResponse(WatchResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      watchId_ = other.watchId_;
      created_ = other.created_;
      canceled_ = other.canceled_;
      compactRevision_ = other.compactRevision_;
      cancelReason_ = other.cancelReason_;
      fragment_ = other.fragment_;
      events_ = other.events_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchResponse Clone() {
      return new WatchResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "watch_id" field.</summary>
    public const int WatchIdFieldNumber = 2;
    private long watchId_;
    /// <summary>
    /// watch_id is the ID of the watcher that corresponds to the response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WatchId {
      get { return watchId_; }
      set {
        watchId_ = value;
      }
    }

    /// <summary>Field number for the "created" field.</summary>
    public const int CreatedFieldNumber = 3;
    private bool created_;
    /// <summary>
    /// created is set to true if the response is for a create watch request.
    /// The client should record the watch_id and expect to receive events for
    /// the created watcher from the same stream.
    /// All events sent to the created watcher will attach with the same watch_id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Created {
      get { return created_; }
      set {
        created_ = value;
      }
    }

    /// <summary>Field number for the "canceled" field.</summary>
    public const int CanceledFieldNumber = 4;
    private bool canceled_;
    /// <summary>
    /// canceled is set to true if the response is for a cancel watch request.
    /// No further events will be sent to the canceled watcher.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Canceled {
      get { return canceled_; }
      set {
        canceled_ = value;
      }
    }

    /// <summary>Field number for the "compact_revision" field.</summary>
    public const int CompactRevisionFieldNumber = 5;
    private long compactRevision_;
    /// <summary>
    /// compact_revision is set to the minimum index if a watcher tries to watch
    /// at a compacted index.
    ///
    /// This happens when creating a watcher at a compacted revision or the watcher cannot
    /// catch up with the progress of the key-value store.
    ///
    /// The client should treat the watcher as canceled and should not try to create any
    /// watcher with the same start_revision again.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CompactRevision {
      get { return compactRevision_; }
      set {
        compactRevision_ = value;
      }
    }

    /// <summary>Field number for the "cancel_reason" field.</summary>
    public const int CancelReasonFieldNumber = 6;
    private string cancelReason_ = "";
    /// <summary>
    /// cancel_reason indicates the reason for canceling the watcher.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CancelReason {
      get { return cancelReason_; }
      set {
        cancelReason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fragment" field.</summary>
    public const int FragmentFieldNumber = 7;
    private bool fragment_;
    /// <summary>
    /// framgment is true if large watch response was split over multiple responses.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Fragment {
      get { return fragment_; }
      set {
        fragment_ = value;
      }
    }

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Mvccpb.Event> _repeated_events_codec
        = pb::FieldCodec.ForMessage(90, global::Mvccpb.Event.Parser);
    private readonly pbc::RepeatedField<global::Mvccpb.Event> events_ = new pbc::RepeatedField<global::Mvccpb.Event>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Mvccpb.Event> Events {
      get { return events_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WatchResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WatchResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (WatchId != other.WatchId) return false;
      if (Created != other.Created) return false;
      if (Canceled != other.Canceled) return false;
      if (CompactRevision != other.CompactRevision) return false;
      if (CancelReason != other.CancelReason) return false;
      if (Fragment != other.Fragment) return false;
      if(!events_.Equals(other.events_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (WatchId != 0L) hash ^= WatchId.GetHashCode();
      if (Created != false) hash ^= Created.GetHashCode();
      if (Canceled != false) hash ^= Canceled.GetHashCode();
      if (CompactRevision != 0L) hash ^= CompactRevision.GetHashCode();
      if (CancelReason.Length != 0) hash ^= CancelReason.GetHashCode();
      if (Fragment != false) hash ^= Fragment.GetHashCode();
      hash ^= events_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (WatchId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(WatchId);
      }
      if (Created != false) {
        output.WriteRawTag(24);
        output.WriteBool(Created);
      }
      if (Canceled != false) {
        output.WriteRawTag(32);
        output.WriteBool(Canceled);
      }
      if (CompactRevision != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(CompactRevision);
      }
      if (CancelReason.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CancelReason);
      }
      if (Fragment != false) {
        output.WriteRawTag(56);
        output.WriteBool(Fragment);
      }
      events_.WriteTo(output, _repeated_events_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (WatchId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WatchId);
      }
      if (Created != false) {
        size += 1 + 1;
      }
      if (Canceled != false) {
        size += 1 + 1;
      }
      if (CompactRevision != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CompactRevision);
      }
      if (CancelReason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CancelReason);
      }
      if (Fragment != false) {
        size += 1 + 1;
      }
      size += events_.CalculateSize(_repeated_events_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WatchResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.WatchId != 0L) {
        WatchId = other.WatchId;
      }
      if (other.Created != false) {
        Created = other.Created;
      }
      if (other.Canceled != false) {
        Canceled = other.Canceled;
      }
      if (other.CompactRevision != 0L) {
        CompactRevision = other.CompactRevision;
      }
      if (other.CancelReason.Length != 0) {
        CancelReason = other.CancelReason;
      }
      if (other.Fragment != false) {
        Fragment = other.Fragment;
      }
      events_.Add(other.events_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            WatchId = input.ReadInt64();
            break;
          }
          case 24: {
            Created = input.ReadBool();
            break;
          }
          case 32: {
            Canceled = input.ReadBool();
            break;
          }
          case 40: {
            CompactRevision = input.ReadInt64();
            break;
          }
          case 50: {
            CancelReason = input.ReadString();
            break;
          }
          case 56: {
            Fragment = input.ReadBool();
            break;
          }
          case 90: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LeaseGrantRequest : pb::IMessage<LeaseGrantRequest> {
    private static readonly pb::MessageParser<LeaseGrantRequest> _parser = new pb::MessageParser<LeaseGrantRequest>(() => new LeaseGrantRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaseGrantRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseGrantRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseGrantRequest(LeaseGrantRequest other) : this() {
      tTL_ = other.tTL_;
      iD_ = other.iD_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseGrantRequest Clone() {
      return new LeaseGrantRequest(this);
    }

    /// <summary>Field number for the "TTL" field.</summary>
    public const int TTLFieldNumber = 1;
    private long tTL_;
    /// <summary>
    /// TTL is the advisory time-to-live in seconds. Expired lease will return -1.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TTL {
      get { return tTL_; }
      set {
        tTL_ = value;
      }
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 2;
    private long iD_;
    /// <summary>
    /// ID is the requested ID for the lease. If ID is set to 0, the lessor chooses an ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaseGrantRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaseGrantRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TTL != other.TTL) return false;
      if (ID != other.ID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TTL != 0L) hash ^= TTL.GetHashCode();
      if (ID != 0L) hash ^= ID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TTL != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TTL);
      }
      if (ID != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TTL != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TTL);
      }
      if (ID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaseGrantRequest other) {
      if (other == null) {
        return;
      }
      if (other.TTL != 0L) {
        TTL = other.TTL;
      }
      if (other.ID != 0L) {
        ID = other.ID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TTL = input.ReadInt64();
            break;
          }
          case 16: {
            ID = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LeaseGrantResponse : pb::IMessage<LeaseGrantResponse> {
    private static readonly pb::MessageParser<LeaseGrantResponse> _parser = new pb::MessageParser<LeaseGrantResponse>(() => new LeaseGrantResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaseGrantResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseGrantResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseGrantResponse(LeaseGrantResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      iD_ = other.iD_;
      tTL_ = other.tTL_;
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseGrantResponse Clone() {
      return new LeaseGrantResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 2;
    private long iD_;
    /// <summary>
    /// ID is the lease ID for the granted lease.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "TTL" field.</summary>
    public const int TTLFieldNumber = 3;
    private long tTL_;
    /// <summary>
    /// TTL is the server chosen lease time-to-live in seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TTL {
      get { return tTL_; }
      set {
        tTL_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 4;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaseGrantResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaseGrantResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (ID != other.ID) return false;
      if (TTL != other.TTL) return false;
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (ID != 0L) hash ^= ID.GetHashCode();
      if (TTL != 0L) hash ^= TTL.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (ID != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ID);
      }
      if (TTL != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TTL);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (ID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ID);
      }
      if (TTL != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TTL);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaseGrantResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.ID != 0L) {
        ID = other.ID;
      }
      if (other.TTL != 0L) {
        TTL = other.TTL;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            ID = input.ReadInt64();
            break;
          }
          case 24: {
            TTL = input.ReadInt64();
            break;
          }
          case 34: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LeaseRevokeRequest : pb::IMessage<LeaseRevokeRequest> {
    private static readonly pb::MessageParser<LeaseRevokeRequest> _parser = new pb::MessageParser<LeaseRevokeRequest>(() => new LeaseRevokeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaseRevokeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseRevokeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseRevokeRequest(LeaseRevokeRequest other) : this() {
      iD_ = other.iD_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseRevokeRequest Clone() {
      return new LeaseRevokeRequest(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private long iD_;
    /// <summary>
    /// ID is the lease ID to revoke. When the ID is revoked, all associated keys will be deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaseRevokeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaseRevokeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0L) hash ^= ID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaseRevokeRequest other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0L) {
        ID = other.ID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LeaseRevokeResponse : pb::IMessage<LeaseRevokeResponse> {
    private static readonly pb::MessageParser<LeaseRevokeResponse> _parser = new pb::MessageParser<LeaseRevokeResponse>(() => new LeaseRevokeResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaseRevokeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseRevokeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseRevokeResponse(LeaseRevokeResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseRevokeResponse Clone() {
      return new LeaseRevokeResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaseRevokeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaseRevokeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaseRevokeResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LeaseCheckpoint : pb::IMessage<LeaseCheckpoint> {
    private static readonly pb::MessageParser<LeaseCheckpoint> _parser = new pb::MessageParser<LeaseCheckpoint>(() => new LeaseCheckpoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaseCheckpoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseCheckpoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseCheckpoint(LeaseCheckpoint other) : this() {
      iD_ = other.iD_;
      remainingTTL_ = other.remainingTTL_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseCheckpoint Clone() {
      return new LeaseCheckpoint(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private long iD_;
    /// <summary>
    /// ID is the lease ID to checkpoint.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "remaining_TTL" field.</summary>
    public const int RemainingTTLFieldNumber = 2;
    private long remainingTTL_;
    /// <summary>
    /// Remaining_TTL is the remaining time until expiry of the lease.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RemainingTTL {
      get { return remainingTTL_; }
      set {
        remainingTTL_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaseCheckpoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaseCheckpoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (RemainingTTL != other.RemainingTTL) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0L) hash ^= ID.GetHashCode();
      if (RemainingTTL != 0L) hash ^= RemainingTTL.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ID);
      }
      if (RemainingTTL != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RemainingTTL);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ID);
      }
      if (RemainingTTL != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RemainingTTL);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaseCheckpoint other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0L) {
        ID = other.ID;
      }
      if (other.RemainingTTL != 0L) {
        RemainingTTL = other.RemainingTTL;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt64();
            break;
          }
          case 16: {
            RemainingTTL = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LeaseCheckpointRequest : pb::IMessage<LeaseCheckpointRequest> {
    private static readonly pb::MessageParser<LeaseCheckpointRequest> _parser = new pb::MessageParser<LeaseCheckpointRequest>(() => new LeaseCheckpointRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaseCheckpointRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseCheckpointRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseCheckpointRequest(LeaseCheckpointRequest other) : this() {
      checkpoints_ = other.checkpoints_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseCheckpointRequest Clone() {
      return new LeaseCheckpointRequest(this);
    }

    /// <summary>Field number for the "checkpoints" field.</summary>
    public const int CheckpointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Etcdserverpb.LeaseCheckpoint> _repeated_checkpoints_codec
        = pb::FieldCodec.ForMessage(10, global::Etcdserverpb.LeaseCheckpoint.Parser);
    private readonly pbc::RepeatedField<global::Etcdserverpb.LeaseCheckpoint> checkpoints_ = new pbc::RepeatedField<global::Etcdserverpb.LeaseCheckpoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Etcdserverpb.LeaseCheckpoint> Checkpoints {
      get { return checkpoints_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaseCheckpointRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaseCheckpointRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!checkpoints_.Equals(other.checkpoints_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= checkpoints_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      checkpoints_.WriteTo(output, _repeated_checkpoints_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += checkpoints_.CalculateSize(_repeated_checkpoints_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaseCheckpointRequest other) {
      if (other == null) {
        return;
      }
      checkpoints_.Add(other.checkpoints_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            checkpoints_.AddEntriesFrom(input, _repeated_checkpoints_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LeaseCheckpointResponse : pb::IMessage<LeaseCheckpointResponse> {
    private static readonly pb::MessageParser<LeaseCheckpointResponse> _parser = new pb::MessageParser<LeaseCheckpointResponse>(() => new LeaseCheckpointResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaseCheckpointResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseCheckpointResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseCheckpointResponse(LeaseCheckpointResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseCheckpointResponse Clone() {
      return new LeaseCheckpointResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaseCheckpointResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaseCheckpointResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaseCheckpointResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LeaseKeepAliveRequest : pb::IMessage<LeaseKeepAliveRequest> {
    private static readonly pb::MessageParser<LeaseKeepAliveRequest> _parser = new pb::MessageParser<LeaseKeepAliveRequest>(() => new LeaseKeepAliveRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaseKeepAliveRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseKeepAliveRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseKeepAliveRequest(LeaseKeepAliveRequest other) : this() {
      iD_ = other.iD_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseKeepAliveRequest Clone() {
      return new LeaseKeepAliveRequest(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private long iD_;
    /// <summary>
    /// ID is the lease ID for the lease to keep alive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaseKeepAliveRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaseKeepAliveRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0L) hash ^= ID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaseKeepAliveRequest other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0L) {
        ID = other.ID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LeaseKeepAliveResponse : pb::IMessage<LeaseKeepAliveResponse> {
    private static readonly pb::MessageParser<LeaseKeepAliveResponse> _parser = new pb::MessageParser<LeaseKeepAliveResponse>(() => new LeaseKeepAliveResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaseKeepAliveResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseKeepAliveResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseKeepAliveResponse(LeaseKeepAliveResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      iD_ = other.iD_;
      tTL_ = other.tTL_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseKeepAliveResponse Clone() {
      return new LeaseKeepAliveResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 2;
    private long iD_;
    /// <summary>
    /// ID is the lease ID from the keep alive request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "TTL" field.</summary>
    public const int TTLFieldNumber = 3;
    private long tTL_;
    /// <summary>
    /// TTL is the new time-to-live for the lease.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TTL {
      get { return tTL_; }
      set {
        tTL_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaseKeepAliveResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaseKeepAliveResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (ID != other.ID) return false;
      if (TTL != other.TTL) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (ID != 0L) hash ^= ID.GetHashCode();
      if (TTL != 0L) hash ^= TTL.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (ID != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ID);
      }
      if (TTL != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TTL);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (ID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ID);
      }
      if (TTL != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TTL);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaseKeepAliveResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.ID != 0L) {
        ID = other.ID;
      }
      if (other.TTL != 0L) {
        TTL = other.TTL;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            ID = input.ReadInt64();
            break;
          }
          case 24: {
            TTL = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LeaseTimeToLiveRequest : pb::IMessage<LeaseTimeToLiveRequest> {
    private static readonly pb::MessageParser<LeaseTimeToLiveRequest> _parser = new pb::MessageParser<LeaseTimeToLiveRequest>(() => new LeaseTimeToLiveRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaseTimeToLiveRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseTimeToLiveRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseTimeToLiveRequest(LeaseTimeToLiveRequest other) : this() {
      iD_ = other.iD_;
      keys_ = other.keys_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseTimeToLiveRequest Clone() {
      return new LeaseTimeToLiveRequest(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private long iD_;
    /// <summary>
    /// ID is the lease ID for the lease.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 2;
    private bool keys_;
    /// <summary>
    /// keys is true to query all the keys attached to this lease.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Keys {
      get { return keys_; }
      set {
        keys_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaseTimeToLiveRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaseTimeToLiveRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Keys != other.Keys) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0L) hash ^= ID.GetHashCode();
      if (Keys != false) hash ^= Keys.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ID);
      }
      if (Keys != false) {
        output.WriteRawTag(16);
        output.WriteBool(Keys);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ID);
      }
      if (Keys != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaseTimeToLiveRequest other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0L) {
        ID = other.ID;
      }
      if (other.Keys != false) {
        Keys = other.Keys;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt64();
            break;
          }
          case 16: {
            Keys = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LeaseTimeToLiveResponse : pb::IMessage<LeaseTimeToLiveResponse> {
    private static readonly pb::MessageParser<LeaseTimeToLiveResponse> _parser = new pb::MessageParser<LeaseTimeToLiveResponse>(() => new LeaseTimeToLiveResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaseTimeToLiveResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseTimeToLiveResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseTimeToLiveResponse(LeaseTimeToLiveResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      iD_ = other.iD_;
      tTL_ = other.tTL_;
      grantedTTL_ = other.grantedTTL_;
      keys_ = other.keys_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseTimeToLiveResponse Clone() {
      return new LeaseTimeToLiveResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 2;
    private long iD_;
    /// <summary>
    /// ID is the lease ID from the keep alive request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "TTL" field.</summary>
    public const int TTLFieldNumber = 3;
    private long tTL_;
    /// <summary>
    /// TTL is the remaining TTL in seconds for the lease; the lease will expire in under TTL+1 seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TTL {
      get { return tTL_; }
      set {
        tTL_ = value;
      }
    }

    /// <summary>Field number for the "grantedTTL" field.</summary>
    public const int GrantedTTLFieldNumber = 4;
    private long grantedTTL_;
    /// <summary>
    /// GrantedTTL is the initial granted time in seconds upon lease creation/renewal.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GrantedTTL {
      get { return grantedTTL_; }
      set {
        grantedTTL_ = value;
      }
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 5;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_keys_codec
        = pb::FieldCodec.ForBytes(42);
    private readonly pbc::RepeatedField<pb::ByteString> keys_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    /// Keys is the list of keys attached to this lease.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Keys {
      get { return keys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaseTimeToLiveResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaseTimeToLiveResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (ID != other.ID) return false;
      if (TTL != other.TTL) return false;
      if (GrantedTTL != other.GrantedTTL) return false;
      if(!keys_.Equals(other.keys_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (ID != 0L) hash ^= ID.GetHashCode();
      if (TTL != 0L) hash ^= TTL.GetHashCode();
      if (GrantedTTL != 0L) hash ^= GrantedTTL.GetHashCode();
      hash ^= keys_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (ID != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ID);
      }
      if (TTL != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TTL);
      }
      if (GrantedTTL != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(GrantedTTL);
      }
      keys_.WriteTo(output, _repeated_keys_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (ID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ID);
      }
      if (TTL != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TTL);
      }
      if (GrantedTTL != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GrantedTTL);
      }
      size += keys_.CalculateSize(_repeated_keys_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaseTimeToLiveResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.ID != 0L) {
        ID = other.ID;
      }
      if (other.TTL != 0L) {
        TTL = other.TTL;
      }
      if (other.GrantedTTL != 0L) {
        GrantedTTL = other.GrantedTTL;
      }
      keys_.Add(other.keys_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            ID = input.ReadInt64();
            break;
          }
          case 24: {
            TTL = input.ReadInt64();
            break;
          }
          case 32: {
            GrantedTTL = input.ReadInt64();
            break;
          }
          case 42: {
            keys_.AddEntriesFrom(input, _repeated_keys_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LeaseLeasesRequest : pb::IMessage<LeaseLeasesRequest> {
    private static readonly pb::MessageParser<LeaseLeasesRequest> _parser = new pb::MessageParser<LeaseLeasesRequest>(() => new LeaseLeasesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaseLeasesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseLeasesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseLeasesRequest(LeaseLeasesRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseLeasesRequest Clone() {
      return new LeaseLeasesRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaseLeasesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaseLeasesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaseLeasesRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class LeaseStatus : pb::IMessage<LeaseStatus> {
    private static readonly pb::MessageParser<LeaseStatus> _parser = new pb::MessageParser<LeaseStatus>(() => new LeaseStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaseStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseStatus(LeaseStatus other) : this() {
      iD_ = other.iD_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseStatus Clone() {
      return new LeaseStatus(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private long iD_;
    /// <summary>
    /// TODO: int64 TTL = 2;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaseStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaseStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0L) hash ^= ID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaseStatus other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0L) {
        ID = other.ID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LeaseLeasesResponse : pb::IMessage<LeaseLeasesResponse> {
    private static readonly pb::MessageParser<LeaseLeasesResponse> _parser = new pb::MessageParser<LeaseLeasesResponse>(() => new LeaseLeasesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaseLeasesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseLeasesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseLeasesResponse(LeaseLeasesResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      leases_ = other.leases_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseLeasesResponse Clone() {
      return new LeaseLeasesResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "leases" field.</summary>
    public const int LeasesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Etcdserverpb.LeaseStatus> _repeated_leases_codec
        = pb::FieldCodec.ForMessage(18, global::Etcdserverpb.LeaseStatus.Parser);
    private readonly pbc::RepeatedField<global::Etcdserverpb.LeaseStatus> leases_ = new pbc::RepeatedField<global::Etcdserverpb.LeaseStatus>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Etcdserverpb.LeaseStatus> Leases {
      get { return leases_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaseLeasesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaseLeasesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!leases_.Equals(other.leases_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= leases_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      leases_.WriteTo(output, _repeated_leases_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += leases_.CalculateSize(_repeated_leases_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaseLeasesResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      leases_.Add(other.leases_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            leases_.AddEntriesFrom(input, _repeated_leases_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Member : pb::IMessage<Member> {
    private static readonly pb::MessageParser<Member> _parser = new pb::MessageParser<Member>(() => new Member());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Member> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Member() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Member(Member other) : this() {
      iD_ = other.iD_;
      name_ = other.name_;
      peerURLs_ = other.peerURLs_.Clone();
      clientURLs_ = other.clientURLs_.Clone();
      isLearner_ = other.isLearner_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Member Clone() {
      return new Member(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private ulong iD_;
    /// <summary>
    /// ID is the member ID for this member.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// name is the human-readable name of the member. If the member is not started, the name will be an empty string.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "peerURLs" field.</summary>
    public const int PeerURLsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_peerURLs_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> peerURLs_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// peerURLs is the list of URLs the member exposes to the cluster for communication.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PeerURLs {
      get { return peerURLs_; }
    }

    /// <summary>Field number for the "clientURLs" field.</summary>
    public const int ClientURLsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_clientURLs_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> clientURLs_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// clientURLs is the list of URLs the member exposes to clients for communication. If the member is not started, clientURLs will be empty.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ClientURLs {
      get { return clientURLs_; }
    }

    /// <summary>Field number for the "isLearner" field.</summary>
    public const int IsLearnerFieldNumber = 5;
    private bool isLearner_;
    /// <summary>
    /// isLearner indicates if the member is raft learner.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLearner {
      get { return isLearner_; }
      set {
        isLearner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Member);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Member other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Name != other.Name) return false;
      if(!peerURLs_.Equals(other.peerURLs_)) return false;
      if(!clientURLs_.Equals(other.clientURLs_)) return false;
      if (IsLearner != other.IsLearner) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0UL) hash ^= ID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= peerURLs_.GetHashCode();
      hash ^= clientURLs_.GetHashCode();
      if (IsLearner != false) hash ^= IsLearner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      peerURLs_.WriteTo(output, _repeated_peerURLs_codec);
      clientURLs_.WriteTo(output, _repeated_clientURLs_codec);
      if (IsLearner != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsLearner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += peerURLs_.CalculateSize(_repeated_peerURLs_codec);
      size += clientURLs_.CalculateSize(_repeated_clientURLs_codec);
      if (IsLearner != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Member other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0UL) {
        ID = other.ID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      peerURLs_.Add(other.peerURLs_);
      clientURLs_.Add(other.clientURLs_);
      if (other.IsLearner != false) {
        IsLearner = other.IsLearner;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            peerURLs_.AddEntriesFrom(input, _repeated_peerURLs_codec);
            break;
          }
          case 34: {
            clientURLs_.AddEntriesFrom(input, _repeated_clientURLs_codec);
            break;
          }
          case 40: {
            IsLearner = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MemberAddRequest : pb::IMessage<MemberAddRequest> {
    private static readonly pb::MessageParser<MemberAddRequest> _parser = new pb::MessageParser<MemberAddRequest>(() => new MemberAddRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemberAddRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberAddRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberAddRequest(MemberAddRequest other) : this() {
      peerURLs_ = other.peerURLs_.Clone();
      isLearner_ = other.isLearner_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberAddRequest Clone() {
      return new MemberAddRequest(this);
    }

    /// <summary>Field number for the "peerURLs" field.</summary>
    public const int PeerURLsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_peerURLs_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> peerURLs_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// peerURLs is the list of URLs the added member will use to communicate with the cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PeerURLs {
      get { return peerURLs_; }
    }

    /// <summary>Field number for the "isLearner" field.</summary>
    public const int IsLearnerFieldNumber = 2;
    private bool isLearner_;
    /// <summary>
    /// isLearner indicates if the added member is raft learner.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLearner {
      get { return isLearner_; }
      set {
        isLearner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemberAddRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemberAddRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!peerURLs_.Equals(other.peerURLs_)) return false;
      if (IsLearner != other.IsLearner) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= peerURLs_.GetHashCode();
      if (IsLearner != false) hash ^= IsLearner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      peerURLs_.WriteTo(output, _repeated_peerURLs_codec);
      if (IsLearner != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsLearner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += peerURLs_.CalculateSize(_repeated_peerURLs_codec);
      if (IsLearner != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemberAddRequest other) {
      if (other == null) {
        return;
      }
      peerURLs_.Add(other.peerURLs_);
      if (other.IsLearner != false) {
        IsLearner = other.IsLearner;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            peerURLs_.AddEntriesFrom(input, _repeated_peerURLs_codec);
            break;
          }
          case 16: {
            IsLearner = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MemberAddResponse : pb::IMessage<MemberAddResponse> {
    private static readonly pb::MessageParser<MemberAddResponse> _parser = new pb::MessageParser<MemberAddResponse>(() => new MemberAddResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemberAddResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberAddResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberAddResponse(MemberAddResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      member_ = other.member_ != null ? other.member_.Clone() : null;
      members_ = other.members_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberAddResponse Clone() {
      return new MemberAddResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "member" field.</summary>
    public const int MemberFieldNumber = 2;
    private global::Etcdserverpb.Member member_;
    /// <summary>
    /// member is the member information for the added member.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.Member Member {
      get { return member_; }
      set {
        member_ = value;
      }
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Etcdserverpb.Member> _repeated_members_codec
        = pb::FieldCodec.ForMessage(26, global::Etcdserverpb.Member.Parser);
    private readonly pbc::RepeatedField<global::Etcdserverpb.Member> members_ = new pbc::RepeatedField<global::Etcdserverpb.Member>();
    /// <summary>
    /// members is a list of all members after adding the new member.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Etcdserverpb.Member> Members {
      get { return members_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemberAddResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemberAddResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Member, other.Member)) return false;
      if(!members_.Equals(other.members_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (member_ != null) hash ^= Member.GetHashCode();
      hash ^= members_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (member_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Member);
      }
      members_.WriteTo(output, _repeated_members_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (member_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Member);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemberAddResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.member_ != null) {
        if (member_ == null) {
          Member = new global::Etcdserverpb.Member();
        }
        Member.MergeFrom(other.Member);
      }
      members_.Add(other.members_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (member_ == null) {
              Member = new global::Etcdserverpb.Member();
            }
            input.ReadMessage(Member);
            break;
          }
          case 26: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MemberRemoveRequest : pb::IMessage<MemberRemoveRequest> {
    private static readonly pb::MessageParser<MemberRemoveRequest> _parser = new pb::MessageParser<MemberRemoveRequest>(() => new MemberRemoveRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemberRemoveRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberRemoveRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberRemoveRequest(MemberRemoveRequest other) : this() {
      iD_ = other.iD_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberRemoveRequest Clone() {
      return new MemberRemoveRequest(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private ulong iD_;
    /// <summary>
    /// ID is the member ID of the member to remove.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemberRemoveRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemberRemoveRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0UL) hash ^= ID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemberRemoveRequest other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0UL) {
        ID = other.ID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MemberRemoveResponse : pb::IMessage<MemberRemoveResponse> {
    private static readonly pb::MessageParser<MemberRemoveResponse> _parser = new pb::MessageParser<MemberRemoveResponse>(() => new MemberRemoveResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemberRemoveResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberRemoveResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberRemoveResponse(MemberRemoveResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      members_ = other.members_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberRemoveResponse Clone() {
      return new MemberRemoveResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Etcdserverpb.Member> _repeated_members_codec
        = pb::FieldCodec.ForMessage(18, global::Etcdserverpb.Member.Parser);
    private readonly pbc::RepeatedField<global::Etcdserverpb.Member> members_ = new pbc::RepeatedField<global::Etcdserverpb.Member>();
    /// <summary>
    /// members is a list of all members after removing the member.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Etcdserverpb.Member> Members {
      get { return members_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemberRemoveResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemberRemoveResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!members_.Equals(other.members_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= members_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      members_.WriteTo(output, _repeated_members_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemberRemoveResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      members_.Add(other.members_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MemberUpdateRequest : pb::IMessage<MemberUpdateRequest> {
    private static readonly pb::MessageParser<MemberUpdateRequest> _parser = new pb::MessageParser<MemberUpdateRequest>(() => new MemberUpdateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemberUpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberUpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberUpdateRequest(MemberUpdateRequest other) : this() {
      iD_ = other.iD_;
      peerURLs_ = other.peerURLs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberUpdateRequest Clone() {
      return new MemberUpdateRequest(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private ulong iD_;
    /// <summary>
    /// ID is the member ID of the member to update.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "peerURLs" field.</summary>
    public const int PeerURLsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_peerURLs_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> peerURLs_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// peerURLs is the new list of URLs the member will use to communicate with the cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PeerURLs {
      get { return peerURLs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemberUpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemberUpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if(!peerURLs_.Equals(other.peerURLs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0UL) hash ^= ID.GetHashCode();
      hash ^= peerURLs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ID);
      }
      peerURLs_.WriteTo(output, _repeated_peerURLs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ID);
      }
      size += peerURLs_.CalculateSize(_repeated_peerURLs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemberUpdateRequest other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0UL) {
        ID = other.ID;
      }
      peerURLs_.Add(other.peerURLs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadUInt64();
            break;
          }
          case 18: {
            peerURLs_.AddEntriesFrom(input, _repeated_peerURLs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MemberUpdateResponse : pb::IMessage<MemberUpdateResponse> {
    private static readonly pb::MessageParser<MemberUpdateResponse> _parser = new pb::MessageParser<MemberUpdateResponse>(() => new MemberUpdateResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemberUpdateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberUpdateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberUpdateResponse(MemberUpdateResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      members_ = other.members_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberUpdateResponse Clone() {
      return new MemberUpdateResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Etcdserverpb.Member> _repeated_members_codec
        = pb::FieldCodec.ForMessage(18, global::Etcdserverpb.Member.Parser);
    private readonly pbc::RepeatedField<global::Etcdserverpb.Member> members_ = new pbc::RepeatedField<global::Etcdserverpb.Member>();
    /// <summary>
    /// members is a list of all members after updating the member.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Etcdserverpb.Member> Members {
      get { return members_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemberUpdateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemberUpdateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!members_.Equals(other.members_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= members_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      members_.WriteTo(output, _repeated_members_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemberUpdateResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      members_.Add(other.members_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MemberListRequest : pb::IMessage<MemberListRequest> {
    private static readonly pb::MessageParser<MemberListRequest> _parser = new pb::MessageParser<MemberListRequest>(() => new MemberListRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemberListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberListRequest(MemberListRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberListRequest Clone() {
      return new MemberListRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemberListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemberListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemberListRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class MemberListResponse : pb::IMessage<MemberListResponse> {
    private static readonly pb::MessageParser<MemberListResponse> _parser = new pb::MessageParser<MemberListResponse>(() => new MemberListResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemberListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberListResponse(MemberListResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      members_ = other.members_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberListResponse Clone() {
      return new MemberListResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Etcdserverpb.Member> _repeated_members_codec
        = pb::FieldCodec.ForMessage(18, global::Etcdserverpb.Member.Parser);
    private readonly pbc::RepeatedField<global::Etcdserverpb.Member> members_ = new pbc::RepeatedField<global::Etcdserverpb.Member>();
    /// <summary>
    /// members is a list of all members associated with the cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Etcdserverpb.Member> Members {
      get { return members_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemberListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemberListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!members_.Equals(other.members_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= members_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      members_.WriteTo(output, _repeated_members_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemberListResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      members_.Add(other.members_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MemberPromoteRequest : pb::IMessage<MemberPromoteRequest> {
    private static readonly pb::MessageParser<MemberPromoteRequest> _parser = new pb::MessageParser<MemberPromoteRequest>(() => new MemberPromoteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemberPromoteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberPromoteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberPromoteRequest(MemberPromoteRequest other) : this() {
      iD_ = other.iD_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberPromoteRequest Clone() {
      return new MemberPromoteRequest(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private ulong iD_;
    /// <summary>
    /// ID is the member ID of the member to promote.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemberPromoteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemberPromoteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0UL) hash ^= ID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemberPromoteRequest other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0UL) {
        ID = other.ID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MemberPromoteResponse : pb::IMessage<MemberPromoteResponse> {
    private static readonly pb::MessageParser<MemberPromoteResponse> _parser = new pb::MessageParser<MemberPromoteResponse>(() => new MemberPromoteResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemberPromoteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberPromoteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberPromoteResponse(MemberPromoteResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      members_ = other.members_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemberPromoteResponse Clone() {
      return new MemberPromoteResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Etcdserverpb.Member> _repeated_members_codec
        = pb::FieldCodec.ForMessage(18, global::Etcdserverpb.Member.Parser);
    private readonly pbc::RepeatedField<global::Etcdserverpb.Member> members_ = new pbc::RepeatedField<global::Etcdserverpb.Member>();
    /// <summary>
    /// members is a list of all members after promoting the member.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Etcdserverpb.Member> Members {
      get { return members_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemberPromoteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemberPromoteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!members_.Equals(other.members_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= members_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      members_.WriteTo(output, _repeated_members_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemberPromoteResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      members_.Add(other.members_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DefragmentRequest : pb::IMessage<DefragmentRequest> {
    private static readonly pb::MessageParser<DefragmentRequest> _parser = new pb::MessageParser<DefragmentRequest>(() => new DefragmentRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DefragmentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefragmentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefragmentRequest(DefragmentRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefragmentRequest Clone() {
      return new DefragmentRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DefragmentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DefragmentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DefragmentRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class DefragmentResponse : pb::IMessage<DefragmentResponse> {
    private static readonly pb::MessageParser<DefragmentResponse> _parser = new pb::MessageParser<DefragmentResponse>(() => new DefragmentResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DefragmentResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefragmentResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefragmentResponse(DefragmentResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DefragmentResponse Clone() {
      return new DefragmentResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DefragmentResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DefragmentResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DefragmentResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MoveLeaderRequest : pb::IMessage<MoveLeaderRequest> {
    private static readonly pb::MessageParser<MoveLeaderRequest> _parser = new pb::MessageParser<MoveLeaderRequest>(() => new MoveLeaderRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveLeaderRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveLeaderRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveLeaderRequest(MoveLeaderRequest other) : this() {
      targetID_ = other.targetID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveLeaderRequest Clone() {
      return new MoveLeaderRequest(this);
    }

    /// <summary>Field number for the "targetID" field.</summary>
    public const int TargetIDFieldNumber = 1;
    private ulong targetID_;
    /// <summary>
    /// targetID is the node ID for the new leader.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TargetID {
      get { return targetID_; }
      set {
        targetID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveLeaderRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveLeaderRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetID != other.TargetID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetID != 0UL) hash ^= TargetID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TargetID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TargetID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveLeaderRequest other) {
      if (other == null) {
        return;
      }
      if (other.TargetID != 0UL) {
        TargetID = other.TargetID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TargetID = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MoveLeaderResponse : pb::IMessage<MoveLeaderResponse> {
    private static readonly pb::MessageParser<MoveLeaderResponse> _parser = new pb::MessageParser<MoveLeaderResponse>(() => new MoveLeaderResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveLeaderResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveLeaderResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveLeaderResponse(MoveLeaderResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveLeaderResponse Clone() {
      return new MoveLeaderResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveLeaderResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveLeaderResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveLeaderResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AlarmRequest : pb::IMessage<AlarmRequest> {
    private static readonly pb::MessageParser<AlarmRequest> _parser = new pb::MessageParser<AlarmRequest>(() => new AlarmRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AlarmRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlarmRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlarmRequest(AlarmRequest other) : this() {
      action_ = other.action_;
      memberID_ = other.memberID_;
      alarm_ = other.alarm_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlarmRequest Clone() {
      return new AlarmRequest(this);
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 1;
    private global::Etcdserverpb.AlarmRequest.Types.AlarmAction action_ = global::Etcdserverpb.AlarmRequest.Types.AlarmAction.Get;
    /// <summary>
    /// action is the kind of alarm request to issue. The action
    /// may GET alarm statuses, ACTIVATE an alarm, or DEACTIVATE a
    /// raised alarm.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.AlarmRequest.Types.AlarmAction Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "memberID" field.</summary>
    public const int MemberIDFieldNumber = 2;
    private ulong memberID_;
    /// <summary>
    /// memberID is the ID of the member associated with the alarm. If memberID is 0, the
    /// alarm request covers all members.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MemberID {
      get { return memberID_; }
      set {
        memberID_ = value;
      }
    }

    /// <summary>Field number for the "alarm" field.</summary>
    public const int AlarmFieldNumber = 3;
    private global::Etcdserverpb.AlarmType alarm_ = global::Etcdserverpb.AlarmType.None;
    /// <summary>
    /// alarm is the type of alarm to consider for this request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.AlarmType Alarm {
      get { return alarm_; }
      set {
        alarm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AlarmRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AlarmRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Action != other.Action) return false;
      if (MemberID != other.MemberID) return false;
      if (Alarm != other.Alarm) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Action != global::Etcdserverpb.AlarmRequest.Types.AlarmAction.Get) hash ^= Action.GetHashCode();
      if (MemberID != 0UL) hash ^= MemberID.GetHashCode();
      if (Alarm != global::Etcdserverpb.AlarmType.None) hash ^= Alarm.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Action != global::Etcdserverpb.AlarmRequest.Types.AlarmAction.Get) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Action);
      }
      if (MemberID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(MemberID);
      }
      if (Alarm != global::Etcdserverpb.AlarmType.None) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Alarm);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Action != global::Etcdserverpb.AlarmRequest.Types.AlarmAction.Get) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
      }
      if (MemberID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MemberID);
      }
      if (Alarm != global::Etcdserverpb.AlarmType.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Alarm);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AlarmRequest other) {
      if (other == null) {
        return;
      }
      if (other.Action != global::Etcdserverpb.AlarmRequest.Types.AlarmAction.Get) {
        Action = other.Action;
      }
      if (other.MemberID != 0UL) {
        MemberID = other.MemberID;
      }
      if (other.Alarm != global::Etcdserverpb.AlarmType.None) {
        Alarm = other.Alarm;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Action = (global::Etcdserverpb.AlarmRequest.Types.AlarmAction) input.ReadEnum();
            break;
          }
          case 16: {
            MemberID = input.ReadUInt64();
            break;
          }
          case 24: {
            Alarm = (global::Etcdserverpb.AlarmType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AlarmRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum AlarmAction {
        [pbr::OriginalName("GET")] Get = 0,
        [pbr::OriginalName("ACTIVATE")] Activate = 1,
        [pbr::OriginalName("DEACTIVATE")] Deactivate = 2,
      }

    }
    #endregion

  }

  public sealed partial class AlarmMember : pb::IMessage<AlarmMember> {
    private static readonly pb::MessageParser<AlarmMember> _parser = new pb::MessageParser<AlarmMember>(() => new AlarmMember());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AlarmMember> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlarmMember() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlarmMember(AlarmMember other) : this() {
      memberID_ = other.memberID_;
      alarm_ = other.alarm_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlarmMember Clone() {
      return new AlarmMember(this);
    }

    /// <summary>Field number for the "memberID" field.</summary>
    public const int MemberIDFieldNumber = 1;
    private ulong memberID_;
    /// <summary>
    /// memberID is the ID of the member associated with the raised alarm.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MemberID {
      get { return memberID_; }
      set {
        memberID_ = value;
      }
    }

    /// <summary>Field number for the "alarm" field.</summary>
    public const int AlarmFieldNumber = 2;
    private global::Etcdserverpb.AlarmType alarm_ = global::Etcdserverpb.AlarmType.None;
    /// <summary>
    /// alarm is the type of alarm which has been raised.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.AlarmType Alarm {
      get { return alarm_; }
      set {
        alarm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AlarmMember);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AlarmMember other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MemberID != other.MemberID) return false;
      if (Alarm != other.Alarm) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MemberID != 0UL) hash ^= MemberID.GetHashCode();
      if (Alarm != global::Etcdserverpb.AlarmType.None) hash ^= Alarm.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MemberID != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MemberID);
      }
      if (Alarm != global::Etcdserverpb.AlarmType.None) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Alarm);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MemberID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MemberID);
      }
      if (Alarm != global::Etcdserverpb.AlarmType.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Alarm);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AlarmMember other) {
      if (other == null) {
        return;
      }
      if (other.MemberID != 0UL) {
        MemberID = other.MemberID;
      }
      if (other.Alarm != global::Etcdserverpb.AlarmType.None) {
        Alarm = other.Alarm;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MemberID = input.ReadUInt64();
            break;
          }
          case 16: {
            Alarm = (global::Etcdserverpb.AlarmType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AlarmResponse : pb::IMessage<AlarmResponse> {
    private static readonly pb::MessageParser<AlarmResponse> _parser = new pb::MessageParser<AlarmResponse>(() => new AlarmResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AlarmResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlarmResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlarmResponse(AlarmResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      alarms_ = other.alarms_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlarmResponse Clone() {
      return new AlarmResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "alarms" field.</summary>
    public const int AlarmsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Etcdserverpb.AlarmMember> _repeated_alarms_codec
        = pb::FieldCodec.ForMessage(18, global::Etcdserverpb.AlarmMember.Parser);
    private readonly pbc::RepeatedField<global::Etcdserverpb.AlarmMember> alarms_ = new pbc::RepeatedField<global::Etcdserverpb.AlarmMember>();
    /// <summary>
    /// alarms is a list of alarms associated with the alarm request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Etcdserverpb.AlarmMember> Alarms {
      get { return alarms_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AlarmResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AlarmResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!alarms_.Equals(other.alarms_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= alarms_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      alarms_.WriteTo(output, _repeated_alarms_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += alarms_.CalculateSize(_repeated_alarms_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AlarmResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      alarms_.Add(other.alarms_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            alarms_.AddEntriesFrom(input, _repeated_alarms_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StatusRequest : pb::IMessage<StatusRequest> {
    private static readonly pb::MessageParser<StatusRequest> _parser = new pb::MessageParser<StatusRequest>(() => new StatusRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusRequest(StatusRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusRequest Clone() {
      return new StatusRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class StatusResponse : pb::IMessage<StatusResponse> {
    private static readonly pb::MessageParser<StatusResponse> _parser = new pb::MessageParser<StatusResponse>(() => new StatusResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatusResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusResponse(StatusResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      version_ = other.version_;
      dbSize_ = other.dbSize_;
      leader_ = other.leader_;
      raftIndex_ = other.raftIndex_;
      raftTerm_ = other.raftTerm_;
      raftAppliedIndex_ = other.raftAppliedIndex_;
      errors_ = other.errors_.Clone();
      dbSizeInUse_ = other.dbSizeInUse_;
      isLearner_ = other.isLearner_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusResponse Clone() {
      return new StatusResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private string version_ = "";
    /// <summary>
    /// version is the cluster protocol version used by the responding member.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dbSize" field.</summary>
    public const int DbSizeFieldNumber = 3;
    private long dbSize_;
    /// <summary>
    /// dbSize is the size of the backend database physically allocated, in bytes, of the responding member.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DbSize {
      get { return dbSize_; }
      set {
        dbSize_ = value;
      }
    }

    /// <summary>Field number for the "leader" field.</summary>
    public const int LeaderFieldNumber = 4;
    private ulong leader_;
    /// <summary>
    /// leader is the member ID which the responding member believes is the current leader.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Leader {
      get { return leader_; }
      set {
        leader_ = value;
      }
    }

    /// <summary>Field number for the "raftIndex" field.</summary>
    public const int RaftIndexFieldNumber = 5;
    private ulong raftIndex_;
    /// <summary>
    /// raftIndex is the current raft committed index of the responding member.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RaftIndex {
      get { return raftIndex_; }
      set {
        raftIndex_ = value;
      }
    }

    /// <summary>Field number for the "raftTerm" field.</summary>
    public const int RaftTermFieldNumber = 6;
    private ulong raftTerm_;
    /// <summary>
    /// raftTerm is the current raft term of the responding member.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RaftTerm {
      get { return raftTerm_; }
      set {
        raftTerm_ = value;
      }
    }

    /// <summary>Field number for the "raftAppliedIndex" field.</summary>
    public const int RaftAppliedIndexFieldNumber = 7;
    private ulong raftAppliedIndex_;
    /// <summary>
    /// raftAppliedIndex is the current raft applied index of the responding member.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RaftAppliedIndex {
      get { return raftAppliedIndex_; }
      set {
        raftAppliedIndex_ = value;
      }
    }

    /// <summary>Field number for the "errors" field.</summary>
    public const int ErrorsFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_errors_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> errors_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// errors contains alarm/health information and status.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Errors {
      get { return errors_; }
    }

    /// <summary>Field number for the "dbSizeInUse" field.</summary>
    public const int DbSizeInUseFieldNumber = 9;
    private long dbSizeInUse_;
    /// <summary>
    /// dbSizeInUse is the size of the backend database logically in use, in bytes, of the responding member.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DbSizeInUse {
      get { return dbSizeInUse_; }
      set {
        dbSizeInUse_ = value;
      }
    }

    /// <summary>Field number for the "isLearner" field.</summary>
    public const int IsLearnerFieldNumber = 10;
    private bool isLearner_;
    /// <summary>
    /// isLearner indicates if the member is raft learner.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLearner {
      get { return isLearner_; }
      set {
        isLearner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatusResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatusResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Version != other.Version) return false;
      if (DbSize != other.DbSize) return false;
      if (Leader != other.Leader) return false;
      if (RaftIndex != other.RaftIndex) return false;
      if (RaftTerm != other.RaftTerm) return false;
      if (RaftAppliedIndex != other.RaftAppliedIndex) return false;
      if(!errors_.Equals(other.errors_)) return false;
      if (DbSizeInUse != other.DbSizeInUse) return false;
      if (IsLearner != other.IsLearner) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (DbSize != 0L) hash ^= DbSize.GetHashCode();
      if (Leader != 0UL) hash ^= Leader.GetHashCode();
      if (RaftIndex != 0UL) hash ^= RaftIndex.GetHashCode();
      if (RaftTerm != 0UL) hash ^= RaftTerm.GetHashCode();
      if (RaftAppliedIndex != 0UL) hash ^= RaftAppliedIndex.GetHashCode();
      hash ^= errors_.GetHashCode();
      if (DbSizeInUse != 0L) hash ^= DbSizeInUse.GetHashCode();
      if (IsLearner != false) hash ^= IsLearner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Version);
      }
      if (DbSize != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(DbSize);
      }
      if (Leader != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Leader);
      }
      if (RaftIndex != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(RaftIndex);
      }
      if (RaftTerm != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(RaftTerm);
      }
      if (RaftAppliedIndex != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(RaftAppliedIndex);
      }
      errors_.WriteTo(output, _repeated_errors_codec);
      if (DbSizeInUse != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(DbSizeInUse);
      }
      if (IsLearner != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsLearner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (DbSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DbSize);
      }
      if (Leader != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Leader);
      }
      if (RaftIndex != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RaftIndex);
      }
      if (RaftTerm != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RaftTerm);
      }
      if (RaftAppliedIndex != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RaftAppliedIndex);
      }
      size += errors_.CalculateSize(_repeated_errors_codec);
      if (DbSizeInUse != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DbSizeInUse);
      }
      if (IsLearner != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatusResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.DbSize != 0L) {
        DbSize = other.DbSize;
      }
      if (other.Leader != 0UL) {
        Leader = other.Leader;
      }
      if (other.RaftIndex != 0UL) {
        RaftIndex = other.RaftIndex;
      }
      if (other.RaftTerm != 0UL) {
        RaftTerm = other.RaftTerm;
      }
      if (other.RaftAppliedIndex != 0UL) {
        RaftAppliedIndex = other.RaftAppliedIndex;
      }
      errors_.Add(other.errors_);
      if (other.DbSizeInUse != 0L) {
        DbSizeInUse = other.DbSizeInUse;
      }
      if (other.IsLearner != false) {
        IsLearner = other.IsLearner;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            Version = input.ReadString();
            break;
          }
          case 24: {
            DbSize = input.ReadInt64();
            break;
          }
          case 32: {
            Leader = input.ReadUInt64();
            break;
          }
          case 40: {
            RaftIndex = input.ReadUInt64();
            break;
          }
          case 48: {
            RaftTerm = input.ReadUInt64();
            break;
          }
          case 56: {
            RaftAppliedIndex = input.ReadUInt64();
            break;
          }
          case 66: {
            errors_.AddEntriesFrom(input, _repeated_errors_codec);
            break;
          }
          case 72: {
            DbSizeInUse = input.ReadInt64();
            break;
          }
          case 80: {
            IsLearner = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthEnableRequest : pb::IMessage<AuthEnableRequest> {
    private static readonly pb::MessageParser<AuthEnableRequest> _parser = new pb::MessageParser<AuthEnableRequest>(() => new AuthEnableRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthEnableRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthEnableRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthEnableRequest(AuthEnableRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthEnableRequest Clone() {
      return new AuthEnableRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthEnableRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthEnableRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthEnableRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class AuthDisableRequest : pb::IMessage<AuthDisableRequest> {
    private static readonly pb::MessageParser<AuthDisableRequest> _parser = new pb::MessageParser<AuthDisableRequest>(() => new AuthDisableRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthDisableRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthDisableRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthDisableRequest(AuthDisableRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthDisableRequest Clone() {
      return new AuthDisableRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthDisableRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthDisableRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthDisableRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class AuthenticateRequest : pb::IMessage<AuthenticateRequest> {
    private static readonly pb::MessageParser<AuthenticateRequest> _parser = new pb::MessageParser<AuthenticateRequest>(() => new AuthenticateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthenticateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateRequest(AuthenticateRequest other) : this() {
      name_ = other.name_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateRequest Clone() {
      return new AuthenticateRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthenticateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthenticateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthenticateRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthUserAddRequest : pb::IMessage<AuthUserAddRequest> {
    private static readonly pb::MessageParser<AuthUserAddRequest> _parser = new pb::MessageParser<AuthUserAddRequest>(() => new AuthUserAddRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthUserAddRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserAddRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserAddRequest(AuthUserAddRequest other) : this() {
      name_ = other.name_;
      password_ = other.password_;
      options_ = other.options_ != null ? other.options_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserAddRequest Clone() {
      return new AuthUserAddRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 3;
    private global::Authpb.UserAddOptions options_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authpb.UserAddOptions Options {
      get { return options_; }
      set {
        options_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthUserAddRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthUserAddRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Password != other.Password) return false;
      if (!object.Equals(Options, other.Options)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (options_ != null) hash ^= Options.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (options_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (options_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Options);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthUserAddRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.options_ != null) {
        if (options_ == null) {
          Options = new global::Authpb.UserAddOptions();
        }
        Options.MergeFrom(other.Options);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 26: {
            if (options_ == null) {
              Options = new global::Authpb.UserAddOptions();
            }
            input.ReadMessage(Options);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthUserGetRequest : pb::IMessage<AuthUserGetRequest> {
    private static readonly pb::MessageParser<AuthUserGetRequest> _parser = new pb::MessageParser<AuthUserGetRequest>(() => new AuthUserGetRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthUserGetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserGetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserGetRequest(AuthUserGetRequest other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserGetRequest Clone() {
      return new AuthUserGetRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthUserGetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthUserGetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthUserGetRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthUserDeleteRequest : pb::IMessage<AuthUserDeleteRequest> {
    private static readonly pb::MessageParser<AuthUserDeleteRequest> _parser = new pb::MessageParser<AuthUserDeleteRequest>(() => new AuthUserDeleteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthUserDeleteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserDeleteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserDeleteRequest(AuthUserDeleteRequest other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserDeleteRequest Clone() {
      return new AuthUserDeleteRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// name is the name of the user to delete.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthUserDeleteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthUserDeleteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthUserDeleteRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthUserChangePasswordRequest : pb::IMessage<AuthUserChangePasswordRequest> {
    private static readonly pb::MessageParser<AuthUserChangePasswordRequest> _parser = new pb::MessageParser<AuthUserChangePasswordRequest>(() => new AuthUserChangePasswordRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthUserChangePasswordRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserChangePasswordRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserChangePasswordRequest(AuthUserChangePasswordRequest other) : this() {
      name_ = other.name_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserChangePasswordRequest Clone() {
      return new AuthUserChangePasswordRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// name is the name of the user whose password is being changed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    /// <summary>
    /// password is the new password for the user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthUserChangePasswordRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthUserChangePasswordRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthUserChangePasswordRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthUserGrantRoleRequest : pb::IMessage<AuthUserGrantRoleRequest> {
    private static readonly pb::MessageParser<AuthUserGrantRoleRequest> _parser = new pb::MessageParser<AuthUserGrantRoleRequest>(() => new AuthUserGrantRoleRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthUserGrantRoleRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserGrantRoleRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserGrantRoleRequest(AuthUserGrantRoleRequest other) : this() {
      user_ = other.user_;
      role_ = other.role_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserGrantRoleRequest Clone() {
      return new AuthUserGrantRoleRequest(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private string user_ = "";
    /// <summary>
    /// user is the name of the user which should be granted a given role.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string User {
      get { return user_; }
      set {
        user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 2;
    private string role_ = "";
    /// <summary>
    /// role is the name of the role to grant to the user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Role {
      get { return role_; }
      set {
        role_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthUserGrantRoleRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthUserGrantRoleRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (User != other.User) return false;
      if (Role != other.Role) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (User.Length != 0) hash ^= User.GetHashCode();
      if (Role.Length != 0) hash ^= Role.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (User.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(User);
      }
      if (Role.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Role);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (User.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
      }
      if (Role.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Role);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthUserGrantRoleRequest other) {
      if (other == null) {
        return;
      }
      if (other.User.Length != 0) {
        User = other.User;
      }
      if (other.Role.Length != 0) {
        Role = other.Role;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            User = input.ReadString();
            break;
          }
          case 18: {
            Role = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthUserRevokeRoleRequest : pb::IMessage<AuthUserRevokeRoleRequest> {
    private static readonly pb::MessageParser<AuthUserRevokeRoleRequest> _parser = new pb::MessageParser<AuthUserRevokeRoleRequest>(() => new AuthUserRevokeRoleRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthUserRevokeRoleRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserRevokeRoleRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserRevokeRoleRequest(AuthUserRevokeRoleRequest other) : this() {
      name_ = other.name_;
      role_ = other.role_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserRevokeRoleRequest Clone() {
      return new AuthUserRevokeRoleRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 2;
    private string role_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Role {
      get { return role_; }
      set {
        role_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthUserRevokeRoleRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthUserRevokeRoleRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Role != other.Role) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Role.Length != 0) hash ^= Role.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Role.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Role);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Role.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Role);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthUserRevokeRoleRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Role.Length != 0) {
        Role = other.Role;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Role = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthRoleAddRequest : pb::IMessage<AuthRoleAddRequest> {
    private static readonly pb::MessageParser<AuthRoleAddRequest> _parser = new pb::MessageParser<AuthRoleAddRequest>(() => new AuthRoleAddRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthRoleAddRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRoleAddRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRoleAddRequest(AuthRoleAddRequest other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRoleAddRequest Clone() {
      return new AuthRoleAddRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// name is the name of the role to add to the authentication system.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthRoleAddRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthRoleAddRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthRoleAddRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthRoleGetRequest : pb::IMessage<AuthRoleGetRequest> {
    private static readonly pb::MessageParser<AuthRoleGetRequest> _parser = new pb::MessageParser<AuthRoleGetRequest>(() => new AuthRoleGetRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthRoleGetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRoleGetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRoleGetRequest(AuthRoleGetRequest other) : this() {
      role_ = other.role_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRoleGetRequest Clone() {
      return new AuthRoleGetRequest(this);
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 1;
    private string role_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Role {
      get { return role_; }
      set {
        role_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthRoleGetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthRoleGetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Role != other.Role) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Role.Length != 0) hash ^= Role.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Role.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Role);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Role.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Role);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthRoleGetRequest other) {
      if (other == null) {
        return;
      }
      if (other.Role.Length != 0) {
        Role = other.Role;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Role = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthUserListRequest : pb::IMessage<AuthUserListRequest> {
    private static readonly pb::MessageParser<AuthUserListRequest> _parser = new pb::MessageParser<AuthUserListRequest>(() => new AuthUserListRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthUserListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserListRequest(AuthUserListRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserListRequest Clone() {
      return new AuthUserListRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthUserListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthUserListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthUserListRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class AuthRoleListRequest : pb::IMessage<AuthRoleListRequest> {
    private static readonly pb::MessageParser<AuthRoleListRequest> _parser = new pb::MessageParser<AuthRoleListRequest>(() => new AuthRoleListRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthRoleListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRoleListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRoleListRequest(AuthRoleListRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRoleListRequest Clone() {
      return new AuthRoleListRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthRoleListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthRoleListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthRoleListRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class AuthRoleDeleteRequest : pb::IMessage<AuthRoleDeleteRequest> {
    private static readonly pb::MessageParser<AuthRoleDeleteRequest> _parser = new pb::MessageParser<AuthRoleDeleteRequest>(() => new AuthRoleDeleteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthRoleDeleteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRoleDeleteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRoleDeleteRequest(AuthRoleDeleteRequest other) : this() {
      role_ = other.role_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRoleDeleteRequest Clone() {
      return new AuthRoleDeleteRequest(this);
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 1;
    private string role_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Role {
      get { return role_; }
      set {
        role_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthRoleDeleteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthRoleDeleteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Role != other.Role) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Role.Length != 0) hash ^= Role.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Role.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Role);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Role.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Role);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthRoleDeleteRequest other) {
      if (other == null) {
        return;
      }
      if (other.Role.Length != 0) {
        Role = other.Role;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Role = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthRoleGrantPermissionRequest : pb::IMessage<AuthRoleGrantPermissionRequest> {
    private static readonly pb::MessageParser<AuthRoleGrantPermissionRequest> _parser = new pb::MessageParser<AuthRoleGrantPermissionRequest>(() => new AuthRoleGrantPermissionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthRoleGrantPermissionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRoleGrantPermissionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRoleGrantPermissionRequest(AuthRoleGrantPermissionRequest other) : this() {
      name_ = other.name_;
      perm_ = other.perm_ != null ? other.perm_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRoleGrantPermissionRequest Clone() {
      return new AuthRoleGrantPermissionRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// name is the name of the role which will be granted the permission.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "perm" field.</summary>
    public const int PermFieldNumber = 2;
    private global::Authpb.Permission perm_;
    /// <summary>
    /// perm is the permission to grant to the role.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Authpb.Permission Perm {
      get { return perm_; }
      set {
        perm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthRoleGrantPermissionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthRoleGrantPermissionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Perm, other.Perm)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (perm_ != null) hash ^= Perm.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (perm_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Perm);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (perm_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Perm);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthRoleGrantPermissionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.perm_ != null) {
        if (perm_ == null) {
          Perm = new global::Authpb.Permission();
        }
        Perm.MergeFrom(other.Perm);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (perm_ == null) {
              Perm = new global::Authpb.Permission();
            }
            input.ReadMessage(Perm);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthRoleRevokePermissionRequest : pb::IMessage<AuthRoleRevokePermissionRequest> {
    private static readonly pb::MessageParser<AuthRoleRevokePermissionRequest> _parser = new pb::MessageParser<AuthRoleRevokePermissionRequest>(() => new AuthRoleRevokePermissionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthRoleRevokePermissionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRoleRevokePermissionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRoleRevokePermissionRequest(AuthRoleRevokePermissionRequest other) : this() {
      role_ = other.role_;
      key_ = other.key_;
      rangeEnd_ = other.rangeEnd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRoleRevokePermissionRequest Clone() {
      return new AuthRoleRevokePermissionRequest(this);
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 1;
    private string role_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Role {
      get { return role_; }
      set {
        role_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private pb::ByteString key_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "range_end" field.</summary>
    public const int RangeEndFieldNumber = 3;
    private pb::ByteString rangeEnd_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RangeEnd {
      get { return rangeEnd_; }
      set {
        rangeEnd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthRoleRevokePermissionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthRoleRevokePermissionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Role != other.Role) return false;
      if (Key != other.Key) return false;
      if (RangeEnd != other.RangeEnd) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Role.Length != 0) hash ^= Role.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (RangeEnd.Length != 0) hash ^= RangeEnd.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Role.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Role);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Key);
      }
      if (RangeEnd.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(RangeEnd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Role.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Role);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Key);
      }
      if (RangeEnd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RangeEnd);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthRoleRevokePermissionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Role.Length != 0) {
        Role = other.Role;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.RangeEnd.Length != 0) {
        RangeEnd = other.RangeEnd;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Role = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadBytes();
            break;
          }
          case 26: {
            RangeEnd = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthEnableResponse : pb::IMessage<AuthEnableResponse> {
    private static readonly pb::MessageParser<AuthEnableResponse> _parser = new pb::MessageParser<AuthEnableResponse>(() => new AuthEnableResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthEnableResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthEnableResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthEnableResponse(AuthEnableResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthEnableResponse Clone() {
      return new AuthEnableResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthEnableResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthEnableResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthEnableResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthDisableResponse : pb::IMessage<AuthDisableResponse> {
    private static readonly pb::MessageParser<AuthDisableResponse> _parser = new pb::MessageParser<AuthDisableResponse>(() => new AuthDisableResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthDisableResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthDisableResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthDisableResponse(AuthDisableResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthDisableResponse Clone() {
      return new AuthDisableResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthDisableResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthDisableResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthDisableResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthenticateResponse : pb::IMessage<AuthenticateResponse> {
    private static readonly pb::MessageParser<AuthenticateResponse> _parser = new pb::MessageParser<AuthenticateResponse>(() => new AuthenticateResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthenticateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateResponse(AuthenticateResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      token_ = other.token_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthenticateResponse Clone() {
      return new AuthenticateResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    /// <summary>
    /// token is an authorized token that can be used in succeeding RPCs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthenticateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthenticateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Token != other.Token) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthenticateResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthUserAddResponse : pb::IMessage<AuthUserAddResponse> {
    private static readonly pb::MessageParser<AuthUserAddResponse> _parser = new pb::MessageParser<AuthUserAddResponse>(() => new AuthUserAddResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthUserAddResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserAddResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserAddResponse(AuthUserAddResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserAddResponse Clone() {
      return new AuthUserAddResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthUserAddResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthUserAddResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthUserAddResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthUserGetResponse : pb::IMessage<AuthUserGetResponse> {
    private static readonly pb::MessageParser<AuthUserGetResponse> _parser = new pb::MessageParser<AuthUserGetResponse>(() => new AuthUserGetResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthUserGetResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserGetResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserGetResponse(AuthUserGetResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      roles_ = other.roles_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserGetResponse Clone() {
      return new AuthUserGetResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "roles" field.</summary>
    public const int RolesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_roles_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> roles_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Roles {
      get { return roles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthUserGetResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthUserGetResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!roles_.Equals(other.roles_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= roles_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      roles_.WriteTo(output, _repeated_roles_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += roles_.CalculateSize(_repeated_roles_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthUserGetResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      roles_.Add(other.roles_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            roles_.AddEntriesFrom(input, _repeated_roles_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthUserDeleteResponse : pb::IMessage<AuthUserDeleteResponse> {
    private static readonly pb::MessageParser<AuthUserDeleteResponse> _parser = new pb::MessageParser<AuthUserDeleteResponse>(() => new AuthUserDeleteResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthUserDeleteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserDeleteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserDeleteResponse(AuthUserDeleteResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserDeleteResponse Clone() {
      return new AuthUserDeleteResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthUserDeleteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthUserDeleteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthUserDeleteResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthUserChangePasswordResponse : pb::IMessage<AuthUserChangePasswordResponse> {
    private static readonly pb::MessageParser<AuthUserChangePasswordResponse> _parser = new pb::MessageParser<AuthUserChangePasswordResponse>(() => new AuthUserChangePasswordResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthUserChangePasswordResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserChangePasswordResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserChangePasswordResponse(AuthUserChangePasswordResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserChangePasswordResponse Clone() {
      return new AuthUserChangePasswordResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthUserChangePasswordResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthUserChangePasswordResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthUserChangePasswordResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthUserGrantRoleResponse : pb::IMessage<AuthUserGrantRoleResponse> {
    private static readonly pb::MessageParser<AuthUserGrantRoleResponse> _parser = new pb::MessageParser<AuthUserGrantRoleResponse>(() => new AuthUserGrantRoleResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthUserGrantRoleResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserGrantRoleResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserGrantRoleResponse(AuthUserGrantRoleResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserGrantRoleResponse Clone() {
      return new AuthUserGrantRoleResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthUserGrantRoleResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthUserGrantRoleResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthUserGrantRoleResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthUserRevokeRoleResponse : pb::IMessage<AuthUserRevokeRoleResponse> {
    private static readonly pb::MessageParser<AuthUserRevokeRoleResponse> _parser = new pb::MessageParser<AuthUserRevokeRoleResponse>(() => new AuthUserRevokeRoleResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthUserRevokeRoleResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserRevokeRoleResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserRevokeRoleResponse(AuthUserRevokeRoleResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserRevokeRoleResponse Clone() {
      return new AuthUserRevokeRoleResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthUserRevokeRoleResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthUserRevokeRoleResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthUserRevokeRoleResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthRoleAddResponse : pb::IMessage<AuthRoleAddResponse> {
    private static readonly pb::MessageParser<AuthRoleAddResponse> _parser = new pb::MessageParser<AuthRoleAddResponse>(() => new AuthRoleAddResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthRoleAddResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRoleAddResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRoleAddResponse(AuthRoleAddResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRoleAddResponse Clone() {
      return new AuthRoleAddResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthRoleAddResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthRoleAddResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthRoleAddResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthRoleGetResponse : pb::IMessage<AuthRoleGetResponse> {
    private static readonly pb::MessageParser<AuthRoleGetResponse> _parser = new pb::MessageParser<AuthRoleGetResponse>(() => new AuthRoleGetResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthRoleGetResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRoleGetResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRoleGetResponse(AuthRoleGetResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      perm_ = other.perm_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRoleGetResponse Clone() {
      return new AuthRoleGetResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "perm" field.</summary>
    public const int PermFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Authpb.Permission> _repeated_perm_codec
        = pb::FieldCodec.ForMessage(18, global::Authpb.Permission.Parser);
    private readonly pbc::RepeatedField<global::Authpb.Permission> perm_ = new pbc::RepeatedField<global::Authpb.Permission>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Authpb.Permission> Perm {
      get { return perm_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthRoleGetResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthRoleGetResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!perm_.Equals(other.perm_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= perm_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      perm_.WriteTo(output, _repeated_perm_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += perm_.CalculateSize(_repeated_perm_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthRoleGetResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      perm_.Add(other.perm_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            perm_.AddEntriesFrom(input, _repeated_perm_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthRoleListResponse : pb::IMessage<AuthRoleListResponse> {
    private static readonly pb::MessageParser<AuthRoleListResponse> _parser = new pb::MessageParser<AuthRoleListResponse>(() => new AuthRoleListResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthRoleListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRoleListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRoleListResponse(AuthRoleListResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      roles_ = other.roles_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRoleListResponse Clone() {
      return new AuthRoleListResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "roles" field.</summary>
    public const int RolesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_roles_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> roles_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Roles {
      get { return roles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthRoleListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthRoleListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!roles_.Equals(other.roles_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= roles_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      roles_.WriteTo(output, _repeated_roles_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += roles_.CalculateSize(_repeated_roles_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthRoleListResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      roles_.Add(other.roles_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            roles_.AddEntriesFrom(input, _repeated_roles_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthUserListResponse : pb::IMessage<AuthUserListResponse> {
    private static readonly pb::MessageParser<AuthUserListResponse> _parser = new pb::MessageParser<AuthUserListResponse>(() => new AuthUserListResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthUserListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserListResponse(AuthUserListResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      users_ = other.users_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthUserListResponse Clone() {
      return new AuthUserListResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_users_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> users_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Users {
      get { return users_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthUserListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthUserListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if(!users_.Equals(other.users_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      hash ^= users_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      users_.WriteTo(output, _repeated_users_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      size += users_.CalculateSize(_repeated_users_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthUserListResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      users_.Add(other.users_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            users_.AddEntriesFrom(input, _repeated_users_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthRoleDeleteResponse : pb::IMessage<AuthRoleDeleteResponse> {
    private static readonly pb::MessageParser<AuthRoleDeleteResponse> _parser = new pb::MessageParser<AuthRoleDeleteResponse>(() => new AuthRoleDeleteResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthRoleDeleteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRoleDeleteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRoleDeleteResponse(AuthRoleDeleteResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRoleDeleteResponse Clone() {
      return new AuthRoleDeleteResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthRoleDeleteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthRoleDeleteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthRoleDeleteResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthRoleGrantPermissionResponse : pb::IMessage<AuthRoleGrantPermissionResponse> {
    private static readonly pb::MessageParser<AuthRoleGrantPermissionResponse> _parser = new pb::MessageParser<AuthRoleGrantPermissionResponse>(() => new AuthRoleGrantPermissionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthRoleGrantPermissionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRoleGrantPermissionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRoleGrantPermissionResponse(AuthRoleGrantPermissionResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRoleGrantPermissionResponse Clone() {
      return new AuthRoleGrantPermissionResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthRoleGrantPermissionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthRoleGrantPermissionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthRoleGrantPermissionResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthRoleRevokePermissionResponse : pb::IMessage<AuthRoleRevokePermissionResponse> {
    private static readonly pb::MessageParser<AuthRoleRevokePermissionResponse> _parser = new pb::MessageParser<AuthRoleRevokePermissionResponse>(() => new AuthRoleRevokePermissionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AuthRoleRevokePermissionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.RpcReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRoleRevokePermissionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRoleRevokePermissionResponse(AuthRoleRevokePermissionResponse other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AuthRoleRevokePermissionResponse Clone() {
      return new AuthRoleRevokePermissionResponse(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Etcdserverpb.ResponseHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Etcdserverpb.ResponseHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AuthRoleRevokePermissionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AuthRoleRevokePermissionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AuthRoleRevokePermissionResponse other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Etcdserverpb.ResponseHeader();
        }
        Header.MergeFrom(other.Header);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Etcdserverpb.ResponseHeader();
            }
            input.ReadMessage(Header);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
