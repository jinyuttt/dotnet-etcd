// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: etcdserver.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Etcdserverpb {

  /// <summary>Holder for reflection information generated from etcdserver.proto</summary>
  public static partial class EtcdserverReflection {

    #region Descriptor
    /// <summary>File descriptor for etcdserver.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EtcdserverReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBldGNkc2VydmVyLnByb3RvEgxldGNkc2VydmVycGIaCmdvZ28ucHJvdG8i",
            "/wIKB1JlcXVlc3QSEAoCSUQYASABKARCBMjeHwASFAoGTWV0aG9kGAIgASgJ",
            "QgTI3h8AEhIKBFBhdGgYAyABKAlCBMjeHwASEQoDVmFsGAQgASgJQgTI3h8A",
            "EhEKA0RpchgFIAEoCEIEyN4fABIXCglQcmV2VmFsdWUYBiABKAlCBMjeHwAS",
            "FwoJUHJldkluZGV4GAcgASgEQgTI3h8AEhcKCVByZXZFeGlzdBgIIAEoCEIE",
            "yN4fARIYCgpFeHBpcmF0aW9uGAkgASgDQgTI3h8AEhIKBFdhaXQYCiABKAhC",
            "BMjeHwASEwoFU2luY2UYCyABKARCBMjeHwASFwoJUmVjdXJzaXZlGAwgASgI",
            "QgTI3h8AEhQKBlNvcnRlZBgNIAEoCEIEyN4fABIUCgZRdW9ydW0YDiABKAhC",
            "BMjeHwASEgoEVGltZRgPIAEoA0IEyN4fABIUCgZTdHJlYW0YECABKAhCBMje",
            "HwASFQoHUmVmcmVzaBgRIAEoCEIEyN4fASI5CghNZXRhZGF0YRIUCgZOb2Rl",
            "SUQYASABKARCBMjeHwASFwoJQ2x1c3RlcklEGAIgASgEQgTI3h8AQhDI4h4B",
            "4OIeAdDiHgHI4R4A"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Gogoproto.GogoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.Request), global::Etcdserverpb.Request.Parser, new[]{ "ID", "Method", "Path", "Val", "Dir", "PrevValue", "PrevIndex", "PrevExist", "Expiration", "Wait", "Since", "Recursive", "Sorted", "Quorum", "Time", "Stream", "Refresh" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Etcdserverpb.Metadata), global::Etcdserverpb.Metadata.Parser, new[]{ "NodeID", "ClusterID" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Request : pb::IMessage<Request> {
    private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.EtcdserverReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request(Request other) : this() {
      _hasBits0 = other._hasBits0;
      iD_ = other.iD_;
      method_ = other.method_;
      path_ = other.path_;
      val_ = other.val_;
      dir_ = other.dir_;
      prevValue_ = other.prevValue_;
      prevIndex_ = other.prevIndex_;
      prevExist_ = other.prevExist_;
      expiration_ = other.expiration_;
      wait_ = other.wait_;
      since_ = other.since_;
      recursive_ = other.recursive_;
      sorted_ = other.sorted_;
      quorum_ = other.quorum_;
      time_ = other.time_;
      stream_ = other.stream_;
      refresh_ = other.refresh_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request Clone() {
      return new Request(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private readonly static ulong IDDefaultValue = 0UL;

    private ulong iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ID {
      get { if ((_hasBits0 & 1) != 0) { return iD_; } else { return IDDefaultValue; } }
      set {
        _hasBits0 |= 1;
        iD_ = value;
      }
    }
    /// <summary>Gets whether the "ID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasID {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearID() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "Method" field.</summary>
    public const int MethodFieldNumber = 2;
    private readonly static string MethodDefaultValue = "";

    private string method_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Method {
      get { return method_ ?? MethodDefaultValue; }
      set {
        method_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Method" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMethod {
      get { return method_ != null; }
    }
    /// <summary>Clears the value of the "Method" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMethod() {
      method_ = null;
    }

    /// <summary>Field number for the "Path" field.</summary>
    public const int PathFieldNumber = 3;
    private readonly static string PathDefaultValue = "";

    private string path_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_ ?? PathDefaultValue; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Path" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPath {
      get { return path_ != null; }
    }
    /// <summary>Clears the value of the "Path" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPath() {
      path_ = null;
    }

    /// <summary>Field number for the "Val" field.</summary>
    public const int ValFieldNumber = 4;
    private readonly static string ValDefaultValue = "";

    private string val_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Val {
      get { return val_ ?? ValDefaultValue; }
      set {
        val_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Val" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVal {
      get { return val_ != null; }
    }
    /// <summary>Clears the value of the "Val" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVal() {
      val_ = null;
    }

    /// <summary>Field number for the "Dir" field.</summary>
    public const int DirFieldNumber = 5;
    private readonly static bool DirDefaultValue = false;

    private bool dir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Dir {
      get { if ((_hasBits0 & 2) != 0) { return dir_; } else { return DirDefaultValue; } }
      set {
        _hasBits0 |= 2;
        dir_ = value;
      }
    }
    /// <summary>Gets whether the "Dir" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDir {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "Dir" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDir() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "PrevValue" field.</summary>
    public const int PrevValueFieldNumber = 6;
    private readonly static string PrevValueDefaultValue = "";

    private string prevValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrevValue {
      get { return prevValue_ ?? PrevValueDefaultValue; }
      set {
        prevValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "PrevValue" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrevValue {
      get { return prevValue_ != null; }
    }
    /// <summary>Clears the value of the "PrevValue" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrevValue() {
      prevValue_ = null;
    }

    /// <summary>Field number for the "PrevIndex" field.</summary>
    public const int PrevIndexFieldNumber = 7;
    private readonly static ulong PrevIndexDefaultValue = 0UL;

    private ulong prevIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PrevIndex {
      get { if ((_hasBits0 & 4) != 0) { return prevIndex_; } else { return PrevIndexDefaultValue; } }
      set {
        _hasBits0 |= 4;
        prevIndex_ = value;
      }
    }
    /// <summary>Gets whether the "PrevIndex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrevIndex {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "PrevIndex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrevIndex() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "PrevExist" field.</summary>
    public const int PrevExistFieldNumber = 8;
    private readonly static bool PrevExistDefaultValue = false;

    private bool prevExist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PrevExist {
      get { if ((_hasBits0 & 8) != 0) { return prevExist_; } else { return PrevExistDefaultValue; } }
      set {
        _hasBits0 |= 8;
        prevExist_ = value;
      }
    }
    /// <summary>Gets whether the "PrevExist" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrevExist {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "PrevExist" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrevExist() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "Expiration" field.</summary>
    public const int ExpirationFieldNumber = 9;
    private readonly static long ExpirationDefaultValue = 0L;

    private long expiration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Expiration {
      get { if ((_hasBits0 & 16) != 0) { return expiration_; } else { return ExpirationDefaultValue; } }
      set {
        _hasBits0 |= 16;
        expiration_ = value;
      }
    }
    /// <summary>Gets whether the "Expiration" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasExpiration {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "Expiration" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearExpiration() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "Wait" field.</summary>
    public const int WaitFieldNumber = 10;
    private readonly static bool WaitDefaultValue = false;

    private bool wait_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Wait {
      get { if ((_hasBits0 & 32) != 0) { return wait_; } else { return WaitDefaultValue; } }
      set {
        _hasBits0 |= 32;
        wait_ = value;
      }
    }
    /// <summary>Gets whether the "Wait" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasWait {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "Wait" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWait() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "Since" field.</summary>
    public const int SinceFieldNumber = 11;
    private readonly static ulong SinceDefaultValue = 0UL;

    private ulong since_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Since {
      get { if ((_hasBits0 & 64) != 0) { return since_; } else { return SinceDefaultValue; } }
      set {
        _hasBits0 |= 64;
        since_ = value;
      }
    }
    /// <summary>Gets whether the "Since" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSince {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "Since" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSince() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "Recursive" field.</summary>
    public const int RecursiveFieldNumber = 12;
    private readonly static bool RecursiveDefaultValue = false;

    private bool recursive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Recursive {
      get { if ((_hasBits0 & 128) != 0) { return recursive_; } else { return RecursiveDefaultValue; } }
      set {
        _hasBits0 |= 128;
        recursive_ = value;
      }
    }
    /// <summary>Gets whether the "Recursive" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRecursive {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "Recursive" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRecursive() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "Sorted" field.</summary>
    public const int SortedFieldNumber = 13;
    private readonly static bool SortedDefaultValue = false;

    private bool sorted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Sorted {
      get { if ((_hasBits0 & 256) != 0) { return sorted_; } else { return SortedDefaultValue; } }
      set {
        _hasBits0 |= 256;
        sorted_ = value;
      }
    }
    /// <summary>Gets whether the "Sorted" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSorted {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "Sorted" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSorted() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "Quorum" field.</summary>
    public const int QuorumFieldNumber = 14;
    private readonly static bool QuorumDefaultValue = false;

    private bool quorum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Quorum {
      get { if ((_hasBits0 & 512) != 0) { return quorum_; } else { return QuorumDefaultValue; } }
      set {
        _hasBits0 |= 512;
        quorum_ = value;
      }
    }
    /// <summary>Gets whether the "Quorum" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasQuorum {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "Quorum" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuorum() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "Time" field.</summary>
    public const int TimeFieldNumber = 15;
    private readonly static long TimeDefaultValue = 0L;

    private long time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { if ((_hasBits0 & 1024) != 0) { return time_; } else { return TimeDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        time_ = value;
      }
    }
    /// <summary>Gets whether the "Time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTime {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "Time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTime() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "Stream" field.</summary>
    public const int StreamFieldNumber = 16;
    private readonly static bool StreamDefaultValue = false;

    private bool stream_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Stream {
      get { if ((_hasBits0 & 2048) != 0) { return stream_; } else { return StreamDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        stream_ = value;
      }
    }
    /// <summary>Gets whether the "Stream" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStream {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "Stream" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStream() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "Refresh" field.</summary>
    public const int RefreshFieldNumber = 17;
    private readonly static bool RefreshDefaultValue = false;

    private bool refresh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Refresh {
      get { if ((_hasBits0 & 4096) != 0) { return refresh_; } else { return RefreshDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        refresh_ = value;
      }
    }
    /// <summary>Gets whether the "Refresh" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRefresh {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "Refresh" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRefresh() {
      _hasBits0 &= ~4096;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Method != other.Method) return false;
      if (Path != other.Path) return false;
      if (Val != other.Val) return false;
      if (Dir != other.Dir) return false;
      if (PrevValue != other.PrevValue) return false;
      if (PrevIndex != other.PrevIndex) return false;
      if (PrevExist != other.PrevExist) return false;
      if (Expiration != other.Expiration) return false;
      if (Wait != other.Wait) return false;
      if (Since != other.Since) return false;
      if (Recursive != other.Recursive) return false;
      if (Sorted != other.Sorted) return false;
      if (Quorum != other.Quorum) return false;
      if (Time != other.Time) return false;
      if (Stream != other.Stream) return false;
      if (Refresh != other.Refresh) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasID) hash ^= ID.GetHashCode();
      if (HasMethod) hash ^= Method.GetHashCode();
      if (HasPath) hash ^= Path.GetHashCode();
      if (HasVal) hash ^= Val.GetHashCode();
      if (HasDir) hash ^= Dir.GetHashCode();
      if (HasPrevValue) hash ^= PrevValue.GetHashCode();
      if (HasPrevIndex) hash ^= PrevIndex.GetHashCode();
      if (HasPrevExist) hash ^= PrevExist.GetHashCode();
      if (HasExpiration) hash ^= Expiration.GetHashCode();
      if (HasWait) hash ^= Wait.GetHashCode();
      if (HasSince) hash ^= Since.GetHashCode();
      if (HasRecursive) hash ^= Recursive.GetHashCode();
      if (HasSorted) hash ^= Sorted.GetHashCode();
      if (HasQuorum) hash ^= Quorum.GetHashCode();
      if (HasTime) hash ^= Time.GetHashCode();
      if (HasStream) hash ^= Stream.GetHashCode();
      if (HasRefresh) hash ^= Refresh.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasID) {
        output.WriteRawTag(8);
        output.WriteUInt64(ID);
      }
      if (HasMethod) {
        output.WriteRawTag(18);
        output.WriteString(Method);
      }
      if (HasPath) {
        output.WriteRawTag(26);
        output.WriteString(Path);
      }
      if (HasVal) {
        output.WriteRawTag(34);
        output.WriteString(Val);
      }
      if (HasDir) {
        output.WriteRawTag(40);
        output.WriteBool(Dir);
      }
      if (HasPrevValue) {
        output.WriteRawTag(50);
        output.WriteString(PrevValue);
      }
      if (HasPrevIndex) {
        output.WriteRawTag(56);
        output.WriteUInt64(PrevIndex);
      }
      if (HasPrevExist) {
        output.WriteRawTag(64);
        output.WriteBool(PrevExist);
      }
      if (HasExpiration) {
        output.WriteRawTag(72);
        output.WriteInt64(Expiration);
      }
      if (HasWait) {
        output.WriteRawTag(80);
        output.WriteBool(Wait);
      }
      if (HasSince) {
        output.WriteRawTag(88);
        output.WriteUInt64(Since);
      }
      if (HasRecursive) {
        output.WriteRawTag(96);
        output.WriteBool(Recursive);
      }
      if (HasSorted) {
        output.WriteRawTag(104);
        output.WriteBool(Sorted);
      }
      if (HasQuorum) {
        output.WriteRawTag(112);
        output.WriteBool(Quorum);
      }
      if (HasTime) {
        output.WriteRawTag(120);
        output.WriteInt64(Time);
      }
      if (HasStream) {
        output.WriteRawTag(128, 1);
        output.WriteBool(Stream);
      }
      if (HasRefresh) {
        output.WriteRawTag(136, 1);
        output.WriteBool(Refresh);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasID) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ID);
      }
      if (HasMethod) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Method);
      }
      if (HasPath) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (HasVal) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Val);
      }
      if (HasDir) {
        size += 1 + 1;
      }
      if (HasPrevValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrevValue);
      }
      if (HasPrevIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PrevIndex);
      }
      if (HasPrevExist) {
        size += 1 + 1;
      }
      if (HasExpiration) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Expiration);
      }
      if (HasWait) {
        size += 1 + 1;
      }
      if (HasSince) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Since);
      }
      if (HasRecursive) {
        size += 1 + 1;
      }
      if (HasSorted) {
        size += 1 + 1;
      }
      if (HasQuorum) {
        size += 1 + 1;
      }
      if (HasTime) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (HasStream) {
        size += 2 + 1;
      }
      if (HasRefresh) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Request other) {
      if (other == null) {
        return;
      }
      if (other.HasID) {
        ID = other.ID;
      }
      if (other.HasMethod) {
        Method = other.Method;
      }
      if (other.HasPath) {
        Path = other.Path;
      }
      if (other.HasVal) {
        Val = other.Val;
      }
      if (other.HasDir) {
        Dir = other.Dir;
      }
      if (other.HasPrevValue) {
        PrevValue = other.PrevValue;
      }
      if (other.HasPrevIndex) {
        PrevIndex = other.PrevIndex;
      }
      if (other.HasPrevExist) {
        PrevExist = other.PrevExist;
      }
      if (other.HasExpiration) {
        Expiration = other.Expiration;
      }
      if (other.HasWait) {
        Wait = other.Wait;
      }
      if (other.HasSince) {
        Since = other.Since;
      }
      if (other.HasRecursive) {
        Recursive = other.Recursive;
      }
      if (other.HasSorted) {
        Sorted = other.Sorted;
      }
      if (other.HasQuorum) {
        Quorum = other.Quorum;
      }
      if (other.HasTime) {
        Time = other.Time;
      }
      if (other.HasStream) {
        Stream = other.Stream;
      }
      if (other.HasRefresh) {
        Refresh = other.Refresh;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadUInt64();
            break;
          }
          case 18: {
            Method = input.ReadString();
            break;
          }
          case 26: {
            Path = input.ReadString();
            break;
          }
          case 34: {
            Val = input.ReadString();
            break;
          }
          case 40: {
            Dir = input.ReadBool();
            break;
          }
          case 50: {
            PrevValue = input.ReadString();
            break;
          }
          case 56: {
            PrevIndex = input.ReadUInt64();
            break;
          }
          case 64: {
            PrevExist = input.ReadBool();
            break;
          }
          case 72: {
            Expiration = input.ReadInt64();
            break;
          }
          case 80: {
            Wait = input.ReadBool();
            break;
          }
          case 88: {
            Since = input.ReadUInt64();
            break;
          }
          case 96: {
            Recursive = input.ReadBool();
            break;
          }
          case 104: {
            Sorted = input.ReadBool();
            break;
          }
          case 112: {
            Quorum = input.ReadBool();
            break;
          }
          case 120: {
            Time = input.ReadInt64();
            break;
          }
          case 128: {
            Stream = input.ReadBool();
            break;
          }
          case 136: {
            Refresh = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Metadata : pb::IMessage<Metadata> {
    private static readonly pb::MessageParser<Metadata> _parser = new pb::MessageParser<Metadata>(() => new Metadata());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Metadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Etcdserverpb.EtcdserverReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metadata(Metadata other) : this() {
      _hasBits0 = other._hasBits0;
      nodeID_ = other.nodeID_;
      clusterID_ = other.clusterID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metadata Clone() {
      return new Metadata(this);
    }

    /// <summary>Field number for the "NodeID" field.</summary>
    public const int NodeIDFieldNumber = 1;
    private readonly static ulong NodeIDDefaultValue = 0UL;

    private ulong nodeID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NodeID {
      get { if ((_hasBits0 & 1) != 0) { return nodeID_; } else { return NodeIDDefaultValue; } }
      set {
        _hasBits0 |= 1;
        nodeID_ = value;
      }
    }
    /// <summary>Gets whether the "NodeID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNodeID {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "NodeID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNodeID() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "ClusterID" field.</summary>
    public const int ClusterIDFieldNumber = 2;
    private readonly static ulong ClusterIDDefaultValue = 0UL;

    private ulong clusterID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ClusterID {
      get { if ((_hasBits0 & 2) != 0) { return clusterID_; } else { return ClusterIDDefaultValue; } }
      set {
        _hasBits0 |= 2;
        clusterID_ = value;
      }
    }
    /// <summary>Gets whether the "ClusterID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasClusterID {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "ClusterID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearClusterID() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Metadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Metadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeID != other.NodeID) return false;
      if (ClusterID != other.ClusterID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasNodeID) hash ^= NodeID.GetHashCode();
      if (HasClusterID) hash ^= ClusterID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasNodeID) {
        output.WriteRawTag(8);
        output.WriteUInt64(NodeID);
      }
      if (HasClusterID) {
        output.WriteRawTag(16);
        output.WriteUInt64(ClusterID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasNodeID) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NodeID);
      }
      if (HasClusterID) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ClusterID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Metadata other) {
      if (other == null) {
        return;
      }
      if (other.HasNodeID) {
        NodeID = other.NodeID;
      }
      if (other.HasClusterID) {
        ClusterID = other.ClusterID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NodeID = input.ReadUInt64();
            break;
          }
          case 16: {
            ClusterID = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
