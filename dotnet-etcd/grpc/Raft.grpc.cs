// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: raft.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Raftpb {

  /// <summary>Holder for reflection information generated from raft.proto</summary>
  public static partial class RaftReflection {

    #region Descriptor
    /// <summary>File descriptor for raft.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RaftReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpyYWZ0LnByb3RvEgZyYWZ0cGIaCmdvZ28ucHJvdG8iZQoFRW50cnkSEgoE",
            "VGVybRgCIAEoBEIEyN4fABITCgVJbmRleBgDIAEoBEIEyN4fABIlCgRUeXBl",
            "GAEgASgOMhEucmFmdHBiLkVudHJ5VHlwZUIEyN4fABIMCgREYXRhGAQgASgM",
            "ImgKEFNuYXBzaG90TWV0YWRhdGESKwoKY29uZl9zdGF0ZRgBIAEoCzIRLnJh",
            "ZnRwYi5Db25mU3RhdGVCBMjeHwASEwoFaW5kZXgYAiABKARCBMjeHwASEgoE",
            "dGVybRgDIAEoBEIEyN4fACJKCghTbmFwc2hvdBIMCgRkYXRhGAEgASgMEjAK",
            "CG1ldGFkYXRhGAIgASgLMhgucmFmdHBiLlNuYXBzaG90TWV0YWRhdGFCBMje",
            "HwAivwIKB01lc3NhZ2USJwoEdHlwZRgBIAEoDjITLnJhZnRwYi5NZXNzYWdl",
            "VHlwZUIEyN4fABIQCgJ0bxgCIAEoBEIEyN4fABISCgRmcm9tGAMgASgEQgTI",
            "3h8AEhIKBHRlcm0YBCABKARCBMjeHwASFQoHbG9nVGVybRgFIAEoBEIEyN4f",
            "ABITCgVpbmRleBgGIAEoBEIEyN4fABIkCgdlbnRyaWVzGAcgAygLMg0ucmFm",
            "dHBiLkVudHJ5QgTI3h8AEhQKBmNvbW1pdBgIIAEoBEIEyN4fABIoCghzbmFw",
            "c2hvdBgJIAEoCzIQLnJhZnRwYi5TbmFwc2hvdEIEyN4fABIUCgZyZWplY3QY",
            "CiABKAhCBMjeHwASGAoKcmVqZWN0SGludBgLIAEoBEIEyN4fABIPCgdjb250",
            "ZXh0GAwgASgMIkkKCUhhcmRTdGF0ZRISCgR0ZXJtGAEgASgEQgTI3h8AEhIK",
            "BHZvdGUYAiABKARCBMjeHwASFAoGY29tbWl0GAMgASgEQgTI3h8AIncKCUNv",
            "bmZTdGF0ZRIOCgZ2b3RlcnMYASADKAQSEAoIbGVhcm5lcnMYAiADKAQSFwoP",
            "dm90ZXJzX291dGdvaW5nGAMgAygEEhUKDWxlYXJuZXJzX25leHQYBCADKAQS",
            "GAoKYXV0b19sZWF2ZRgFIAEoCEIEyN4fACKCAQoKQ29uZkNoYW5nZRIqCgR0",
            "eXBlGAIgASgOMhYucmFmdHBiLkNvbmZDaGFuZ2VUeXBlQgTI3h8AEh8KB25v",
            "ZGVfaWQYAyABKARCDsjeHwDi3h8GTm9kZUlEEg8KB2NvbnRleHQYBCABKAwS",
            "FgoCaWQYASABKARCCsjeHwDi3h8CSUQiXwoQQ29uZkNoYW5nZVNpbmdsZRIq",
            "CgR0eXBlGAEgASgOMhYucmFmdHBiLkNvbmZDaGFuZ2VUeXBlQgTI3h8AEh8K",
            "B25vZGVfaWQYAiABKARCDsjeHwDi3h8GTm9kZUlEIogBCgxDb25mQ2hhbmdl",
            "VjISNgoKdHJhbnNpdGlvbhgBIAEoDjIcLnJhZnRwYi5Db25mQ2hhbmdlVHJh",
            "bnNpdGlvbkIEyN4fABIvCgdjaGFuZ2VzGAIgAygLMhgucmFmdHBiLkNvbmZD",
            "aGFuZ2VTaW5nbGVCBMjeHwASDwoHY29udGV4dBgDIAEoDCpICglFbnRyeVR5",
            "cGUSDwoLRW50cnlOb3JtYWwQABITCg9FbnRyeUNvbmZDaGFuZ2UQARIVChFF",
            "bnRyeUNvbmZDaGFuZ2VWMhACKtMCCgtNZXNzYWdlVHlwZRIKCgZNc2dIdXAQ",
            "ABILCgdNc2dCZWF0EAESCwoHTXNnUHJvcBACEgoKBk1zZ0FwcBADEg4KCk1z",
            "Z0FwcFJlc3AQBBILCgdNc2dWb3RlEAUSDwoLTXNnVm90ZVJlc3AQBhILCgdN",
            "c2dTbmFwEAcSEAoMTXNnSGVhcnRiZWF0EAgSFAoQTXNnSGVhcnRiZWF0UmVz",
            "cBAJEhIKDk1zZ1VucmVhY2hhYmxlEAoSEQoNTXNnU25hcFN0YXR1cxALEhIK",
            "Dk1zZ0NoZWNrUXVvcnVtEAwSFQoRTXNnVHJhbnNmZXJMZWFkZXIQDRIRCg1N",
            "c2dUaW1lb3V0Tm93EA4SEAoMTXNnUmVhZEluZGV4EA8SFAoQTXNnUmVhZElu",
            "ZGV4UmVzcBAQEg4KCk1zZ1ByZVZvdGUQERISCg5Nc2dQcmVWb3RlUmVzcBAS",
            "KoIBChRDb25mQ2hhbmdlVHJhbnNpdGlvbhIcChhDb25mQ2hhbmdlVHJhbnNp",
            "dGlvbkF1dG8QABIlCiFDb25mQ2hhbmdlVHJhbnNpdGlvbkpvaW50SW1wbGlj",
            "aXQQARIlCiFDb25mQ2hhbmdlVHJhbnNpdGlvbkpvaW50RXhwbGljaXQQAip5",
            "Cg5Db25mQ2hhbmdlVHlwZRIVChFDb25mQ2hhbmdlQWRkTm9kZRAAEhgKFENv",
            "bmZDaGFuZ2VSZW1vdmVOb2RlEAESGAoUQ29uZkNoYW5nZVVwZGF0ZU5vZGUQ",
            "AhIcChhDb25mQ2hhbmdlQWRkTGVhcm5lck5vZGUQA0IUyOIeAeDiHgHQ4h4B",
            "yOEeANDhHgA="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Gogoproto.GogoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Raftpb.EntryType), typeof(global::Raftpb.MessageType), typeof(global::Raftpb.ConfChangeTransition), typeof(global::Raftpb.ConfChangeType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Raftpb.Entry), global::Raftpb.Entry.Parser, new[]{ "Term", "Index", "Type", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Raftpb.SnapshotMetadata), global::Raftpb.SnapshotMetadata.Parser, new[]{ "ConfState", "Index", "Term" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Raftpb.Snapshot), global::Raftpb.Snapshot.Parser, new[]{ "Data", "Metadata" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Raftpb.Message), global::Raftpb.Message.Parser, new[]{ "Type", "To", "From", "Term", "LogTerm", "Index", "Entries", "Commit", "Snapshot", "Reject", "RejectHint", "Context" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Raftpb.HardState), global::Raftpb.HardState.Parser, new[]{ "Term", "Vote", "Commit" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Raftpb.ConfState), global::Raftpb.ConfState.Parser, new[]{ "Voters", "Learners", "VotersOutgoing", "LearnersNext", "AutoLeave" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Raftpb.ConfChange), global::Raftpb.ConfChange.Parser, new[]{ "Type", "NodeId", "Context", "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Raftpb.ConfChangeSingle), global::Raftpb.ConfChangeSingle.Parser, new[]{ "Type", "NodeId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Raftpb.ConfChangeV2), global::Raftpb.ConfChangeV2.Parser, new[]{ "Transition", "Changes", "Context" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EntryType {
    [pbr::OriginalName("EntryNormal")] EntryNormal = 0,
    /// <summary>
    /// corresponds to pb.ConfChange
    /// </summary>
    [pbr::OriginalName("EntryConfChange")] EntryConfChange = 1,
    /// <summary>
    /// corresponds to pb.ConfChangeV2
    /// </summary>
    [pbr::OriginalName("EntryConfChangeV2")] EntryConfChangeV2 = 2,
  }

  public enum MessageType {
    [pbr::OriginalName("MsgHup")] MsgHup = 0,
    [pbr::OriginalName("MsgBeat")] MsgBeat = 1,
    [pbr::OriginalName("MsgProp")] MsgProp = 2,
    [pbr::OriginalName("MsgApp")] MsgApp = 3,
    [pbr::OriginalName("MsgAppResp")] MsgAppResp = 4,
    [pbr::OriginalName("MsgVote")] MsgVote = 5,
    [pbr::OriginalName("MsgVoteResp")] MsgVoteResp = 6,
    [pbr::OriginalName("MsgSnap")] MsgSnap = 7,
    [pbr::OriginalName("MsgHeartbeat")] MsgHeartbeat = 8,
    [pbr::OriginalName("MsgHeartbeatResp")] MsgHeartbeatResp = 9,
    [pbr::OriginalName("MsgUnreachable")] MsgUnreachable = 10,
    [pbr::OriginalName("MsgSnapStatus")] MsgSnapStatus = 11,
    [pbr::OriginalName("MsgCheckQuorum")] MsgCheckQuorum = 12,
    [pbr::OriginalName("MsgTransferLeader")] MsgTransferLeader = 13,
    [pbr::OriginalName("MsgTimeoutNow")] MsgTimeoutNow = 14,
    [pbr::OriginalName("MsgReadIndex")] MsgReadIndex = 15,
    [pbr::OriginalName("MsgReadIndexResp")] MsgReadIndexResp = 16,
    [pbr::OriginalName("MsgPreVote")] MsgPreVote = 17,
    [pbr::OriginalName("MsgPreVoteResp")] MsgPreVoteResp = 18,
  }

  /// <summary>
  /// ConfChangeTransition specifies the behavior of a configuration change with
  /// respect to joint consensus.
  /// </summary>
  public enum ConfChangeTransition {
    /// <summary>
    /// Automatically use the simple protocol if possible, otherwise fall back
    /// to ConfChangeJointImplicit. Most applications will want to use this.
    /// </summary>
    [pbr::OriginalName("ConfChangeTransitionAuto")] Auto = 0,
    /// <summary>
    /// Use joint consensus unconditionally, and transition out of them
    /// automatically (by proposing a zero configuration change).
    ///
    /// This option is suitable for applications that want to minimize the time
    /// spent in the joint configuration and do not store the joint configuration
    /// in the state machine (outside of InitialState).
    /// </summary>
    [pbr::OriginalName("ConfChangeTransitionJointImplicit")] JointImplicit = 1,
    /// <summary>
    /// Use joint consensus and remain in the joint configuration until the
    /// application proposes a no-op configuration change. This is suitable for
    /// applications that want to explicitly control the transitions, for example
    /// to use a custom payload (via the Context field).
    /// </summary>
    [pbr::OriginalName("ConfChangeTransitionJointExplicit")] JointExplicit = 2,
  }

  public enum ConfChangeType {
    [pbr::OriginalName("ConfChangeAddNode")] ConfChangeAddNode = 0,
    [pbr::OriginalName("ConfChangeRemoveNode")] ConfChangeRemoveNode = 1,
    [pbr::OriginalName("ConfChangeUpdateNode")] ConfChangeUpdateNode = 2,
    [pbr::OriginalName("ConfChangeAddLearnerNode")] ConfChangeAddLearnerNode = 3,
  }

  #endregion

  #region Messages
  public sealed partial class Entry : pb::IMessage<Entry> {
    private static readonly pb::MessageParser<Entry> _parser = new pb::MessageParser<Entry>(() => new Entry());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Entry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Raftpb.RaftReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entry(Entry other) : this() {
      _hasBits0 = other._hasBits0;
      term_ = other.term_;
      index_ = other.index_;
      type_ = other.type_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entry Clone() {
      return new Entry(this);
    }

    /// <summary>Field number for the "Term" field.</summary>
    public const int TermFieldNumber = 2;
    private readonly static ulong TermDefaultValue = 0UL;

    private ulong term_;
    /// <summary>
    /// must be 64-bit aligned for atomic operations
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Term {
      get { if ((_hasBits0 & 2) != 0) { return term_; } else { return TermDefaultValue; } }
      set {
        _hasBits0 |= 2;
        term_ = value;
      }
    }
    /// <summary>Gets whether the "Term" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTerm {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "Term" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTerm() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 3;
    private readonly static ulong IndexDefaultValue = 0UL;

    private ulong index_;
    /// <summary>
    /// must be 64-bit aligned for atomic operations
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Index {
      get { if ((_hasBits0 & 4) != 0) { return index_; } else { return IndexDefaultValue; } }
      set {
        _hasBits0 |= 4;
        index_ = value;
      }
    }
    /// <summary>Gets whether the "Index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIndex {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "Index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIndex() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static global::Raftpb.EntryType TypeDefaultValue = global::Raftpb.EntryType.EntryNormal;

    private global::Raftpb.EntryType type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Raftpb.EntryType Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "Type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "Type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 4;
    private readonly static pb::ByteString DataDefaultValue = pb::ByteString.Empty;

    private pb::ByteString data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_ ?? DataDefaultValue; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasData {
      get { return data_ != null; }
    }
    /// <summary>Clears the value of the "Data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Entry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Entry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Term != other.Term) return false;
      if (Index != other.Index) return false;
      if (Type != other.Type) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTerm) hash ^= Term.GetHashCode();
      if (HasIndex) hash ^= Index.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasData) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (HasTerm) {
        output.WriteRawTag(16);
        output.WriteUInt64(Term);
      }
      if (HasIndex) {
        output.WriteRawTag(24);
        output.WriteUInt64(Index);
      }
      if (HasData) {
        output.WriteRawTag(34);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTerm) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Term);
      }
      if (HasIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Index);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (HasData) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Entry other) {
      if (other == null) {
        return;
      }
      if (other.HasTerm) {
        Term = other.Term;
      }
      if (other.HasIndex) {
        Index = other.Index;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasData) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Raftpb.EntryType) input.ReadEnum();
            break;
          }
          case 16: {
            Term = input.ReadUInt64();
            break;
          }
          case 24: {
            Index = input.ReadUInt64();
            break;
          }
          case 34: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SnapshotMetadata : pb::IMessage<SnapshotMetadata> {
    private static readonly pb::MessageParser<SnapshotMetadata> _parser = new pb::MessageParser<SnapshotMetadata>(() => new SnapshotMetadata());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SnapshotMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Raftpb.RaftReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapshotMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapshotMetadata(SnapshotMetadata other) : this() {
      _hasBits0 = other._hasBits0;
      confState_ = other.HasConfState ? other.confState_.Clone() : null;
      index_ = other.index_;
      term_ = other.term_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapshotMetadata Clone() {
      return new SnapshotMetadata(this);
    }

    /// <summary>Field number for the "conf_state" field.</summary>
    public const int ConfStateFieldNumber = 1;
    private global::Raftpb.ConfState confState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Raftpb.ConfState ConfState {
      get { return confState_; }
      set {
        confState_ = value;
      }
    }
    /// <summary>Gets whether the conf_state field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasConfState {
      get { return confState_ != null; }
    }
    /// <summary>Clears the value of the conf_state field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConfState() {
      confState_ = null;
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private readonly static ulong IndexDefaultValue = 0UL;

    private ulong index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Index {
      get { if ((_hasBits0 & 1) != 0) { return index_; } else { return IndexDefaultValue; } }
      set {
        _hasBits0 |= 1;
        index_ = value;
      }
    }
    /// <summary>Gets whether the "index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIndex {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIndex() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "term" field.</summary>
    public const int TermFieldNumber = 3;
    private readonly static ulong TermDefaultValue = 0UL;

    private ulong term_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Term {
      get { if ((_hasBits0 & 2) != 0) { return term_; } else { return TermDefaultValue; } }
      set {
        _hasBits0 |= 2;
        term_ = value;
      }
    }
    /// <summary>Gets whether the "term" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTerm {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "term" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTerm() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SnapshotMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SnapshotMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ConfState, other.ConfState)) return false;
      if (Index != other.Index) return false;
      if (Term != other.Term) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasConfState) hash ^= ConfState.GetHashCode();
      if (HasIndex) hash ^= Index.GetHashCode();
      if (HasTerm) hash ^= Term.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasConfState) {
        output.WriteRawTag(10);
        output.WriteMessage(ConfState);
      }
      if (HasIndex) {
        output.WriteRawTag(16);
        output.WriteUInt64(Index);
      }
      if (HasTerm) {
        output.WriteRawTag(24);
        output.WriteUInt64(Term);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasConfState) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfState);
      }
      if (HasIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Index);
      }
      if (HasTerm) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Term);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SnapshotMetadata other) {
      if (other == null) {
        return;
      }
      if (other.HasConfState) {
        if (!HasConfState) {
          ConfState = new global::Raftpb.ConfState();
        }
        ConfState.MergeFrom(other.ConfState);
      }
      if (other.HasIndex) {
        Index = other.Index;
      }
      if (other.HasTerm) {
        Term = other.Term;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (!HasConfState) {
              ConfState = new global::Raftpb.ConfState();
            }
            input.ReadMessage(ConfState);
            break;
          }
          case 16: {
            Index = input.ReadUInt64();
            break;
          }
          case 24: {
            Term = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Snapshot : pb::IMessage<Snapshot> {
    private static readonly pb::MessageParser<Snapshot> _parser = new pb::MessageParser<Snapshot>(() => new Snapshot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Snapshot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Raftpb.RaftReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Snapshot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Snapshot(Snapshot other) : this() {
      data_ = other.data_;
      metadata_ = other.HasMetadata ? other.metadata_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Snapshot Clone() {
      return new Snapshot(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private readonly static pb::ByteString DataDefaultValue = pb::ByteString.Empty;

    private pb::ByteString data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_ ?? DataDefaultValue; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasData {
      get { return data_ != null; }
    }
    /// <summary>Clears the value of the "data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      data_ = null;
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 2;
    private global::Raftpb.SnapshotMetadata metadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Raftpb.SnapshotMetadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }
    /// <summary>Gets whether the metadata field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMetadata {
      get { return metadata_ != null; }
    }
    /// <summary>Clears the value of the metadata field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMetadata() {
      metadata_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Snapshot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Snapshot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasData) hash ^= Data.GetHashCode();
      if (HasMetadata) hash ^= Metadata.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasData) {
        output.WriteRawTag(10);
        output.WriteBytes(Data);
      }
      if (HasMetadata) {
        output.WriteRawTag(18);
        output.WriteMessage(Metadata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasData) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (HasMetadata) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Snapshot other) {
      if (other == null) {
        return;
      }
      if (other.HasData) {
        Data = other.Data;
      }
      if (other.HasMetadata) {
        if (!HasMetadata) {
          Metadata = new global::Raftpb.SnapshotMetadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Data = input.ReadBytes();
            break;
          }
          case 18: {
            if (!HasMetadata) {
              Metadata = new global::Raftpb.SnapshotMetadata();
            }
            input.ReadMessage(Metadata);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Message : pb::IMessage<Message> {
    private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Message> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Raftpb.RaftReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message(Message other) : this() {
      _hasBits0 = other._hasBits0;
      type_ = other.type_;
      to_ = other.to_;
      from_ = other.from_;
      term_ = other.term_;
      logTerm_ = other.logTerm_;
      index_ = other.index_;
      entries_ = other.entries_.Clone();
      commit_ = other.commit_;
      snapshot_ = other.HasSnapshot ? other.snapshot_.Clone() : null;
      reject_ = other.reject_;
      rejectHint_ = other.rejectHint_;
      context_ = other.context_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message Clone() {
      return new Message(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static global::Raftpb.MessageType TypeDefaultValue = global::Raftpb.MessageType.MsgHup;

    private global::Raftpb.MessageType type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Raftpb.MessageType Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private readonly static ulong ToDefaultValue = 0UL;

    private ulong to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong To {
      get { if ((_hasBits0 & 2) != 0) { return to_; } else { return ToDefaultValue; } }
      set {
        _hasBits0 |= 2;
        to_ = value;
      }
    }
    /// <summary>Gets whether the "to" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTo {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "to" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTo() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 3;
    private readonly static ulong FromDefaultValue = 0UL;

    private ulong from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong From {
      get { if ((_hasBits0 & 4) != 0) { return from_; } else { return FromDefaultValue; } }
      set {
        _hasBits0 |= 4;
        from_ = value;
      }
    }
    /// <summary>Gets whether the "from" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasFrom {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "from" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFrom() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "term" field.</summary>
    public const int TermFieldNumber = 4;
    private readonly static ulong TermDefaultValue = 0UL;

    private ulong term_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Term {
      get { if ((_hasBits0 & 8) != 0) { return term_; } else { return TermDefaultValue; } }
      set {
        _hasBits0 |= 8;
        term_ = value;
      }
    }
    /// <summary>Gets whether the "term" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTerm {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "term" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTerm() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "logTerm" field.</summary>
    public const int LogTermFieldNumber = 5;
    private readonly static ulong LogTermDefaultValue = 0UL;

    private ulong logTerm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LogTerm {
      get { if ((_hasBits0 & 16) != 0) { return logTerm_; } else { return LogTermDefaultValue; } }
      set {
        _hasBits0 |= 16;
        logTerm_ = value;
      }
    }
    /// <summary>Gets whether the "logTerm" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLogTerm {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "logTerm" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLogTerm() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 6;
    private readonly static ulong IndexDefaultValue = 0UL;

    private ulong index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Index {
      get { if ((_hasBits0 & 32) != 0) { return index_; } else { return IndexDefaultValue; } }
      set {
        _hasBits0 |= 32;
        index_ = value;
      }
    }
    /// <summary>Gets whether the "index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIndex {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIndex() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Raftpb.Entry> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(58, global::Raftpb.Entry.Parser);
    private readonly pbc::RepeatedField<global::Raftpb.Entry> entries_ = new pbc::RepeatedField<global::Raftpb.Entry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Raftpb.Entry> Entries {
      get { return entries_; }
    }

    /// <summary>Field number for the "commit" field.</summary>
    public const int CommitFieldNumber = 8;
    private readonly static ulong CommitDefaultValue = 0UL;

    private ulong commit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Commit {
      get { if ((_hasBits0 & 64) != 0) { return commit_; } else { return CommitDefaultValue; } }
      set {
        _hasBits0 |= 64;
        commit_ = value;
      }
    }
    /// <summary>Gets whether the "commit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCommit {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "commit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCommit() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "snapshot" field.</summary>
    public const int SnapshotFieldNumber = 9;
    private global::Raftpb.Snapshot snapshot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Raftpb.Snapshot Snapshot {
      get { return snapshot_; }
      set {
        snapshot_ = value;
      }
    }
    /// <summary>Gets whether the snapshot field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSnapshot {
      get { return snapshot_ != null; }
    }
    /// <summary>Clears the value of the snapshot field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSnapshot() {
      snapshot_ = null;
    }

    /// <summary>Field number for the "reject" field.</summary>
    public const int RejectFieldNumber = 10;
    private readonly static bool RejectDefaultValue = false;

    private bool reject_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Reject {
      get { if ((_hasBits0 & 128) != 0) { return reject_; } else { return RejectDefaultValue; } }
      set {
        _hasBits0 |= 128;
        reject_ = value;
      }
    }
    /// <summary>Gets whether the "reject" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReject {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "reject" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReject() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "rejectHint" field.</summary>
    public const int RejectHintFieldNumber = 11;
    private readonly static ulong RejectHintDefaultValue = 0UL;

    private ulong rejectHint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RejectHint {
      get { if ((_hasBits0 & 256) != 0) { return rejectHint_; } else { return RejectHintDefaultValue; } }
      set {
        _hasBits0 |= 256;
        rejectHint_ = value;
      }
    }
    /// <summary>Gets whether the "rejectHint" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRejectHint {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "rejectHint" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRejectHint() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 12;
    private readonly static pb::ByteString ContextDefaultValue = pb::ByteString.Empty;

    private pb::ByteString context_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Context {
      get { return context_ ?? ContextDefaultValue; }
      set {
        context_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "context" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContext {
      get { return context_ != null; }
    }
    /// <summary>Clears the value of the "context" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContext() {
      context_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Message);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (To != other.To) return false;
      if (From != other.From) return false;
      if (Term != other.Term) return false;
      if (LogTerm != other.LogTerm) return false;
      if (Index != other.Index) return false;
      if(!entries_.Equals(other.entries_)) return false;
      if (Commit != other.Commit) return false;
      if (!object.Equals(Snapshot, other.Snapshot)) return false;
      if (Reject != other.Reject) return false;
      if (RejectHint != other.RejectHint) return false;
      if (Context != other.Context) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      if (HasTo) hash ^= To.GetHashCode();
      if (HasFrom) hash ^= From.GetHashCode();
      if (HasTerm) hash ^= Term.GetHashCode();
      if (HasLogTerm) hash ^= LogTerm.GetHashCode();
      if (HasIndex) hash ^= Index.GetHashCode();
      hash ^= entries_.GetHashCode();
      if (HasCommit) hash ^= Commit.GetHashCode();
      if (HasSnapshot) hash ^= Snapshot.GetHashCode();
      if (HasReject) hash ^= Reject.GetHashCode();
      if (HasRejectHint) hash ^= RejectHint.GetHashCode();
      if (HasContext) hash ^= Context.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (HasTo) {
        output.WriteRawTag(16);
        output.WriteUInt64(To);
      }
      if (HasFrom) {
        output.WriteRawTag(24);
        output.WriteUInt64(From);
      }
      if (HasTerm) {
        output.WriteRawTag(32);
        output.WriteUInt64(Term);
      }
      if (HasLogTerm) {
        output.WriteRawTag(40);
        output.WriteUInt64(LogTerm);
      }
      if (HasIndex) {
        output.WriteRawTag(48);
        output.WriteUInt64(Index);
      }
      entries_.WriteTo(output, _repeated_entries_codec);
      if (HasCommit) {
        output.WriteRawTag(64);
        output.WriteUInt64(Commit);
      }
      if (HasSnapshot) {
        output.WriteRawTag(74);
        output.WriteMessage(Snapshot);
      }
      if (HasReject) {
        output.WriteRawTag(80);
        output.WriteBool(Reject);
      }
      if (HasRejectHint) {
        output.WriteRawTag(88);
        output.WriteUInt64(RejectHint);
      }
      if (HasContext) {
        output.WriteRawTag(98);
        output.WriteBytes(Context);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (HasTo) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(To);
      }
      if (HasFrom) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(From);
      }
      if (HasTerm) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Term);
      }
      if (HasLogTerm) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LogTerm);
      }
      if (HasIndex) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Index);
      }
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (HasCommit) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Commit);
      }
      if (HasSnapshot) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Snapshot);
      }
      if (HasReject) {
        size += 1 + 1;
      }
      if (HasRejectHint) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RejectHint);
      }
      if (HasContext) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Context);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Message other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasTo) {
        To = other.To;
      }
      if (other.HasFrom) {
        From = other.From;
      }
      if (other.HasTerm) {
        Term = other.Term;
      }
      if (other.HasLogTerm) {
        LogTerm = other.LogTerm;
      }
      if (other.HasIndex) {
        Index = other.Index;
      }
      entries_.Add(other.entries_);
      if (other.HasCommit) {
        Commit = other.Commit;
      }
      if (other.HasSnapshot) {
        if (!HasSnapshot) {
          Snapshot = new global::Raftpb.Snapshot();
        }
        Snapshot.MergeFrom(other.Snapshot);
      }
      if (other.HasReject) {
        Reject = other.Reject;
      }
      if (other.HasRejectHint) {
        RejectHint = other.RejectHint;
      }
      if (other.HasContext) {
        Context = other.Context;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Raftpb.MessageType) input.ReadEnum();
            break;
          }
          case 16: {
            To = input.ReadUInt64();
            break;
          }
          case 24: {
            From = input.ReadUInt64();
            break;
          }
          case 32: {
            Term = input.ReadUInt64();
            break;
          }
          case 40: {
            LogTerm = input.ReadUInt64();
            break;
          }
          case 48: {
            Index = input.ReadUInt64();
            break;
          }
          case 58: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
          case 64: {
            Commit = input.ReadUInt64();
            break;
          }
          case 74: {
            if (!HasSnapshot) {
              Snapshot = new global::Raftpb.Snapshot();
            }
            input.ReadMessage(Snapshot);
            break;
          }
          case 80: {
            Reject = input.ReadBool();
            break;
          }
          case 88: {
            RejectHint = input.ReadUInt64();
            break;
          }
          case 98: {
            Context = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HardState : pb::IMessage<HardState> {
    private static readonly pb::MessageParser<HardState> _parser = new pb::MessageParser<HardState>(() => new HardState());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HardState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Raftpb.RaftReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HardState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HardState(HardState other) : this() {
      _hasBits0 = other._hasBits0;
      term_ = other.term_;
      vote_ = other.vote_;
      commit_ = other.commit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HardState Clone() {
      return new HardState(this);
    }

    /// <summary>Field number for the "term" field.</summary>
    public const int TermFieldNumber = 1;
    private readonly static ulong TermDefaultValue = 0UL;

    private ulong term_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Term {
      get { if ((_hasBits0 & 1) != 0) { return term_; } else { return TermDefaultValue; } }
      set {
        _hasBits0 |= 1;
        term_ = value;
      }
    }
    /// <summary>Gets whether the "term" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTerm {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "term" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTerm() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "vote" field.</summary>
    public const int VoteFieldNumber = 2;
    private readonly static ulong VoteDefaultValue = 0UL;

    private ulong vote_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Vote {
      get { if ((_hasBits0 & 2) != 0) { return vote_; } else { return VoteDefaultValue; } }
      set {
        _hasBits0 |= 2;
        vote_ = value;
      }
    }
    /// <summary>Gets whether the "vote" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVote {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "vote" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVote() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "commit" field.</summary>
    public const int CommitFieldNumber = 3;
    private readonly static ulong CommitDefaultValue = 0UL;

    private ulong commit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Commit {
      get { if ((_hasBits0 & 4) != 0) { return commit_; } else { return CommitDefaultValue; } }
      set {
        _hasBits0 |= 4;
        commit_ = value;
      }
    }
    /// <summary>Gets whether the "commit" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCommit {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "commit" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCommit() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HardState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HardState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Term != other.Term) return false;
      if (Vote != other.Vote) return false;
      if (Commit != other.Commit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTerm) hash ^= Term.GetHashCode();
      if (HasVote) hash ^= Vote.GetHashCode();
      if (HasCommit) hash ^= Commit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTerm) {
        output.WriteRawTag(8);
        output.WriteUInt64(Term);
      }
      if (HasVote) {
        output.WriteRawTag(16);
        output.WriteUInt64(Vote);
      }
      if (HasCommit) {
        output.WriteRawTag(24);
        output.WriteUInt64(Commit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTerm) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Term);
      }
      if (HasVote) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Vote);
      }
      if (HasCommit) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Commit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HardState other) {
      if (other == null) {
        return;
      }
      if (other.HasTerm) {
        Term = other.Term;
      }
      if (other.HasVote) {
        Vote = other.Vote;
      }
      if (other.HasCommit) {
        Commit = other.Commit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Term = input.ReadUInt64();
            break;
          }
          case 16: {
            Vote = input.ReadUInt64();
            break;
          }
          case 24: {
            Commit = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfState : pb::IMessage<ConfState> {
    private static readonly pb::MessageParser<ConfState> _parser = new pb::MessageParser<ConfState>(() => new ConfState());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Raftpb.RaftReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfState(ConfState other) : this() {
      _hasBits0 = other._hasBits0;
      voters_ = other.voters_.Clone();
      learners_ = other.learners_.Clone();
      votersOutgoing_ = other.votersOutgoing_.Clone();
      learnersNext_ = other.learnersNext_.Clone();
      autoLeave_ = other.autoLeave_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfState Clone() {
      return new ConfState(this);
    }

    /// <summary>Field number for the "voters" field.</summary>
    public const int VotersFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_voters_codec
        = pb::FieldCodec.ForUInt64(8);
    private readonly pbc::RepeatedField<ulong> voters_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// The voters in the incoming config. (If the configuration is not joint,
    /// then the outgoing config is empty).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Voters {
      get { return voters_; }
    }

    /// <summary>Field number for the "learners" field.</summary>
    public const int LearnersFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_learners_codec
        = pb::FieldCodec.ForUInt64(16);
    private readonly pbc::RepeatedField<ulong> learners_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// The learners in the incoming config.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Learners {
      get { return learners_; }
    }

    /// <summary>Field number for the "voters_outgoing" field.</summary>
    public const int VotersOutgoingFieldNumber = 3;
    private static readonly pb::FieldCodec<ulong> _repeated_votersOutgoing_codec
        = pb::FieldCodec.ForUInt64(24);
    private readonly pbc::RepeatedField<ulong> votersOutgoing_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// The voters in the outgoing config.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> VotersOutgoing {
      get { return votersOutgoing_; }
    }

    /// <summary>Field number for the "learners_next" field.</summary>
    public const int LearnersNextFieldNumber = 4;
    private static readonly pb::FieldCodec<ulong> _repeated_learnersNext_codec
        = pb::FieldCodec.ForUInt64(32);
    private readonly pbc::RepeatedField<ulong> learnersNext_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// The nodes that will become learners when the outgoing config is removed.
    /// These nodes are necessarily currently in nodes_joint (or they would have
    /// been added to the incoming config right away).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> LearnersNext {
      get { return learnersNext_; }
    }

    /// <summary>Field number for the "auto_leave" field.</summary>
    public const int AutoLeaveFieldNumber = 5;
    private readonly static bool AutoLeaveDefaultValue = false;

    private bool autoLeave_;
    /// <summary>
    /// If set, the config is joint and Raft will automatically transition into
    /// the final config (i.e. remove the outgoing config) when this is safe.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoLeave {
      get { if ((_hasBits0 & 1) != 0) { return autoLeave_; } else { return AutoLeaveDefaultValue; } }
      set {
        _hasBits0 |= 1;
        autoLeave_ = value;
      }
    }
    /// <summary>Gets whether the "auto_leave" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAutoLeave {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "auto_leave" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAutoLeave() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!voters_.Equals(other.voters_)) return false;
      if(!learners_.Equals(other.learners_)) return false;
      if(!votersOutgoing_.Equals(other.votersOutgoing_)) return false;
      if(!learnersNext_.Equals(other.learnersNext_)) return false;
      if (AutoLeave != other.AutoLeave) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= voters_.GetHashCode();
      hash ^= learners_.GetHashCode();
      hash ^= votersOutgoing_.GetHashCode();
      hash ^= learnersNext_.GetHashCode();
      if (HasAutoLeave) hash ^= AutoLeave.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      voters_.WriteTo(output, _repeated_voters_codec);
      learners_.WriteTo(output, _repeated_learners_codec);
      votersOutgoing_.WriteTo(output, _repeated_votersOutgoing_codec);
      learnersNext_.WriteTo(output, _repeated_learnersNext_codec);
      if (HasAutoLeave) {
        output.WriteRawTag(40);
        output.WriteBool(AutoLeave);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += voters_.CalculateSize(_repeated_voters_codec);
      size += learners_.CalculateSize(_repeated_learners_codec);
      size += votersOutgoing_.CalculateSize(_repeated_votersOutgoing_codec);
      size += learnersNext_.CalculateSize(_repeated_learnersNext_codec);
      if (HasAutoLeave) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfState other) {
      if (other == null) {
        return;
      }
      voters_.Add(other.voters_);
      learners_.Add(other.learners_);
      votersOutgoing_.Add(other.votersOutgoing_);
      learnersNext_.Add(other.learnersNext_);
      if (other.HasAutoLeave) {
        AutoLeave = other.AutoLeave;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            voters_.AddEntriesFrom(input, _repeated_voters_codec);
            break;
          }
          case 18:
          case 16: {
            learners_.AddEntriesFrom(input, _repeated_learners_codec);
            break;
          }
          case 26:
          case 24: {
            votersOutgoing_.AddEntriesFrom(input, _repeated_votersOutgoing_codec);
            break;
          }
          case 34:
          case 32: {
            learnersNext_.AddEntriesFrom(input, _repeated_learnersNext_codec);
            break;
          }
          case 40: {
            AutoLeave = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfChange : pb::IMessage<ConfChange> {
    private static readonly pb::MessageParser<ConfChange> _parser = new pb::MessageParser<ConfChange>(() => new ConfChange());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Raftpb.RaftReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfChange(ConfChange other) : this() {
      _hasBits0 = other._hasBits0;
      type_ = other.type_;
      nodeId_ = other.nodeId_;
      context_ = other.context_;
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfChange Clone() {
      return new ConfChange(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private readonly static global::Raftpb.ConfChangeType TypeDefaultValue = global::Raftpb.ConfChangeType.ConfChangeAddNode;

    private global::Raftpb.ConfChangeType type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Raftpb.ConfChangeType Type {
      get { if ((_hasBits0 & 2) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "node_id" field.</summary>
    public const int NodeIdFieldNumber = 3;
    private readonly static ulong NodeIdDefaultValue = 0UL;

    private ulong nodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NodeId {
      get { if ((_hasBits0 & 4) != 0) { return nodeId_; } else { return NodeIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        nodeId_ = value;
      }
    }
    /// <summary>Gets whether the "node_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNodeId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "node_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNodeId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 4;
    private readonly static pb::ByteString ContextDefaultValue = pb::ByteString.Empty;

    private pb::ByteString context_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Context {
      get { return context_ ?? ContextDefaultValue; }
      set {
        context_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "context" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContext {
      get { return context_ != null; }
    }
    /// <summary>Clears the value of the "context" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContext() {
      context_ = null;
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static ulong IdDefaultValue = 0UL;

    private ulong id_;
    /// <summary>
    /// NB: this is used only by etcd to thread through a unique identifier.
    /// Ideally it should really use the Context instead. No counterpart to
    /// this field exists in ConfChangeV2.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (NodeId != other.NodeId) return false;
      if (Context != other.Context) return false;
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      if (HasNodeId) hash ^= NodeId.GetHashCode();
      if (HasContext) hash ^= Context.GetHashCode();
      if (HasId) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (HasType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (HasNodeId) {
        output.WriteRawTag(24);
        output.WriteUInt64(NodeId);
      }
      if (HasContext) {
        output.WriteRawTag(34);
        output.WriteBytes(Context);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (HasNodeId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NodeId);
      }
      if (HasContext) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Context);
      }
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfChange other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasNodeId) {
        NodeId = other.NodeId;
      }
      if (other.HasContext) {
        Context = other.Context;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            Type = (global::Raftpb.ConfChangeType) input.ReadEnum();
            break;
          }
          case 24: {
            NodeId = input.ReadUInt64();
            break;
          }
          case 34: {
            Context = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ConfChangeSingle is an individual configuration change operation. Multiple
  /// such operations can be carried out atomically via a ConfChangeV2.
  /// </summary>
  public sealed partial class ConfChangeSingle : pb::IMessage<ConfChangeSingle> {
    private static readonly pb::MessageParser<ConfChangeSingle> _parser = new pb::MessageParser<ConfChangeSingle>(() => new ConfChangeSingle());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfChangeSingle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Raftpb.RaftReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfChangeSingle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfChangeSingle(ConfChangeSingle other) : this() {
      _hasBits0 = other._hasBits0;
      type_ = other.type_;
      nodeId_ = other.nodeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfChangeSingle Clone() {
      return new ConfChangeSingle(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static global::Raftpb.ConfChangeType TypeDefaultValue = global::Raftpb.ConfChangeType.ConfChangeAddNode;

    private global::Raftpb.ConfChangeType type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Raftpb.ConfChangeType Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "node_id" field.</summary>
    public const int NodeIdFieldNumber = 2;
    private readonly static ulong NodeIdDefaultValue = 0UL;

    private ulong nodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NodeId {
      get { if ((_hasBits0 & 2) != 0) { return nodeId_; } else { return NodeIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        nodeId_ = value;
      }
    }
    /// <summary>Gets whether the "node_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNodeId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "node_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNodeId() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfChangeSingle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfChangeSingle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (NodeId != other.NodeId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      if (HasNodeId) hash ^= NodeId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasType) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (HasNodeId) {
        output.WriteRawTag(16);
        output.WriteUInt64(NodeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (HasNodeId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NodeId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfChangeSingle other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasNodeId) {
        NodeId = other.NodeId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Raftpb.ConfChangeType) input.ReadEnum();
            break;
          }
          case 16: {
            NodeId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ConfChangeV2 messages initiate configuration changes. They support both the
  /// simple "one at a time" membership change protocol and full Joint Consensus
  /// allowing for arbitrary changes in membership.
  ///
  /// The supplied context is treated as an opaque payload and can be used to
  /// attach an action on the state machine to the application of the config change
  /// proposal. Note that contrary to Joint Consensus as outlined in the Raft
  /// paper[1], configuration changes become active when they are *applied* to the
  /// state machine (not when they are appended to the log).
  ///
  /// The simple protocol can be used whenever only a single change is made.
  ///
  /// Non-simple changes require the use of Joint Consensus, for which two
  /// configuration changes are run. The first configuration change specifies the
  /// desired changes and transitions the Raft group into the joint configuration,
  /// in which quorum requires a majority of both the pre-changes and post-changes
  /// configuration. Joint Consensus avoids entering fragile intermediate
  /// configurations that could compromise survivability. For example, without the
  /// use of Joint Consensus and running across three availability zones with a
  /// replication factor of three, it is not possible to replace a voter without
  /// entering an intermediate configuration that does not survive the outage of
  /// one availability zone.
  ///
  /// The provided ConfChangeTransition specifies how (and whether) Joint Consensus
  /// is used, and assigns the task of leaving the joint configuration either to
  /// Raft or the application. Leaving the joint configuration is accomplished by
  /// proposing a ConfChangeV2 with only and optionally the Context field
  /// populated.
  ///
  /// For details on Raft membership changes, see:
  ///
  /// [1]: https://github.com/ongardie/dissertation/blob/master/online-trim.pdf
  /// </summary>
  public sealed partial class ConfChangeV2 : pb::IMessage<ConfChangeV2> {
    private static readonly pb::MessageParser<ConfChangeV2> _parser = new pb::MessageParser<ConfChangeV2>(() => new ConfChangeV2());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfChangeV2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Raftpb.RaftReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfChangeV2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfChangeV2(ConfChangeV2 other) : this() {
      _hasBits0 = other._hasBits0;
      transition_ = other.transition_;
      changes_ = other.changes_.Clone();
      context_ = other.context_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfChangeV2 Clone() {
      return new ConfChangeV2(this);
    }

    /// <summary>Field number for the "transition" field.</summary>
    public const int TransitionFieldNumber = 1;
    private readonly static global::Raftpb.ConfChangeTransition TransitionDefaultValue = global::Raftpb.ConfChangeTransition.Auto;

    private global::Raftpb.ConfChangeTransition transition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Raftpb.ConfChangeTransition Transition {
      get { if ((_hasBits0 & 1) != 0) { return transition_; } else { return TransitionDefaultValue; } }
      set {
        _hasBits0 |= 1;
        transition_ = value;
      }
    }
    /// <summary>Gets whether the "transition" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTransition {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "transition" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTransition() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "changes" field.</summary>
    public const int ChangesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Raftpb.ConfChangeSingle> _repeated_changes_codec
        = pb::FieldCodec.ForMessage(18, global::Raftpb.ConfChangeSingle.Parser);
    private readonly pbc::RepeatedField<global::Raftpb.ConfChangeSingle> changes_ = new pbc::RepeatedField<global::Raftpb.ConfChangeSingle>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Raftpb.ConfChangeSingle> Changes {
      get { return changes_; }
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 3;
    private readonly static pb::ByteString ContextDefaultValue = pb::ByteString.Empty;

    private pb::ByteString context_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Context {
      get { return context_ ?? ContextDefaultValue; }
      set {
        context_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "context" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContext {
      get { return context_ != null; }
    }
    /// <summary>Clears the value of the "context" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContext() {
      context_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfChangeV2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfChangeV2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Transition != other.Transition) return false;
      if(!changes_.Equals(other.changes_)) return false;
      if (Context != other.Context) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTransition) hash ^= Transition.GetHashCode();
      hash ^= changes_.GetHashCode();
      if (HasContext) hash ^= Context.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasTransition) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Transition);
      }
      changes_.WriteTo(output, _repeated_changes_codec);
      if (HasContext) {
        output.WriteRawTag(26);
        output.WriteBytes(Context);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTransition) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Transition);
      }
      size += changes_.CalculateSize(_repeated_changes_codec);
      if (HasContext) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Context);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfChangeV2 other) {
      if (other == null) {
        return;
      }
      if (other.HasTransition) {
        Transition = other.Transition;
      }
      changes_.Add(other.changes_);
      if (other.HasContext) {
        Context = other.Context;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Transition = (global::Raftpb.ConfChangeTransition) input.ReadEnum();
            break;
          }
          case 18: {
            changes_.AddEntriesFrom(input, _repeated_changes_codec);
            break;
          }
          case 26: {
            Context = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
